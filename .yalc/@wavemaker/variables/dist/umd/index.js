var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define([], factory);
    else if (typeof exports === 'object')
        exports["wm_common_variables"] = factory();
    else
        root["wm_common_variables"] = factory();
})(window, function () {
    return /******/ (function () {
        /******/ var __webpack_modules__ = ({
            /***/ "./node_modules/@metrichor/jmespath/dist/jmespath.esm.js": 
            /*!***************************************************************!*\
              !*** ./node_modules/@metrichor/jmespath/dist/jmespath.esm.js ***!
              \***************************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                var _e, _f;
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "TYPE_ANY": function () { return ( /* binding */TYPE_ANY); },
                    /* harmony export */ "TYPE_ARRAY": function () { return ( /* binding */TYPE_ARRAY); },
                    /* harmony export */ "TYPE_ARRAY_NUMBER": function () { return ( /* binding */TYPE_ARRAY_NUMBER); },
                    /* harmony export */ "TYPE_ARRAY_STRING": function () { return ( /* binding */TYPE_ARRAY_STRING); },
                    /* harmony export */ "TYPE_BOOLEAN": function () { return ( /* binding */TYPE_BOOLEAN); },
                    /* harmony export */ "TYPE_EXPREF": function () { return ( /* binding */TYPE_EXPREF); },
                    /* harmony export */ "TYPE_NULL": function () { return ( /* binding */TYPE_NULL); },
                    /* harmony export */ "TYPE_NUMBER": function () { return ( /* binding */TYPE_NUMBER); },
                    /* harmony export */ "TYPE_OBJECT": function () { return ( /* binding */TYPE_OBJECT); },
                    /* harmony export */ "TYPE_STRING": function () { return ( /* binding */TYPE_STRING); },
                    /* harmony export */ "TreeInterpreter": function () { return ( /* binding */TreeInterpreter); },
                    /* harmony export */ "compile": function () { return ( /* binding */compile); },
                    /* harmony export */ "default": function () { return (__WEBPACK_DEFAULT_EXPORT__); },
                    /* harmony export */ "jmespath": function () { return ( /* binding */jmespath); },
                    /* harmony export */ "registerFunction": function () { return ( /* binding */registerFunction); },
                    /* harmony export */ "search": function () { return ( /* binding */search); },
                    /* harmony export */ "tokenize": function () { return ( /* binding */tokenize); }
                    /* harmony export */ 
                });
                var isObject = function (obj) {
                    return obj !== null && Object.prototype.toString.call(obj) === '[object Object]';
                };
                var strictDeepEqual = function (first, second) {
                    if (first === second) {
                        return true;
                    }
                    if (typeof first !== typeof second) {
                        return false;
                    }
                    if (Array.isArray(first) && Array.isArray(second)) {
                        if (first.length !== second.length) {
                            return false;
                        }
                        for (var i = 0; i < first.length; i += 1) {
                            if (!strictDeepEqual(first[i], second[i])) {
                                return false;
                            }
                        }
                        return true;
                    }
                    if (isObject(first) && isObject(second)) {
                        var firstEntries = Object.entries(first);
                        var secondKeys = new Set(Object.keys(second));
                        if (firstEntries.length !== secondKeys.size) {
                            return false;
                        }
                        for (var _e = 0, firstEntries_1 = firstEntries; _e < firstEntries_1.length; _e++) {
                            var _f = firstEntries_1[_e], key = _f[0], value = _f[1];
                            if (!strictDeepEqual(value, second[key])) {
                                return false;
                            }
                            secondKeys.delete(key);
                        }
                        return secondKeys.size === 0;
                    }
                    return false;
                };
                var isFalse = function (obj) {
                    if (obj === '' || obj === false || obj === null || obj === undefined) {
                        return true;
                    }
                    if (Array.isArray(obj) && obj.length === 0) {
                        return true;
                    }
                    if (isObject(obj)) {
                        for (var key in obj) {
                            if (obj.hasOwnProperty(key)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                };
                var isAlpha = function (ch) {
                    // tslint:disable-next-line: strict-comparisons
                    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || ch === '_';
                };
                var isNum = function (ch) {
                    // tslint:disable-next-line: strict-comparisons
                    return (ch >= '0' && ch <= '9') || ch === '-';
                };
                var isAlphaNum = function (ch) {
                    // tslint:disable-next-line: strict-comparisons
                    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || ch === '_';
                };
                var Token;
                (function (Token) {
                    Token["TOK_EOF"] = "EOF";
                    Token["TOK_UNQUOTEDIDENTIFIER"] = "UnquotedIdentifier";
                    Token["TOK_QUOTEDIDENTIFIER"] = "QuotedIdentifier";
                    Token["TOK_RBRACKET"] = "Rbracket";
                    Token["TOK_RPAREN"] = "Rparen";
                    Token["TOK_COMMA"] = "Comma";
                    Token["TOK_COLON"] = "Colon";
                    Token["TOK_RBRACE"] = "Rbrace";
                    Token["TOK_NUMBER"] = "Number";
                    Token["TOK_CURRENT"] = "Current";
                    Token["TOK_ROOT"] = "Root";
                    Token["TOK_EXPREF"] = "Expref";
                    Token["TOK_PIPE"] = "Pipe";
                    Token["TOK_OR"] = "Or";
                    Token["TOK_AND"] = "And";
                    Token["TOK_EQ"] = "EQ";
                    Token["TOK_GT"] = "GT";
                    Token["TOK_LT"] = "LT";
                    Token["TOK_GTE"] = "GTE";
                    Token["TOK_LTE"] = "LTE";
                    Token["TOK_NE"] = "NE";
                    Token["TOK_FLATTEN"] = "Flatten";
                    Token["TOK_STAR"] = "Star";
                    Token["TOK_FILTER"] = "Filter";
                    Token["TOK_DOT"] = "Dot";
                    Token["TOK_NOT"] = "Not";
                    Token["TOK_LBRACE"] = "Lbrace";
                    Token["TOK_LBRACKET"] = "Lbracket";
                    Token["TOK_LPAREN"] = "Lparen";
                    Token["TOK_LITERAL"] = "Literal";
                })(Token || (Token = {}));
                var basicTokens = (_e = {
                        '(': Token.TOK_LPAREN,
                        ')': Token.TOK_RPAREN,
                        '*': Token.TOK_STAR,
                        ',': Token.TOK_COMMA,
                        '.': Token.TOK_DOT,
                        ':': Token.TOK_COLON,
                        '@': Token.TOK_CURRENT
                    },
                    _e['$'] = Token.TOK_ROOT,
                    _e[']'] = Token.TOK_RBRACKET,
                    _e['{'] = Token.TOK_LBRACE,
                    _e['}'] = Token.TOK_RBRACE,
                    _e);
                var operatorStartToken = {
                    '!': true,
                    '<': true,
                    '=': true,
                    '>': true,
                };
                var skipChars = {
                    '\t': true,
                    '\n': true,
                    '\r': true,
                    ' ': true,
                };
                var StreamLexer = /** @class */ (function () {
                    function StreamLexer() {
                        this._current = 0;
                    }
                    StreamLexer.prototype.tokenize = function (stream) {
                        var tokens = [];
                        this._current = 0;
                        var start;
                        var identifier;
                        var token;
                        while (this._current < stream.length) {
                            if (isAlpha(stream[this._current])) {
                                start = this._current;
                                identifier = this.consumeUnquotedIdentifier(stream);
                                tokens.push({
                                    start: start,
                                    type: Token.TOK_UNQUOTEDIDENTIFIER,
                                    value: identifier,
                                });
                            }
                            else if (basicTokens[stream[this._current]] !== undefined) {
                                tokens.push({
                                    start: this._current,
                                    type: basicTokens[stream[this._current]],
                                    value: stream[this._current],
                                });
                                this._current += 1;
                            }
                            else if (isNum(stream[this._current])) {
                                token = this.consumeNumber(stream);
                                tokens.push(token);
                            }
                            else if (stream[this._current] === '[') {
                                token = this.consumeLBracket(stream);
                                tokens.push(token);
                            }
                            else if (stream[this._current] === '"') {
                                start = this._current;
                                identifier = this.consumeQuotedIdentifier(stream);
                                tokens.push({
                                    start: start,
                                    type: Token.TOK_QUOTEDIDENTIFIER,
                                    value: identifier,
                                });
                            }
                            else if (stream[this._current] === "'") {
                                start = this._current;
                                identifier = this.consumeRawStringLiteral(stream);
                                tokens.push({
                                    start: start,
                                    type: Token.TOK_LITERAL,
                                    value: identifier,
                                });
                            }
                            else if (stream[this._current] === '`') {
                                start = this._current;
                                var literal = this.consumeLiteral(stream);
                                tokens.push({
                                    start: start,
                                    type: Token.TOK_LITERAL,
                                    value: literal,
                                });
                            }
                            else if (operatorStartToken[stream[this._current]] !== undefined) {
                                token = this.consumeOperator(stream);
                                token && tokens.push(token);
                            }
                            else if (skipChars[stream[this._current]] !== undefined) {
                                this._current += 1;
                            }
                            else if (stream[this._current] === '&') {
                                start = this._current;
                                this._current += 1;
                                if (stream[this._current] === '&') {
                                    this._current += 1;
                                    tokens.push({ start: start, type: Token.TOK_AND, value: '&&' });
                                }
                                else {
                                    tokens.push({ start: start, type: Token.TOK_EXPREF, value: '&' });
                                }
                            }
                            else if (stream[this._current] === '|') {
                                start = this._current;
                                this._current += 1;
                                if (stream[this._current] === '|') {
                                    this._current += 1;
                                    tokens.push({ start: start, type: Token.TOK_OR, value: '||' });
                                }
                                else {
                                    tokens.push({ start: start, type: Token.TOK_PIPE, value: '|' });
                                }
                            }
                            else {
                                var error = new Error("Unknown character: " + stream[this._current]);
                                error.name = 'LexerError';
                                throw error;
                            }
                        }
                        return tokens;
                    };
                    StreamLexer.prototype.consumeUnquotedIdentifier = function (stream) {
                        var start = this._current;
                        this._current += 1;
                        while (this._current < stream.length && isAlphaNum(stream[this._current])) {
                            this._current += 1;
                        }
                        return stream.slice(start, this._current);
                    };
                    StreamLexer.prototype.consumeQuotedIdentifier = function (stream) {
                        var start = this._current;
                        this._current += 1;
                        var maxLength = stream.length;
                        while (stream[this._current] !== '"' && this._current < maxLength) {
                            var current = this._current;
                            if (stream[current] === '\\' && (stream[current + 1] === '\\' || stream[current + 1] === '"')) {
                                current += 2;
                            }
                            else {
                                current += 1;
                            }
                            this._current = current;
                        }
                        this._current += 1;
                        return JSON.parse(stream.slice(start, this._current));
                    };
                    StreamLexer.prototype.consumeRawStringLiteral = function (stream) {
                        var start = this._current;
                        this._current += 1;
                        var maxLength = stream.length;
                        while (stream[this._current] !== "'" && this._current < maxLength) {
                            var current = this._current;
                            if (stream[current] === '\\' && (stream[current + 1] === '\\' || stream[current + 1] === "'")) {
                                current += 2;
                            }
                            else {
                                current += 1;
                            }
                            this._current = current;
                        }
                        this._current += 1;
                        var literal = stream.slice(start + 1, this._current - 1);
                        return literal.replace("\\'", "'");
                    };
                    StreamLexer.prototype.consumeNumber = function (stream) {
                        var start = this._current;
                        this._current += 1;
                        var maxLength = stream.length;
                        while (isNum(stream[this._current]) && this._current < maxLength) {
                            this._current += 1;
                        }
                        var value = parseInt(stream.slice(start, this._current), 10);
                        return { start: start, value: value, type: Token.TOK_NUMBER };
                    };
                    StreamLexer.prototype.consumeLBracket = function (stream) {
                        var start = this._current;
                        this._current += 1;
                        if (stream[this._current] === '?') {
                            this._current += 1;
                            return { start: start, type: Token.TOK_FILTER, value: '[?' };
                        }
                        if (stream[this._current] === ']') {
                            this._current += 1;
                            return { start: start, type: Token.TOK_FLATTEN, value: '[]' };
                        }
                        return { start: start, type: Token.TOK_LBRACKET, value: '[' };
                    };
                    StreamLexer.prototype.consumeOperator = function (stream) {
                        var start = this._current;
                        var startingChar = stream[start];
                        this._current += 1;
                        if (startingChar === '!') {
                            if (stream[this._current] === '=') {
                                this._current += 1;
                                return { start: start, type: Token.TOK_NE, value: '!=' };
                            }
                            return { start: start, type: Token.TOK_NOT, value: '!' };
                        }
                        if (startingChar === '<') {
                            if (stream[this._current] === '=') {
                                this._current += 1;
                                return { start: start, type: Token.TOK_LTE, value: '<=' };
                            }
                            return { start: start, type: Token.TOK_LT, value: '<' };
                        }
                        if (startingChar === '>') {
                            if (stream[this._current] === '=') {
                                this._current += 1;
                                return { start: start, type: Token.TOK_GTE, value: '>=' };
                            }
                            return { start: start, type: Token.TOK_GT, value: '>' };
                        }
                        if (startingChar === '=' && stream[this._current] === '=') {
                            this._current += 1;
                            return { start: start, type: Token.TOK_EQ, value: '==' };
                        }
                    };
                    StreamLexer.prototype.consumeLiteral = function (stream) {
                        this._current += 1;
                        var start = this._current;
                        var maxLength = stream.length;
                        while (stream[this._current] !== '`' && this._current < maxLength) {
                            var current = this._current;
                            if (stream[current] === '\\' && (stream[current + 1] === '\\' || stream[current + 1] === '`')) {
                                current += 2;
                            }
                            else {
                                current += 1;
                            }
                            this._current = current;
                        }
                        var literalString = stream.slice(start, this._current).trimLeft();
                        literalString = literalString.replace('\\`', '`');
                        var literal = this.looksLikeJSON(literalString)
                            ? JSON.parse(literalString)
                            : JSON.parse("\"" + literalString + "\"");
                        this._current += 1;
                        return literal;
                    };
                    StreamLexer.prototype.looksLikeJSON = function (literalString) {
                        var startingChars = '[{"';
                        var jsonLiterals = ['true', 'false', 'null'];
                        var numberLooking = '-0123456789';
                        if (literalString === '') {
                            return false;
                        }
                        if (startingChars.includes(literalString[0])) {
                            return true;
                        }
                        if (jsonLiterals.includes(literalString)) {
                            return true;
                        }
                        if (numberLooking.includes(literalString[0])) {
                            try {
                                JSON.parse(literalString);
                                return true;
                            }
                            catch (ex) {
                                return false;
                            }
                        }
                        return false;
                    };
                    return StreamLexer;
                }());
                var Lexer = new StreamLexer();
                var bindingPower = (_f = {},
                    _f[Token.TOK_EOF] = 0,
                    _f[Token.TOK_UNQUOTEDIDENTIFIER] = 0,
                    _f[Token.TOK_QUOTEDIDENTIFIER] = 0,
                    _f[Token.TOK_RBRACKET] = 0,
                    _f[Token.TOK_RPAREN] = 0,
                    _f[Token.TOK_COMMA] = 0,
                    _f[Token.TOK_RBRACE] = 0,
                    _f[Token.TOK_NUMBER] = 0,
                    _f[Token.TOK_CURRENT] = 0,
                    _f[Token.TOK_EXPREF] = 0,
                    _f[Token.TOK_ROOT] = 0,
                    _f[Token.TOK_PIPE] = 1,
                    _f[Token.TOK_OR] = 2,
                    _f[Token.TOK_AND] = 3,
                    _f[Token.TOK_EQ] = 5,
                    _f[Token.TOK_GT] = 5,
                    _f[Token.TOK_LT] = 5,
                    _f[Token.TOK_GTE] = 5,
                    _f[Token.TOK_LTE] = 5,
                    _f[Token.TOK_NE] = 5,
                    _f[Token.TOK_FLATTEN] = 9,
                    _f[Token.TOK_STAR] = 20,
                    _f[Token.TOK_FILTER] = 21,
                    _f[Token.TOK_DOT] = 40,
                    _f[Token.TOK_NOT] = 45,
                    _f[Token.TOK_LBRACE] = 50,
                    _f[Token.TOK_LBRACKET] = 55,
                    _f[Token.TOK_LPAREN] = 60,
                    _f);
                var TokenParser = /** @class */ (function () {
                    function TokenParser() {
                        this.index = 0;
                        this.tokens = [];
                    }
                    TokenParser.prototype.parse = function (expression) {
                        this.loadTokens(expression);
                        this.index = 0;
                        var ast = this.expression(0);
                        if (this.lookahead(0) !== Token.TOK_EOF) {
                            var token = this.lookaheadToken(0);
                            this.errorToken(token, "Unexpected token type: " + token.type + ", value: " + token.value);
                        }
                        return ast;
                    };
                    TokenParser.prototype.loadTokens = function (expression) {
                        this.tokens = __spreadArray(__spreadArray([], Lexer.tokenize(expression)), [{ type: Token.TOK_EOF, value: '', start: expression.length }]);
                    };
                    TokenParser.prototype.expression = function (rbp) {
                        var leftToken = this.lookaheadToken(0);
                        this.advance();
                        var left = this.nud(leftToken);
                        var currentTokenType = this.lookahead(0);
                        while (rbp < bindingPower[currentTokenType]) {
                            this.advance();
                            left = this.led(currentTokenType, left);
                            currentTokenType = this.lookahead(0);
                        }
                        return left;
                    };
                    TokenParser.prototype.lookahead = function (offset) {
                        return this.tokens[this.index + offset].type;
                    };
                    TokenParser.prototype.lookaheadToken = function (offset) {
                        return this.tokens[this.index + offset];
                    };
                    TokenParser.prototype.advance = function () {
                        this.index += 1;
                    };
                    TokenParser.prototype.nud = function (token) {
                        var left;
                        var right;
                        var expression;
                        switch (token.type) {
                            case Token.TOK_LITERAL:
                                return { type: 'Literal', value: token.value };
                            case Token.TOK_UNQUOTEDIDENTIFIER:
                                return { type: 'Field', name: token.value };
                            case Token.TOK_QUOTEDIDENTIFIER:
                                var node = { type: 'Field', name: token.value };
                                if (this.lookahead(0) === Token.TOK_LPAREN) {
                                    throw new Error('Quoted identifier not allowed for function names.');
                                }
                                else {
                                    return node;
                                }
                            case Token.TOK_NOT:
                                right = this.expression(bindingPower.Not);
                                return { type: 'NotExpression', children: [right] };
                            case Token.TOK_STAR:
                                left = { type: 'Identity' };
                                right =
                                    (this.lookahead(0) === Token.TOK_RBRACKET && { type: 'Identity' }) ||
                                        this.parseProjectionRHS(bindingPower.Star);
                                return { type: 'ValueProjection', children: [left, right] };
                            case Token.TOK_FILTER:
                                return this.led(token.type, { type: 'Identity' });
                            case Token.TOK_LBRACE:
                                return this.parseMultiselectHash();
                            case Token.TOK_FLATTEN:
                                left = { type: Token.TOK_FLATTEN, children: [{ type: 'Identity' }] };
                                right = this.parseProjectionRHS(bindingPower.Flatten);
                                return { type: 'Projection', children: [left, right] };
                            case Token.TOK_LBRACKET:
                                if (this.lookahead(0) === Token.TOK_NUMBER || this.lookahead(0) === Token.TOK_COLON) {
                                    right = this.parseIndexExpression();
                                    return this.projectIfSlice({ type: 'Identity' }, right);
                                }
                                if (this.lookahead(0) === Token.TOK_STAR && this.lookahead(1) === Token.TOK_RBRACKET) {
                                    this.advance();
                                    this.advance();
                                    right = this.parseProjectionRHS(bindingPower.Star);
                                    return {
                                        children: [{ type: 'Identity' }, right],
                                        type: 'Projection',
                                    };
                                }
                                return this.parseMultiselectList();
                            case Token.TOK_CURRENT:
                                return { type: Token.TOK_CURRENT };
                            case Token.TOK_ROOT:
                                return { type: Token.TOK_ROOT };
                            case Token.TOK_EXPREF:
                                expression = this.expression(bindingPower.Expref);
                                return { type: 'ExpressionReference', children: [expression] };
                            case Token.TOK_LPAREN:
                                var args = [];
                                while (this.lookahead(0) !== Token.TOK_RPAREN) {
                                    if (this.lookahead(0) === Token.TOK_CURRENT) {
                                        expression = { type: Token.TOK_CURRENT };
                                        this.advance();
                                    }
                                    else {
                                        expression = this.expression(0);
                                    }
                                    args.push(expression);
                                }
                                this.match(Token.TOK_RPAREN);
                                return args[0];
                            default:
                                this.errorToken(token);
                        }
                    };
                    TokenParser.prototype.led = function (tokenName, left) {
                        var right;
                        switch (tokenName) {
                            case Token.TOK_DOT:
                                var rbp = bindingPower.Dot;
                                if (this.lookahead(0) !== Token.TOK_STAR) {
                                    right = this.parseDotRHS(rbp);
                                    return { type: 'Subexpression', children: [left, right] };
                                }
                                this.advance();
                                right = this.parseProjectionRHS(rbp);
                                return { type: 'ValueProjection', children: [left, right] };
                            case Token.TOK_PIPE:
                                right = this.expression(bindingPower.Pipe);
                                return { type: Token.TOK_PIPE, children: [left, right] };
                            case Token.TOK_OR:
                                right = this.expression(bindingPower.Or);
                                return { type: 'OrExpression', children: [left, right] };
                            case Token.TOK_AND:
                                right = this.expression(bindingPower.And);
                                return { type: 'AndExpression', children: [left, right] };
                            case Token.TOK_LPAREN:
                                var name_1 = left.name;
                                var args = [];
                                var expression = void 0;
                                while (this.lookahead(0) !== Token.TOK_RPAREN) {
                                    if (this.lookahead(0) === Token.TOK_CURRENT) {
                                        expression = { type: Token.TOK_CURRENT };
                                        this.advance();
                                    }
                                    else {
                                        expression = this.expression(0);
                                    }
                                    if (this.lookahead(0) === Token.TOK_COMMA) {
                                        this.match(Token.TOK_COMMA);
                                    }
                                    args.push(expression);
                                }
                                this.match(Token.TOK_RPAREN);
                                var node = { name: name_1, type: 'Function', children: args };
                                return node;
                            case Token.TOK_FILTER:
                                var condition = this.expression(0);
                                this.match(Token.TOK_RBRACKET);
                                right =
                                    (this.lookahead(0) === Token.TOK_FLATTEN && { type: 'Identity' }) ||
                                        this.parseProjectionRHS(bindingPower.Filter);
                                return { type: 'FilterProjection', children: [left, right, condition] };
                            case Token.TOK_FLATTEN:
                                var leftNode = { type: Token.TOK_FLATTEN, children: [left] };
                                var rightNode = this.parseProjectionRHS(bindingPower.Flatten);
                                return { type: 'Projection', children: [leftNode, rightNode] };
                            case Token.TOK_EQ:
                            case Token.TOK_NE:
                            case Token.TOK_GT:
                            case Token.TOK_GTE:
                            case Token.TOK_LT:
                            case Token.TOK_LTE:
                                return this.parseComparator(left, tokenName);
                            case Token.TOK_LBRACKET:
                                var token = this.lookaheadToken(0);
                                if (token.type === Token.TOK_NUMBER || token.type === Token.TOK_COLON) {
                                    right = this.parseIndexExpression();
                                    return this.projectIfSlice(left, right);
                                }
                                this.match(Token.TOK_STAR);
                                this.match(Token.TOK_RBRACKET);
                                right = this.parseProjectionRHS(bindingPower.Star);
                                return { type: 'Projection', children: [left, right] };
                            default:
                                return this.errorToken(this.lookaheadToken(0));
                        }
                    };
                    TokenParser.prototype.match = function (tokenType) {
                        if (this.lookahead(0) === tokenType) {
                            this.advance();
                            return;
                        }
                        else {
                            var token = this.lookaheadToken(0);
                            this.errorToken(token, "Expected " + tokenType + ", got: " + token.type);
                        }
                    };
                    TokenParser.prototype.errorToken = function (token, message) {
                        if (message === void 0) { message = ''; }
                        var error = new Error(message || "Invalid token (" + token.type + "): \"" + token.value + "\"");
                        error.name = 'ParserError';
                        throw error;
                    };
                    TokenParser.prototype.parseIndexExpression = function () {
                        if (this.lookahead(0) === Token.TOK_COLON || this.lookahead(1) === Token.TOK_COLON) {
                            return this.parseSliceExpression();
                        }
                        var node = {
                            type: 'Index',
                            value: this.lookaheadToken(0).value,
                        };
                        this.advance();
                        this.match(Token.TOK_RBRACKET);
                        return node;
                    };
                    TokenParser.prototype.projectIfSlice = function (left, right) {
                        var indexExpr = { type: 'IndexExpression', children: [left, right] };
                        if (right.type === 'Slice') {
                            return {
                                children: [indexExpr, this.parseProjectionRHS(bindingPower.Star)],
                                type: 'Projection',
                            };
                        }
                        return indexExpr;
                    };
                    TokenParser.prototype.parseSliceExpression = function () {
                        var parts = [null, null, null];
                        var index = 0;
                        var currentTokenType = this.lookahead(0);
                        while (currentTokenType !== Token.TOK_RBRACKET && index < 3) {
                            if (currentTokenType === Token.TOK_COLON) {
                                index += 1;
                                this.advance();
                            }
                            else if (currentTokenType === Token.TOK_NUMBER) {
                                parts[index] = this.lookaheadToken(0).value;
                                this.advance();
                            }
                            else {
                                var token = this.lookaheadToken(0);
                                this.errorToken(token, "Syntax error, unexpected token: " + token.value + "(" + token.type + ")");
                            }
                            currentTokenType = this.lookahead(0);
                        }
                        this.match(Token.TOK_RBRACKET);
                        return {
                            children: parts,
                            type: 'Slice',
                        };
                    };
                    TokenParser.prototype.parseComparator = function (left, comparator) {
                        var right = this.expression(bindingPower[comparator]);
                        return { type: 'Comparator', name: comparator, children: [left, right] };
                    };
                    TokenParser.prototype.parseDotRHS = function (rbp) {
                        var lookahead = this.lookahead(0);
                        var exprTokens = [Token.TOK_UNQUOTEDIDENTIFIER, Token.TOK_QUOTEDIDENTIFIER, Token.TOK_STAR];
                        if (exprTokens.includes(lookahead)) {
                            return this.expression(rbp);
                        }
                        if (lookahead === Token.TOK_LBRACKET) {
                            this.match(Token.TOK_LBRACKET);
                            return this.parseMultiselectList();
                        }
                        if (lookahead === Token.TOK_LBRACE) {
                            this.match(Token.TOK_LBRACE);
                            return this.parseMultiselectHash();
                        }
                        var token = this.lookaheadToken(0);
                        this.errorToken(token, "Syntax error, unexpected token: " + token.value + "(" + token.type + ")");
                    };
                    TokenParser.prototype.parseProjectionRHS = function (rbp) {
                        if (bindingPower[this.lookahead(0)] < 10) {
                            return { type: 'Identity' };
                        }
                        if (this.lookahead(0) === Token.TOK_LBRACKET) {
                            return this.expression(rbp);
                        }
                        if (this.lookahead(0) === Token.TOK_FILTER) {
                            return this.expression(rbp);
                        }
                        if (this.lookahead(0) === Token.TOK_DOT) {
                            this.match(Token.TOK_DOT);
                            return this.parseDotRHS(rbp);
                        }
                        var token = this.lookaheadToken(0);
                        this.errorToken(token, "Syntax error, unexpected token: " + token.value + "(" + token.type + ")");
                    };
                    TokenParser.prototype.parseMultiselectList = function () {
                        var expressions = [];
                        while (this.lookahead(0) !== Token.TOK_RBRACKET) {
                            var expression = this.expression(0);
                            expressions.push(expression);
                            if (this.lookahead(0) === Token.TOK_COMMA) {
                                this.match(Token.TOK_COMMA);
                                if (this.lookahead(0) === Token.TOK_RBRACKET) {
                                    throw new Error('Unexpected token Rbracket');
                                }
                            }
                        }
                        this.match(Token.TOK_RBRACKET);
                        return { type: 'MultiSelectList', children: expressions };
                    };
                    TokenParser.prototype.parseMultiselectHash = function () {
                        var pairs = [];
                        var identifierTypes = [Token.TOK_UNQUOTEDIDENTIFIER, Token.TOK_QUOTEDIDENTIFIER];
                        var keyToken;
                        var keyName;
                        var value;
                        // tslint:disable-next-line: prettier
                        for (;;) {
                            keyToken = this.lookaheadToken(0);
                            if (!identifierTypes.includes(keyToken.type)) {
                                throw new Error("Expecting an identifier token, got: " + keyToken.type);
                            }
                            keyName = keyToken.value;
                            this.advance();
                            this.match(Token.TOK_COLON);
                            value = this.expression(0);
                            pairs.push({ value: value, type: 'KeyValuePair', name: keyName });
                            if (this.lookahead(0) === Token.TOK_COMMA) {
                                this.match(Token.TOK_COMMA);
                            }
                            else if (this.lookahead(0) === Token.TOK_RBRACE) {
                                this.match(Token.TOK_RBRACE);
                                break;
                            }
                        }
                        return { type: 'MultiSelectHash', children: pairs };
                    };
                    return TokenParser;
                }());
                var Parser = new TokenParser();
                var InputArgument;
                (function (InputArgument) {
                    InputArgument[InputArgument["TYPE_NUMBER"] = 0] = "TYPE_NUMBER";
                    InputArgument[InputArgument["TYPE_ANY"] = 1] = "TYPE_ANY";
                    InputArgument[InputArgument["TYPE_STRING"] = 2] = "TYPE_STRING";
                    InputArgument[InputArgument["TYPE_ARRAY"] = 3] = "TYPE_ARRAY";
                    InputArgument[InputArgument["TYPE_OBJECT"] = 4] = "TYPE_OBJECT";
                    InputArgument[InputArgument["TYPE_BOOLEAN"] = 5] = "TYPE_BOOLEAN";
                    InputArgument[InputArgument["TYPE_EXPREF"] = 6] = "TYPE_EXPREF";
                    InputArgument[InputArgument["TYPE_NULL"] = 7] = "TYPE_NULL";
                    InputArgument[InputArgument["TYPE_ARRAY_NUMBER"] = 8] = "TYPE_ARRAY_NUMBER";
                    InputArgument[InputArgument["TYPE_ARRAY_STRING"] = 9] = "TYPE_ARRAY_STRING";
                })(InputArgument || (InputArgument = {}));
                var Runtime = /** @class */ (function () {
                    function Runtime(interpreter) {
                        var _e;
                        var _this_1 = this;
                        this.TYPE_NAME_TABLE = (_e = {},
                            _e[InputArgument.TYPE_NUMBER] = 'number',
                            _e[InputArgument.TYPE_ANY] = 'any',
                            _e[InputArgument.TYPE_STRING] = 'string',
                            _e[InputArgument.TYPE_ARRAY] = 'array',
                            _e[InputArgument.TYPE_OBJECT] = 'object',
                            _e[InputArgument.TYPE_BOOLEAN] = 'boolean',
                            _e[InputArgument.TYPE_EXPREF] = 'expression',
                            _e[InputArgument.TYPE_NULL] = 'null',
                            _e[InputArgument.TYPE_ARRAY_NUMBER] = 'Array<number>',
                            _e[InputArgument.TYPE_ARRAY_STRING] = 'Array<string>',
                            _e);
                        this.functionAbs = function (_e) {
                            var inputValue = _e[0];
                            return Math.abs(inputValue);
                        };
                        this.functionAvg = function (_e) {
                            var inputArray = _e[0];
                            var sum = 0;
                            for (var i = 0; i < inputArray.length; i += 1) {
                                sum += inputArray[i];
                            }
                            return sum / inputArray.length;
                        };
                        this.functionCeil = function (_e) {
                            var inputValue = _e[0];
                            return Math.ceil(inputValue);
                        };
                        this.functionContains = function (resolvedArgs) {
                            var searchable = resolvedArgs[0], searchValue = resolvedArgs[1];
                            return searchable.includes(searchValue);
                        };
                        this.functionEndsWith = function (resolvedArgs) {
                            var searchStr = resolvedArgs[0], suffix = resolvedArgs[1];
                            return searchStr.includes(suffix, searchStr.length - suffix.length);
                        };
                        this.functionFloor = function (_e) {
                            var inputValue = _e[0];
                            return Math.floor(inputValue);
                        };
                        this.functionJoin = function (resolvedArgs) {
                            var joinChar = resolvedArgs[0], listJoin = resolvedArgs[1];
                            return listJoin.join(joinChar);
                        };
                        this.functionKeys = function (_e) {
                            var inputObject = _e[0];
                            return Object.keys(inputObject);
                        };
                        this.functionLength = function (_e) {
                            var inputValue = _e[0];
                            if (!isObject(inputValue)) {
                                return inputValue.length;
                            }
                            return Object.keys(inputValue).length;
                        };
                        this.functionMap = function (resolvedArgs) {
                            if (!_this_1._interpreter) {
                                return [];
                            }
                            var mapped = [];
                            var interpreter = _this_1._interpreter;
                            var exprefNode = resolvedArgs[0];
                            var elements = resolvedArgs[1];
                            for (var i = 0; i < elements.length; i += 1) {
                                mapped.push(interpreter.visit(exprefNode, elements[i]));
                            }
                            return mapped;
                        };
                        this.functionMax = function (_e) {
                            var inputValue = _e[0];
                            if (!inputValue.length) {
                                return null;
                            }
                            var typeName = _this_1.getTypeName(inputValue[0]);
                            if (typeName === InputArgument.TYPE_NUMBER) {
                                return Math.max.apply(Math, inputValue);
                            }
                            var elements = inputValue;
                            var maxElement = elements[0];
                            for (var i = 1; i < elements.length; i += 1) {
                                if (maxElement.localeCompare(elements[i]) < 0) {
                                    maxElement = elements[i];
                                }
                            }
                            return maxElement;
                        };
                        this.functionMaxBy = function (resolvedArgs) {
                            var exprefNode = resolvedArgs[1];
                            var resolvedArray = resolvedArgs[0];
                            var keyFunction = _this_1.createKeyFunction(exprefNode, [InputArgument.TYPE_NUMBER, InputArgument.TYPE_STRING]);
                            var maxNumber = -Infinity;
                            var maxRecord;
                            var current;
                            for (var i = 0; i < resolvedArray.length; i += 1) {
                                current = keyFunction && keyFunction(resolvedArray[i]);
                                if (current !== undefined && current > maxNumber) {
                                    maxNumber = current;
                                    maxRecord = resolvedArray[i];
                                }
                            }
                            return maxRecord;
                        };
                        this.functionMerge = function (resolvedArgs) {
                            var merged = {};
                            for (var i = 0; i < resolvedArgs.length; i += 1) {
                                var current = resolvedArgs[i];
                                merged = Object.assign(merged, current);
                                // for (const key in current) {
                                //   merged[key] = current[key];
                                // }
                            }
                            return merged;
                        };
                        this.functionMin = function (_e) {
                            var inputValue = _e[0];
                            if (!inputValue.length) {
                                return null;
                            }
                            var typeName = _this_1.getTypeName(inputValue[0]);
                            if (typeName === InputArgument.TYPE_NUMBER) {
                                return Math.min.apply(Math, inputValue);
                            }
                            var elements = inputValue;
                            var minElement = elements[0];
                            for (var i = 1; i < elements.length; i += 1) {
                                if (elements[i].localeCompare(minElement) < 0) {
                                    minElement = elements[i];
                                }
                            }
                            return minElement;
                        };
                        this.functionMinBy = function (resolvedArgs) {
                            var exprefNode = resolvedArgs[1];
                            var resolvedArray = resolvedArgs[0];
                            var keyFunction = _this_1.createKeyFunction(exprefNode, [InputArgument.TYPE_NUMBER, InputArgument.TYPE_STRING]);
                            var minNumber = Infinity;
                            var minRecord;
                            var current;
                            for (var i = 0; i < resolvedArray.length; i += 1) {
                                current = keyFunction && keyFunction(resolvedArray[i]);
                                if (current !== undefined && current < minNumber) {
                                    minNumber = current;
                                    minRecord = resolvedArray[i];
                                }
                            }
                            return minRecord;
                        };
                        this.functionNotNull = function (resolvedArgs) {
                            for (var i = 0; i < resolvedArgs.length; i += 1) {
                                if (_this_1.getTypeName(resolvedArgs[i]) !== InputArgument.TYPE_NULL) {
                                    return resolvedArgs[i];
                                }
                            }
                            return null;
                        };
                        this.functionReverse = function (_e) {
                            var inputValue = _e[0];
                            var typeName = _this_1.getTypeName(inputValue);
                            if (typeName === InputArgument.TYPE_STRING) {
                                var originalStr = inputValue;
                                var reversedStr = '';
                                for (var i = originalStr.length - 1; i >= 0; i -= 1) {
                                    reversedStr += originalStr[i];
                                }
                                return reversedStr;
                            }
                            var reversedArray = inputValue.slice(0);
                            reversedArray.reverse();
                            return reversedArray;
                        };
                        this.functionSort = function (_e) {
                            var inputValue = _e[0];
                            return __spreadArray([], inputValue).sort();
                        };
                        this.functionSortBy = function (resolvedArgs) {
                            if (!_this_1._interpreter) {
                                return [];
                            }
                            var sortedArray = resolvedArgs[0].slice(0);
                            if (sortedArray.length === 0) {
                                return sortedArray;
                            }
                            var interpreter = _this_1._interpreter;
                            var exprefNode = resolvedArgs[1];
                            var requiredType = _this_1.getTypeName(interpreter.visit(exprefNode, sortedArray[0]));
                            if (requiredType !== undefined && ![InputArgument.TYPE_NUMBER, InputArgument.TYPE_STRING].includes(requiredType)) {
                                throw new Error("TypeError: unexpected type (" + _this_1.TYPE_NAME_TABLE[requiredType] + ")");
                            }
                            var decorated = [];
                            for (var i = 0; i < sortedArray.length; i += 1) {
                                decorated.push([i, sortedArray[i]]);
                            }
                            decorated.sort(function (a, b) {
                                var exprA = interpreter.visit(exprefNode, a[1]);
                                var exprB = interpreter.visit(exprefNode, b[1]);
                                if (_this_1.getTypeName(exprA) !== requiredType) {
                                    throw new Error("TypeError: expected (" + _this_1.TYPE_NAME_TABLE[requiredType] + "), received " + _this_1.TYPE_NAME_TABLE[_this_1.getTypeName(exprA)]);
                                }
                                else if (_this_1.getTypeName(exprB) !== requiredType) {
                                    throw new Error("TypeError: expected (" + _this_1.TYPE_NAME_TABLE[requiredType] + "), received " + _this_1.TYPE_NAME_TABLE[_this_1.getTypeName(exprB)]);
                                }
                                if (exprA > exprB) {
                                    return 1;
                                }
                                return exprA < exprB ? -1 : a[0] - b[0];
                            });
                            for (var j = 0; j < decorated.length; j += 1) {
                                sortedArray[j] = decorated[j][1];
                            }
                            return sortedArray;
                        };
                        this.functionStartsWith = function (_e) {
                            var searchable = _e[0], searchStr = _e[1];
                            return searchable.startsWith(searchStr);
                        };
                        this.functionSum = function (_e) {
                            var inputValue = _e[0];
                            return inputValue.reduce(function (x, y) { return x + y; }, 0);
                        };
                        this.functionToArray = function (_e) {
                            var inputValue = _e[0];
                            if (_this_1.getTypeName(inputValue) === InputArgument.TYPE_ARRAY) {
                                return inputValue;
                            }
                            return [inputValue];
                        };
                        this.functionToNumber = function (_e) {
                            var inputValue = _e[0];
                            var typeName = _this_1.getTypeName(inputValue);
                            var convertedValue;
                            if (typeName === InputArgument.TYPE_NUMBER) {
                                return inputValue;
                            }
                            if (typeName === InputArgument.TYPE_STRING) {
                                convertedValue = +inputValue;
                                if (!isNaN(convertedValue)) {
                                    return convertedValue;
                                }
                            }
                            return null;
                        };
                        this.functionToString = function (_e) {
                            var inputValue = _e[0];
                            if (_this_1.getTypeName(inputValue) === InputArgument.TYPE_STRING) {
                                return inputValue;
                            }
                            return JSON.stringify(inputValue);
                        };
                        this.functionType = function (_e) {
                            var inputValue = _e[0];
                            switch (_this_1.getTypeName(inputValue)) {
                                case InputArgument.TYPE_NUMBER:
                                    return 'number';
                                case InputArgument.TYPE_STRING:
                                    return 'string';
                                case InputArgument.TYPE_ARRAY:
                                    return 'array';
                                case InputArgument.TYPE_OBJECT:
                                    return 'object';
                                case InputArgument.TYPE_BOOLEAN:
                                    return 'boolean';
                                case InputArgument.TYPE_EXPREF:
                                    return 'expref';
                                case InputArgument.TYPE_NULL:
                                    return 'null';
                                default:
                                    return;
                            }
                        };
                        this.functionValues = function (_e) {
                            var inputObject = _e[0];
                            return Object.values(inputObject);
                        };
                        this.functionTable = {
                            abs: {
                                _func: this.functionAbs,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_NUMBER],
                                    },
                                ],
                            },
                            avg: {
                                _func: this.functionAvg,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY_NUMBER],
                                    },
                                ],
                            },
                            ceil: {
                                _func: this.functionCeil,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_NUMBER],
                                    },
                                ],
                            },
                            contains: {
                                _func: this.functionContains,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING, InputArgument.TYPE_ARRAY],
                                    },
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                    },
                                ],
                            },
                            ends_with: {
                                _func: this.functionEndsWith,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING],
                                    },
                                    {
                                        types: [InputArgument.TYPE_STRING],
                                    },
                                ],
                            },
                            floor: {
                                _func: this.functionFloor,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_NUMBER],
                                    },
                                ],
                            },
                            join: {
                                _func: this.functionJoin,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING],
                                    },
                                    {
                                        types: [InputArgument.TYPE_ARRAY_STRING],
                                    },
                                ],
                            },
                            keys: {
                                _func: this.functionKeys,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_OBJECT],
                                    },
                                ],
                            },
                            length: {
                                _func: this.functionLength,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING, InputArgument.TYPE_ARRAY, InputArgument.TYPE_OBJECT],
                                    },
                                ],
                            },
                            map: {
                                _func: this.functionMap,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_EXPREF],
                                    },
                                    {
                                        types: [InputArgument.TYPE_ARRAY],
                                    },
                                ],
                            },
                            max: {
                                _func: this.functionMax,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY_NUMBER, InputArgument.TYPE_ARRAY_STRING],
                                    },
                                ],
                            },
                            max_by: {
                                _func: this.functionMaxBy,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY],
                                    },
                                    {
                                        types: [InputArgument.TYPE_EXPREF],
                                    },
                                ],
                            },
                            merge: {
                                _func: this.functionMerge,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_OBJECT],
                                        variadic: true,
                                    },
                                ],
                            },
                            min: {
                                _func: this.functionMin,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY_NUMBER, InputArgument.TYPE_ARRAY_STRING],
                                    },
                                ],
                            },
                            min_by: {
                                _func: this.functionMinBy,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY],
                                    },
                                    {
                                        types: [InputArgument.TYPE_EXPREF],
                                    },
                                ],
                            },
                            not_null: {
                                _func: this.functionNotNull,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                        variadic: true,
                                    },
                                ],
                            },
                            reverse: {
                                _func: this.functionReverse,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING, InputArgument.TYPE_ARRAY],
                                    },
                                ],
                            },
                            sort: {
                                _func: this.functionSort,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY_STRING, InputArgument.TYPE_ARRAY_NUMBER],
                                    },
                                ],
                            },
                            sort_by: {
                                _func: this.functionSortBy,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY],
                                    },
                                    {
                                        types: [InputArgument.TYPE_EXPREF],
                                    },
                                ],
                            },
                            starts_with: {
                                _func: this.functionStartsWith,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_STRING],
                                    },
                                    {
                                        types: [InputArgument.TYPE_STRING],
                                    },
                                ],
                            },
                            sum: {
                                _func: this.functionSum,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ARRAY_NUMBER],
                                    },
                                ],
                            },
                            to_array: {
                                _func: this.functionToArray,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                    },
                                ],
                            },
                            to_number: {
                                _func: this.functionToNumber,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                    },
                                ],
                            },
                            to_string: {
                                _func: this.functionToString,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                    },
                                ],
                            },
                            type: {
                                _func: this.functionType,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_ANY],
                                    },
                                ],
                            },
                            values: {
                                _func: this.functionValues,
                                _signature: [
                                    {
                                        types: [InputArgument.TYPE_OBJECT],
                                    },
                                ],
                            },
                        };
                        this._interpreter = interpreter;
                    }
                    Runtime.prototype.registerFunction = function (name, customFunction, signature) {
                        if (name in this.functionTable) {
                            throw new Error("Function already defined: " + name + "()");
                        }
                        this.functionTable[name] = {
                            _func: customFunction.bind(this),
                            _signature: signature,
                        };
                    };
                    Runtime.prototype.callFunction = function (name, resolvedArgs) {
                        var functionEntry = this.functionTable[name];
                        if (functionEntry === undefined) {
                            throw new Error("Unknown function: " + name + "()");
                        }
                        this.validateArgs(name, resolvedArgs, functionEntry._signature);
                        return functionEntry._func.call(this, resolvedArgs);
                    };
                    Runtime.prototype.validateInputSignatures = function (name, signature) {
                        for (var i = 0; i < signature.length; i += 1) {
                            if ('variadic' in signature[i] && i !== signature.length - 1) {
                                throw new Error("ArgumentError: " + name + "() 'variadic' argument " + (i + 1) + " must occur last");
                            }
                        }
                    };
                    Runtime.prototype.validateArgs = function (name, args, signature) {
                        var _this_1 = this;
                        var _a, _b;
                        var pluralized;
                        this.validateInputSignatures(name, signature);
                        var numberOfRequiredArgs = signature.filter(function (argSignature) { var _a; return (_a = !argSignature.optional) !== null && _a !== void 0 ? _a : false; }).length;
                        var lastArgIsVariadic = (_b = (_a = signature[signature.length - 1]) === null || _a === void 0 ? void 0 : _a.variadic) !== null && _b !== void 0 ? _b : false;
                        var tooFewArgs = args.length < numberOfRequiredArgs;
                        var tooManyArgs = args.length > signature.length;
                        var tooFewModifier = tooFewArgs && ((!lastArgIsVariadic && numberOfRequiredArgs > 1) || lastArgIsVariadic) ? 'at least ' : '';
                        if ((lastArgIsVariadic && tooFewArgs) || (!lastArgIsVariadic && (tooFewArgs || tooManyArgs))) {
                            pluralized = signature.length > 1;
                            throw new Error("ArgumentError: " + name + "() takes " + tooFewModifier + numberOfRequiredArgs + " argument" + ((pluralized && 's') || '') + " but received " + args.length);
                        }
                        var currentSpec;
                        var actualType;
                        var typeMatched;
                        for (var i = 0; i < signature.length; i += 1) {
                            typeMatched = false;
                            currentSpec = signature[i].types;
                            actualType = this.getTypeName(args[i]);
                            var j = void 0;
                            for (j = 0; j < currentSpec.length; j += 1) {
                                if (actualType !== undefined && this.typeMatches(actualType, currentSpec[j], args[i])) {
                                    typeMatched = true;
                                    break;
                                }
                            }
                            if (!typeMatched && actualType !== undefined) {
                                var expected = currentSpec
                                    .map(function (typeIdentifier) {
                                    return _this_1.TYPE_NAME_TABLE[typeIdentifier];
                                })
                                    .join(' | ');
                                throw new Error("TypeError: " + name + "() expected argument " + (i + 1) + " to be type (" + expected + ") but received type " + this.TYPE_NAME_TABLE[actualType] + " instead.");
                            }
                        }
                    };
                    Runtime.prototype.typeMatches = function (actual, expected, argValue) {
                        if (expected === InputArgument.TYPE_ANY) {
                            return true;
                        }
                        if (expected === InputArgument.TYPE_ARRAY_STRING ||
                            expected === InputArgument.TYPE_ARRAY_NUMBER ||
                            expected === InputArgument.TYPE_ARRAY) {
                            if (expected === InputArgument.TYPE_ARRAY) {
                                return actual === InputArgument.TYPE_ARRAY;
                            }
                            if (actual === InputArgument.TYPE_ARRAY) {
                                var subtype = void 0;
                                if (expected === InputArgument.TYPE_ARRAY_NUMBER) {
                                    subtype = InputArgument.TYPE_NUMBER;
                                }
                                else if (expected === InputArgument.TYPE_ARRAY_STRING) {
                                    subtype = InputArgument.TYPE_STRING;
                                }
                                for (var i = 0; i < argValue.length; i += 1) {
                                    var typeName = this.getTypeName(argValue[i]);
                                    if (typeName !== undefined && subtype !== undefined && !this.typeMatches(typeName, subtype, argValue[i])) {
                                        return false;
                                    }
                                }
                                return true;
                            }
                        }
                        else {
                            return actual === expected;
                        }
                        return false;
                    };
                    Runtime.prototype.getTypeName = function (obj) {
                        switch (Object.prototype.toString.call(obj)) {
                            case '[object String]':
                                return InputArgument.TYPE_STRING;
                            case '[object Number]':
                                return InputArgument.TYPE_NUMBER;
                            case '[object Array]':
                                return InputArgument.TYPE_ARRAY;
                            case '[object Boolean]':
                                return InputArgument.TYPE_BOOLEAN;
                            case '[object Null]':
                                return InputArgument.TYPE_NULL;
                            case '[object Object]':
                                if (obj.jmespathType === Token.TOK_EXPREF) {
                                    return InputArgument.TYPE_EXPREF;
                                }
                                return InputArgument.TYPE_OBJECT;
                            default:
                                return;
                        }
                    };
                    Runtime.prototype.createKeyFunction = function (exprefNode, allowedTypes) {
                        var _this_1 = this;
                        if (!this._interpreter) {
                            return;
                        }
                        var interpreter = this._interpreter;
                        var keyFunc = function (x) {
                            var current = interpreter.visit(exprefNode, x);
                            if (!allowedTypes.includes(_this_1.getTypeName(current))) {
                                var msg = "TypeError: expected one of (" + allowedTypes
                                    .map(function (t) { return _this_1.TYPE_NAME_TABLE[t]; })
                                    .join(' | ') + "), received " + _this_1.TYPE_NAME_TABLE[_this_1.getTypeName(current)];
                                throw new Error(msg);
                            }
                            return current;
                        };
                        return keyFunc;
                    };
                    return Runtime;
                }());
                var TreeInterpreter$1 = /** @class */ (function () {
                    function TreeInterpreter$1() {
                        this._rootValue = null;
                        this.runtime = new Runtime(this);
                    }
                    TreeInterpreter$1.prototype.search = function (node, value) {
                        this._rootValue = value;
                        return this.visit(node, value);
                    };
                    TreeInterpreter$1.prototype.visit = function (node, value) {
                        var matched;
                        var current;
                        var result;
                        var first;
                        var second;
                        var field;
                        var left;
                        var right;
                        var collected;
                        var i;
                        var base;
                        switch (node.type) {
                            case 'Field':
                                if (value === null) {
                                    return null;
                                }
                                if (isObject(value)) {
                                    field = value[node.name];
                                    if (field === undefined) {
                                        return null;
                                    }
                                    return field;
                                }
                                return null;
                            case 'Subexpression':
                                result = this.visit(node.children[0], value);
                                for (i = 1; i < node.children.length; i += 1) {
                                    result = this.visit(node.children[1], result);
                                    if (result === null) {
                                        return null;
                                    }
                                }
                                return result;
                            case 'IndexExpression':
                                left = this.visit(node.children[0], value);
                                right = this.visit(node.children[1], left);
                                return right;
                            case 'Index':
                                if (!Array.isArray(value)) {
                                    return null;
                                }
                                var index = node.value;
                                if (index < 0) {
                                    index = value.length + index;
                                }
                                result = value[index];
                                if (result === undefined) {
                                    result = null;
                                }
                                return result;
                            case 'Slice':
                                if (!Array.isArray(value)) {
                                    return null;
                                }
                                var sliceParams = __spreadArray([], node.children);
                                var computed = this.computeSliceParams(value.length, sliceParams);
                                var start = computed[0], stop_1 = computed[1], step = computed[2];
                                result = [];
                                if (step > 0) {
                                    for (i = start; i < stop_1; i += step) {
                                        result.push(value[i]);
                                    }
                                }
                                else {
                                    for (i = start; i > stop_1; i += step) {
                                        result.push(value[i]);
                                    }
                                }
                                return result;
                            case 'Projection':
                                base = this.visit(node.children[0], value);
                                if (!Array.isArray(base)) {
                                    return null;
                                }
                                collected = [];
                                for (i = 0; i < base.length; i += 1) {
                                    current = this.visit(node.children[1], base[i]);
                                    if (current !== null) {
                                        collected.push(current);
                                    }
                                }
                                return collected;
                            case 'ValueProjection':
                                base = this.visit(node.children[0], value);
                                if (!isObject(base)) {
                                    return null;
                                }
                                collected = [];
                                var values = Object.values(base);
                                for (i = 0; i < values.length; i += 1) {
                                    current = this.visit(node.children[1], values[i]);
                                    if (current !== null) {
                                        collected.push(current);
                                    }
                                }
                                return collected;
                            case 'FilterProjection':
                                base = this.visit(node.children[0], value);
                                if (!Array.isArray(base)) {
                                    return null;
                                }
                                var filtered = [];
                                var finalResults = [];
                                for (i = 0; i < base.length; i += 1) {
                                    matched = this.visit(node.children[2], base[i]);
                                    if (!isFalse(matched)) {
                                        filtered.push(base[i]);
                                    }
                                }
                                for (var j = 0; j < filtered.length; j += 1) {
                                    current = this.visit(node.children[1], filtered[j]);
                                    if (current !== null) {
                                        finalResults.push(current);
                                    }
                                }
                                return finalResults;
                            case 'Comparator':
                                first = this.visit(node.children[0], value);
                                second = this.visit(node.children[1], value);
                                switch (node.name) {
                                    case Token.TOK_EQ:
                                        result = strictDeepEqual(first, second);
                                        break;
                                    case Token.TOK_NE:
                                        result = !strictDeepEqual(first, second);
                                        break;
                                    case Token.TOK_GT:
                                        result = first > second;
                                        break;
                                    case Token.TOK_GTE:
                                        result = first >= second;
                                        break;
                                    case Token.TOK_LT:
                                        result = first < second;
                                        break;
                                    case Token.TOK_LTE:
                                        result = first <= second;
                                        break;
                                    default:
                                        throw new Error("Unknown comparator: " + node.name);
                                }
                                return result;
                            case Token.TOK_FLATTEN:
                                var original = this.visit(node.children[0], value);
                                if (!Array.isArray(original)) {
                                    return null;
                                }
                                var merged = [];
                                for (i = 0; i < original.length; i += 1) {
                                    current = original[i];
                                    if (Array.isArray(current)) {
                                        merged = __spreadArray(__spreadArray([], merged), current);
                                    }
                                    else {
                                        merged.push(current);
                                    }
                                }
                                return merged;
                            case 'Identity':
                                return value;
                            case 'MultiSelectList':
                                if (value === null) {
                                    return null;
                                }
                                collected = [];
                                for (i = 0; i < node.children.length; i += 1) {
                                    collected.push(this.visit(node.children[i], value));
                                }
                                return collected;
                            case 'MultiSelectHash':
                                if (value === null) {
                                    return null;
                                }
                                collected = {};
                                var child = void 0;
                                for (i = 0; i < node.children.length; i += 1) {
                                    child = node.children[i];
                                    collected[child.name] = this.visit(child.value, value);
                                }
                                return collected;
                            case 'OrExpression':
                                matched = this.visit(node.children[0], value);
                                if (isFalse(matched)) {
                                    matched = this.visit(node.children[1], value);
                                }
                                return matched;
                            case 'AndExpression':
                                first = this.visit(node.children[0], value);
                                if (isFalse(first)) {
                                    return first;
                                }
                                return this.visit(node.children[1], value);
                            case 'NotExpression':
                                first = this.visit(node.children[0], value);
                                return isFalse(first);
                            case 'Literal':
                                return node.value;
                            case Token.TOK_PIPE:
                                left = this.visit(node.children[0], value);
                                return this.visit(node.children[1], left);
                            case Token.TOK_CURRENT:
                                return value;
                            case Token.TOK_ROOT:
                                return this._rootValue;
                            case 'Function':
                                var resolvedArgs = [];
                                for (var j = 0; j < node.children.length; j += 1) {
                                    resolvedArgs.push(this.visit(node.children[j], value));
                                }
                                return this.runtime.callFunction(node.name, resolvedArgs);
                            case 'ExpressionReference':
                                var refNode = node.children[0];
                                refNode.jmespathType = Token.TOK_EXPREF;
                                return refNode;
                            default:
                                throw new Error("Unknown node type: " + node.type);
                        }
                    };
                    TreeInterpreter$1.prototype.computeSliceParams = function (arrayLength, sliceParams) {
                        var start = sliceParams[0], stop = sliceParams[1], step = sliceParams[2];
                        if (step === null) {
                            step = 1;
                        }
                        else if (step === 0) {
                            var error = new Error('Invalid slice, step cannot be 0');
                            error.name = 'RuntimeError';
                            throw error;
                        }
                        var stepValueNegative = step < 0 ? true : false;
                        start = start === null ? (stepValueNegative ? arrayLength - 1 : 0) : this.capSliceRange(arrayLength, start, step);
                        stop = stop === null ? (stepValueNegative ? -1 : arrayLength) : this.capSliceRange(arrayLength, stop, step);
                        return [start, stop, step];
                    };
                    TreeInterpreter$1.prototype.capSliceRange = function (arrayLength, actualValue, step) {
                        var nextActualValue = actualValue;
                        if (nextActualValue < 0) {
                            nextActualValue += arrayLength;
                            if (nextActualValue < 0) {
                                nextActualValue = step < 0 ? -1 : 0;
                            }
                        }
                        else if (nextActualValue >= arrayLength) {
                            nextActualValue = step < 0 ? arrayLength - 1 : arrayLength;
                        }
                        return nextActualValue;
                    };
                    return TreeInterpreter$1;
                }());
                var TreeInterpreterInstance = new TreeInterpreter$1();
                var TYPE_ANY = InputArgument.TYPE_ANY;
                var TYPE_ARRAY = InputArgument.TYPE_ARRAY;
                var TYPE_ARRAY_NUMBER = InputArgument.TYPE_ARRAY_NUMBER;
                var TYPE_ARRAY_STRING = InputArgument.TYPE_ARRAY_STRING;
                var TYPE_BOOLEAN = InputArgument.TYPE_BOOLEAN;
                var TYPE_EXPREF = InputArgument.TYPE_EXPREF;
                var TYPE_NULL = InputArgument.TYPE_NULL;
                var TYPE_NUMBER = InputArgument.TYPE_NUMBER;
                var TYPE_OBJECT = InputArgument.TYPE_OBJECT;
                var TYPE_STRING = InputArgument.TYPE_STRING;
                function compile(expression) {
                    var nodeTree = Parser.parse(expression);
                    return nodeTree;
                }
                function tokenize(expression) {
                    return Lexer.tokenize(expression);
                }
                var registerFunction = function (functionName, customFunction, signature) {
                    TreeInterpreterInstance.runtime.registerFunction(functionName, customFunction, signature);
                };
                function search(data, expression) {
                    var nodeTree = Parser.parse(expression);
                    return TreeInterpreterInstance.search(nodeTree, data);
                }
                var TreeInterpreter = TreeInterpreterInstance;
                var jmespath = {
                    compile: compile,
                    registerFunction: registerFunction,
                    search: search,
                    tokenize: tokenize,
                    TreeInterpreter: TreeInterpreter,
                    TYPE_ANY: TYPE_ANY,
                    TYPE_ARRAY_NUMBER: TYPE_ARRAY_NUMBER,
                    TYPE_ARRAY_STRING: TYPE_ARRAY_STRING,
                    TYPE_ARRAY: TYPE_ARRAY,
                    TYPE_BOOLEAN: TYPE_BOOLEAN,
                    TYPE_EXPREF: TYPE_EXPREF,
                    TYPE_NULL: TYPE_NULL,
                    TYPE_NUMBER: TYPE_NUMBER,
                    TYPE_OBJECT: TYPE_OBJECT,
                    TYPE_STRING: TYPE_STRING,
                };
                /* harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (jmespath);
                /***/ 
            }),
            /***/ "./node_modules/he/he.js": 
            /*!*******************************!*\
              !*** ./node_modules/he/he.js ***!
              \*******************************/
            /***/ (function (module, exports, __webpack_require__) {
                /* module decorator */ module = __webpack_require__.nmd(module);
                var __WEBPACK_AMD_DEFINE_RESULT__; /*! https://mths.be/he v1.2.0 by @mathias | MIT license */
                ;
                (function (root) {
                    // Detect free variables `exports`.
                    var freeExports = true && exports;
                    // Detect free variable `module`.
                    var freeModule = true && module &&
                        module.exports == freeExports && module;
                    // Detect free variable `global`, from Node.js or Browserified code,
                    // and use it as `root`.
                    var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
                    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
                        root = freeGlobal;
                    }
                    /*--------------------------------------------------------------------------*/
                    // All astral symbols.
                    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
                    // All ASCII symbols (not just printable ASCII) except those listed in the
                    // first column of the overrides table.
                    // https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
                    var regexAsciiWhitelist = /[\x01-\x7F]/g;
                    // All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
                    // code points listed in the first column of the overrides table on
                    // https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
                    var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
                    var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
                    var encodeMap = { '\xAD': 'shy', '\u200C': 'zwnj', '\u200D': 'zwj', '\u200E': 'lrm', '\u2063': 'ic', '\u2062': 'it', '\u2061': 'af', '\u200F': 'rlm', '\u200B': 'ZeroWidthSpace', '\u2060': 'NoBreak', '\u0311': 'DownBreve', '\u20DB': 'tdot', '\u20DC': 'DotDot', '\t': 'Tab', '\n': 'NewLine', '\u2008': 'puncsp', '\u205F': 'MediumSpace', '\u2009': 'thinsp', '\u200A': 'hairsp', '\u2004': 'emsp13', '\u2002': 'ensp', '\u2005': 'emsp14', '\u2003': 'emsp', '\u2007': 'numsp', '\xA0': 'nbsp', '\u205F\u200A': 'ThickSpace', '\u203E': 'oline', '_': 'lowbar', '\u2010': 'dash', '\u2013': 'ndash', '\u2014': 'mdash', '\u2015': 'horbar', ',': 'comma', ';': 'semi', '\u204F': 'bsemi', ':': 'colon', '\u2A74': 'Colone', '!': 'excl', '\xA1': 'iexcl', '?': 'quest', '\xBF': 'iquest', '.': 'period', '\u2025': 'nldr', '\u2026': 'mldr', '\xB7': 'middot', '\'': 'apos', '\u2018': 'lsquo', '\u2019': 'rsquo', '\u201A': 'sbquo', '\u2039': 'lsaquo', '\u203A': 'rsaquo', '"': 'quot', '\u201C': 'ldquo', '\u201D': 'rdquo', '\u201E': 'bdquo', '\xAB': 'laquo', '\xBB': 'raquo', '(': 'lpar', ')': 'rpar', '[': 'lsqb', ']': 'rsqb', '{': 'lcub', '}': 'rcub', '\u2308': 'lceil', '\u2309': 'rceil', '\u230A': 'lfloor', '\u230B': 'rfloor', '\u2985': 'lopar', '\u2986': 'ropar', '\u298B': 'lbrke', '\u298C': 'rbrke', '\u298D': 'lbrkslu', '\u298E': 'rbrksld', '\u298F': 'lbrksld', '\u2990': 'rbrkslu', '\u2991': 'langd', '\u2992': 'rangd', '\u2993': 'lparlt', '\u2994': 'rpargt', '\u2995': 'gtlPar', '\u2996': 'ltrPar', '\u27E6': 'lobrk', '\u27E7': 'robrk', '\u27E8': 'lang', '\u27E9': 'rang', '\u27EA': 'Lang', '\u27EB': 'Rang', '\u27EC': 'loang', '\u27ED': 'roang', '\u2772': 'lbbrk', '\u2773': 'rbbrk', '\u2016': 'Vert', '\xA7': 'sect', '\xB6': 'para', '@': 'commat', '*': 'ast', '/': 'sol', 'undefined': null, '&': 'amp', '#': 'num', '%': 'percnt', '\u2030': 'permil', '\u2031': 'pertenk', '\u2020': 'dagger', '\u2021': 'Dagger', '\u2022': 'bull', '\u2043': 'hybull', '\u2032': 'prime', '\u2033': 'Prime', '\u2034': 'tprime', '\u2057': 'qprime', '\u2035': 'bprime', '\u2041': 'caret', '`': 'grave', '\xB4': 'acute', '\u02DC': 'tilde', '^': 'Hat', '\xAF': 'macr', '\u02D8': 'breve', '\u02D9': 'dot', '\xA8': 'die', '\u02DA': 'ring', '\u02DD': 'dblac', '\xB8': 'cedil', '\u02DB': 'ogon', '\u02C6': 'circ', '\u02C7': 'caron', '\xB0': 'deg', '\xA9': 'copy', '\xAE': 'reg', '\u2117': 'copysr', '\u2118': 'wp', '\u211E': 'rx', '\u2127': 'mho', '\u2129': 'iiota', '\u2190': 'larr', '\u219A': 'nlarr', '\u2192': 'rarr', '\u219B': 'nrarr', '\u2191': 'uarr', '\u2193': 'darr', '\u2194': 'harr', '\u21AE': 'nharr', '\u2195': 'varr', '\u2196': 'nwarr', '\u2197': 'nearr', '\u2198': 'searr', '\u2199': 'swarr', '\u219D': 'rarrw', '\u219D\u0338': 'nrarrw', '\u219E': 'Larr', '\u219F': 'Uarr', '\u21A0': 'Rarr', '\u21A1': 'Darr', '\u21A2': 'larrtl', '\u21A3': 'rarrtl', '\u21A4': 'mapstoleft', '\u21A5': 'mapstoup', '\u21A6': 'map', '\u21A7': 'mapstodown', '\u21A9': 'larrhk', '\u21AA': 'rarrhk', '\u21AB': 'larrlp', '\u21AC': 'rarrlp', '\u21AD': 'harrw', '\u21B0': 'lsh', '\u21B1': 'rsh', '\u21B2': 'ldsh', '\u21B3': 'rdsh', '\u21B5': 'crarr', '\u21B6': 'cularr', '\u21B7': 'curarr', '\u21BA': 'olarr', '\u21BB': 'orarr', '\u21BC': 'lharu', '\u21BD': 'lhard', '\u21BE': 'uharr', '\u21BF': 'uharl', '\u21C0': 'rharu', '\u21C1': 'rhard', '\u21C2': 'dharr', '\u21C3': 'dharl', '\u21C4': 'rlarr', '\u21C5': 'udarr', '\u21C6': 'lrarr', '\u21C7': 'llarr', '\u21C8': 'uuarr', '\u21C9': 'rrarr', '\u21CA': 'ddarr', '\u21CB': 'lrhar', '\u21CC': 'rlhar', '\u21D0': 'lArr', '\u21CD': 'nlArr', '\u21D1': 'uArr', '\u21D2': 'rArr', '\u21CF': 'nrArr', '\u21D3': 'dArr', '\u21D4': 'iff', '\u21CE': 'nhArr', '\u21D5': 'vArr', '\u21D6': 'nwArr', '\u21D7': 'neArr', '\u21D8': 'seArr', '\u21D9': 'swArr', '\u21DA': 'lAarr', '\u21DB': 'rAarr', '\u21DD': 'zigrarr', '\u21E4': 'larrb', '\u21E5': 'rarrb', '\u21F5': 'duarr', '\u21FD': 'loarr', '\u21FE': 'roarr', '\u21FF': 'hoarr', '\u2200': 'forall', '\u2201': 'comp', '\u2202': 'part', '\u2202\u0338': 'npart', '\u2203': 'exist', '\u2204': 'nexist', '\u2205': 'empty', '\u2207': 'Del', '\u2208': 'in', '\u2209': 'notin', '\u220B': 'ni', '\u220C': 'notni', '\u03F6': 'bepsi', '\u220F': 'prod', '\u2210': 'coprod', '\u2211': 'sum', '+': 'plus', '\xB1': 'pm', '\xF7': 'div', '\xD7': 'times', '<': 'lt', '\u226E': 'nlt', '<\u20D2': 'nvlt', '=': 'equals', '\u2260': 'ne', '=\u20E5': 'bne', '\u2A75': 'Equal', '>': 'gt', '\u226F': 'ngt', '>\u20D2': 'nvgt', '\xAC': 'not', '|': 'vert', '\xA6': 'brvbar', '\u2212': 'minus', '\u2213': 'mp', '\u2214': 'plusdo', '\u2044': 'frasl', '\u2216': 'setmn', '\u2217': 'lowast', '\u2218': 'compfn', '\u221A': 'Sqrt', '\u221D': 'prop', '\u221E': 'infin', '\u221F': 'angrt', '\u2220': 'ang', '\u2220\u20D2': 'nang', '\u2221': 'angmsd', '\u2222': 'angsph', '\u2223': 'mid', '\u2224': 'nmid', '\u2225': 'par', '\u2226': 'npar', '\u2227': 'and', '\u2228': 'or', '\u2229': 'cap', '\u2229\uFE00': 'caps', '\u222A': 'cup', '\u222A\uFE00': 'cups', '\u222B': 'int', '\u222C': 'Int', '\u222D': 'tint', '\u2A0C': 'qint', '\u222E': 'oint', '\u222F': 'Conint', '\u2230': 'Cconint', '\u2231': 'cwint', '\u2232': 'cwconint', '\u2233': 'awconint', '\u2234': 'there4', '\u2235': 'becaus', '\u2236': 'ratio', '\u2237': 'Colon', '\u2238': 'minusd', '\u223A': 'mDDot', '\u223B': 'homtht', '\u223C': 'sim', '\u2241': 'nsim', '\u223C\u20D2': 'nvsim', '\u223D': 'bsim', '\u223D\u0331': 'race', '\u223E': 'ac', '\u223E\u0333': 'acE', '\u223F': 'acd', '\u2240': 'wr', '\u2242': 'esim', '\u2242\u0338': 'nesim', '\u2243': 'sime', '\u2244': 'nsime', '\u2245': 'cong', '\u2247': 'ncong', '\u2246': 'simne', '\u2248': 'ap', '\u2249': 'nap', '\u224A': 'ape', '\u224B': 'apid', '\u224B\u0338': 'napid', '\u224C': 'bcong', '\u224D': 'CupCap', '\u226D': 'NotCupCap', '\u224D\u20D2': 'nvap', '\u224E': 'bump', '\u224E\u0338': 'nbump', '\u224F': 'bumpe', '\u224F\u0338': 'nbumpe', '\u2250': 'doteq', '\u2250\u0338': 'nedot', '\u2251': 'eDot', '\u2252': 'efDot', '\u2253': 'erDot', '\u2254': 'colone', '\u2255': 'ecolon', '\u2256': 'ecir', '\u2257': 'cire', '\u2259': 'wedgeq', '\u225A': 'veeeq', '\u225C': 'trie', '\u225F': 'equest', '\u2261': 'equiv', '\u2262': 'nequiv', '\u2261\u20E5': 'bnequiv', '\u2264': 'le', '\u2270': 'nle', '\u2264\u20D2': 'nvle', '\u2265': 'ge', '\u2271': 'nge', '\u2265\u20D2': 'nvge', '\u2266': 'lE', '\u2266\u0338': 'nlE', '\u2267': 'gE', '\u2267\u0338': 'ngE', '\u2268\uFE00': 'lvnE', '\u2268': 'lnE', '\u2269': 'gnE', '\u2269\uFE00': 'gvnE', '\u226A': 'll', '\u226A\u0338': 'nLtv', '\u226A\u20D2': 'nLt', '\u226B': 'gg', '\u226B\u0338': 'nGtv', '\u226B\u20D2': 'nGt', '\u226C': 'twixt', '\u2272': 'lsim', '\u2274': 'nlsim', '\u2273': 'gsim', '\u2275': 'ngsim', '\u2276': 'lg', '\u2278': 'ntlg', '\u2277': 'gl', '\u2279': 'ntgl', '\u227A': 'pr', '\u2280': 'npr', '\u227B': 'sc', '\u2281': 'nsc', '\u227C': 'prcue', '\u22E0': 'nprcue', '\u227D': 'sccue', '\u22E1': 'nsccue', '\u227E': 'prsim', '\u227F': 'scsim', '\u227F\u0338': 'NotSucceedsTilde', '\u2282': 'sub', '\u2284': 'nsub', '\u2282\u20D2': 'vnsub', '\u2283': 'sup', '\u2285': 'nsup', '\u2283\u20D2': 'vnsup', '\u2286': 'sube', '\u2288': 'nsube', '\u2287': 'supe', '\u2289': 'nsupe', '\u228A\uFE00': 'vsubne', '\u228A': 'subne', '\u228B\uFE00': 'vsupne', '\u228B': 'supne', '\u228D': 'cupdot', '\u228E': 'uplus', '\u228F': 'sqsub', '\u228F\u0338': 'NotSquareSubset', '\u2290': 'sqsup', '\u2290\u0338': 'NotSquareSuperset', '\u2291': 'sqsube', '\u22E2': 'nsqsube', '\u2292': 'sqsupe', '\u22E3': 'nsqsupe', '\u2293': 'sqcap', '\u2293\uFE00': 'sqcaps', '\u2294': 'sqcup', '\u2294\uFE00': 'sqcups', '\u2295': 'oplus', '\u2296': 'ominus', '\u2297': 'otimes', '\u2298': 'osol', '\u2299': 'odot', '\u229A': 'ocir', '\u229B': 'oast', '\u229D': 'odash', '\u229E': 'plusb', '\u229F': 'minusb', '\u22A0': 'timesb', '\u22A1': 'sdotb', '\u22A2': 'vdash', '\u22AC': 'nvdash', '\u22A3': 'dashv', '\u22A4': 'top', '\u22A5': 'bot', '\u22A7': 'models', '\u22A8': 'vDash', '\u22AD': 'nvDash', '\u22A9': 'Vdash', '\u22AE': 'nVdash', '\u22AA': 'Vvdash', '\u22AB': 'VDash', '\u22AF': 'nVDash', '\u22B0': 'prurel', '\u22B2': 'vltri', '\u22EA': 'nltri', '\u22B3': 'vrtri', '\u22EB': 'nrtri', '\u22B4': 'ltrie', '\u22EC': 'nltrie', '\u22B4\u20D2': 'nvltrie', '\u22B5': 'rtrie', '\u22ED': 'nrtrie', '\u22B5\u20D2': 'nvrtrie', '\u22B6': 'origof', '\u22B7': 'imof', '\u22B8': 'mumap', '\u22B9': 'hercon', '\u22BA': 'intcal', '\u22BB': 'veebar', '\u22BD': 'barvee', '\u22BE': 'angrtvb', '\u22BF': 'lrtri', '\u22C0': 'Wedge', '\u22C1': 'Vee', '\u22C2': 'xcap', '\u22C3': 'xcup', '\u22C4': 'diam', '\u22C5': 'sdot', '\u22C6': 'Star', '\u22C7': 'divonx', '\u22C8': 'bowtie', '\u22C9': 'ltimes', '\u22CA': 'rtimes', '\u22CB': 'lthree', '\u22CC': 'rthree', '\u22CD': 'bsime', '\u22CE': 'cuvee', '\u22CF': 'cuwed', '\u22D0': 'Sub', '\u22D1': 'Sup', '\u22D2': 'Cap', '\u22D3': 'Cup', '\u22D4': 'fork', '\u22D5': 'epar', '\u22D6': 'ltdot', '\u22D7': 'gtdot', '\u22D8': 'Ll', '\u22D8\u0338': 'nLl', '\u22D9': 'Gg', '\u22D9\u0338': 'nGg', '\u22DA\uFE00': 'lesg', '\u22DA': 'leg', '\u22DB': 'gel', '\u22DB\uFE00': 'gesl', '\u22DE': 'cuepr', '\u22DF': 'cuesc', '\u22E6': 'lnsim', '\u22E7': 'gnsim', '\u22E8': 'prnsim', '\u22E9': 'scnsim', '\u22EE': 'vellip', '\u22EF': 'ctdot', '\u22F0': 'utdot', '\u22F1': 'dtdot', '\u22F2': 'disin', '\u22F3': 'isinsv', '\u22F4': 'isins', '\u22F5': 'isindot', '\u22F5\u0338': 'notindot', '\u22F6': 'notinvc', '\u22F7': 'notinvb', '\u22F9': 'isinE', '\u22F9\u0338': 'notinE', '\u22FA': 'nisd', '\u22FB': 'xnis', '\u22FC': 'nis', '\u22FD': 'notnivc', '\u22FE': 'notnivb', '\u2305': 'barwed', '\u2306': 'Barwed', '\u230C': 'drcrop', '\u230D': 'dlcrop', '\u230E': 'urcrop', '\u230F': 'ulcrop', '\u2310': 'bnot', '\u2312': 'profline', '\u2313': 'profsurf', '\u2315': 'telrec', '\u2316': 'target', '\u231C': 'ulcorn', '\u231D': 'urcorn', '\u231E': 'dlcorn', '\u231F': 'drcorn', '\u2322': 'frown', '\u2323': 'smile', '\u232D': 'cylcty', '\u232E': 'profalar', '\u2336': 'topbot', '\u233D': 'ovbar', '\u233F': 'solbar', '\u237C': 'angzarr', '\u23B0': 'lmoust', '\u23B1': 'rmoust', '\u23B4': 'tbrk', '\u23B5': 'bbrk', '\u23B6': 'bbrktbrk', '\u23DC': 'OverParenthesis', '\u23DD': 'UnderParenthesis', '\u23DE': 'OverBrace', '\u23DF': 'UnderBrace', '\u23E2': 'trpezium', '\u23E7': 'elinters', '\u2423': 'blank', '\u2500': 'boxh', '\u2502': 'boxv', '\u250C': 'boxdr', '\u2510': 'boxdl', '\u2514': 'boxur', '\u2518': 'boxul', '\u251C': 'boxvr', '\u2524': 'boxvl', '\u252C': 'boxhd', '\u2534': 'boxhu', '\u253C': 'boxvh', '\u2550': 'boxH', '\u2551': 'boxV', '\u2552': 'boxdR', '\u2553': 'boxDr', '\u2554': 'boxDR', '\u2555': 'boxdL', '\u2556': 'boxDl', '\u2557': 'boxDL', '\u2558': 'boxuR', '\u2559': 'boxUr', '\u255A': 'boxUR', '\u255B': 'boxuL', '\u255C': 'boxUl', '\u255D': 'boxUL', '\u255E': 'boxvR', '\u255F': 'boxVr', '\u2560': 'boxVR', '\u2561': 'boxvL', '\u2562': 'boxVl', '\u2563': 'boxVL', '\u2564': 'boxHd', '\u2565': 'boxhD', '\u2566': 'boxHD', '\u2567': 'boxHu', '\u2568': 'boxhU', '\u2569': 'boxHU', '\u256A': 'boxvH', '\u256B': 'boxVh', '\u256C': 'boxVH', '\u2580': 'uhblk', '\u2584': 'lhblk', '\u2588': 'block', '\u2591': 'blk14', '\u2592': 'blk12', '\u2593': 'blk34', '\u25A1': 'squ', '\u25AA': 'squf', '\u25AB': 'EmptyVerySmallSquare', '\u25AD': 'rect', '\u25AE': 'marker', '\u25B1': 'fltns', '\u25B3': 'xutri', '\u25B4': 'utrif', '\u25B5': 'utri', '\u25B8': 'rtrif', '\u25B9': 'rtri', '\u25BD': 'xdtri', '\u25BE': 'dtrif', '\u25BF': 'dtri', '\u25C2': 'ltrif', '\u25C3': 'ltri', '\u25CA': 'loz', '\u25CB': 'cir', '\u25EC': 'tridot', '\u25EF': 'xcirc', '\u25F8': 'ultri', '\u25F9': 'urtri', '\u25FA': 'lltri', '\u25FB': 'EmptySmallSquare', '\u25FC': 'FilledSmallSquare', '\u2605': 'starf', '\u2606': 'star', '\u260E': 'phone', '\u2640': 'female', '\u2642': 'male', '\u2660': 'spades', '\u2663': 'clubs', '\u2665': 'hearts', '\u2666': 'diams', '\u266A': 'sung', '\u2713': 'check', '\u2717': 'cross', '\u2720': 'malt', '\u2736': 'sext', '\u2758': 'VerticalSeparator', '\u27C8': 'bsolhsub', '\u27C9': 'suphsol', '\u27F5': 'xlarr', '\u27F6': 'xrarr', '\u27F7': 'xharr', '\u27F8': 'xlArr', '\u27F9': 'xrArr', '\u27FA': 'xhArr', '\u27FC': 'xmap', '\u27FF': 'dzigrarr', '\u2902': 'nvlArr', '\u2903': 'nvrArr', '\u2904': 'nvHarr', '\u2905': 'Map', '\u290C': 'lbarr', '\u290D': 'rbarr', '\u290E': 'lBarr', '\u290F': 'rBarr', '\u2910': 'RBarr', '\u2911': 'DDotrahd', '\u2912': 'UpArrowBar', '\u2913': 'DownArrowBar', '\u2916': 'Rarrtl', '\u2919': 'latail', '\u291A': 'ratail', '\u291B': 'lAtail', '\u291C': 'rAtail', '\u291D': 'larrfs', '\u291E': 'rarrfs', '\u291F': 'larrbfs', '\u2920': 'rarrbfs', '\u2923': 'nwarhk', '\u2924': 'nearhk', '\u2925': 'searhk', '\u2926': 'swarhk', '\u2927': 'nwnear', '\u2928': 'toea', '\u2929': 'tosa', '\u292A': 'swnwar', '\u2933': 'rarrc', '\u2933\u0338': 'nrarrc', '\u2935': 'cudarrr', '\u2936': 'ldca', '\u2937': 'rdca', '\u2938': 'cudarrl', '\u2939': 'larrpl', '\u293C': 'curarrm', '\u293D': 'cularrp', '\u2945': 'rarrpl', '\u2948': 'harrcir', '\u2949': 'Uarrocir', '\u294A': 'lurdshar', '\u294B': 'ldrushar', '\u294E': 'LeftRightVector', '\u294F': 'RightUpDownVector', '\u2950': 'DownLeftRightVector', '\u2951': 'LeftUpDownVector', '\u2952': 'LeftVectorBar', '\u2953': 'RightVectorBar', '\u2954': 'RightUpVectorBar', '\u2955': 'RightDownVectorBar', '\u2956': 'DownLeftVectorBar', '\u2957': 'DownRightVectorBar', '\u2958': 'LeftUpVectorBar', '\u2959': 'LeftDownVectorBar', '\u295A': 'LeftTeeVector', '\u295B': 'RightTeeVector', '\u295C': 'RightUpTeeVector', '\u295D': 'RightDownTeeVector', '\u295E': 'DownLeftTeeVector', '\u295F': 'DownRightTeeVector', '\u2960': 'LeftUpTeeVector', '\u2961': 'LeftDownTeeVector', '\u2962': 'lHar', '\u2963': 'uHar', '\u2964': 'rHar', '\u2965': 'dHar', '\u2966': 'luruhar', '\u2967': 'ldrdhar', '\u2968': 'ruluhar', '\u2969': 'rdldhar', '\u296A': 'lharul', '\u296B': 'llhard', '\u296C': 'rharul', '\u296D': 'lrhard', '\u296E': 'udhar', '\u296F': 'duhar', '\u2970': 'RoundImplies', '\u2971': 'erarr', '\u2972': 'simrarr', '\u2973': 'larrsim', '\u2974': 'rarrsim', '\u2975': 'rarrap', '\u2976': 'ltlarr', '\u2978': 'gtrarr', '\u2979': 'subrarr', '\u297B': 'suplarr', '\u297C': 'lfisht', '\u297D': 'rfisht', '\u297E': 'ufisht', '\u297F': 'dfisht', '\u299A': 'vzigzag', '\u299C': 'vangrt', '\u299D': 'angrtvbd', '\u29A4': 'ange', '\u29A5': 'range', '\u29A6': 'dwangle', '\u29A7': 'uwangle', '\u29A8': 'angmsdaa', '\u29A9': 'angmsdab', '\u29AA': 'angmsdac', '\u29AB': 'angmsdad', '\u29AC': 'angmsdae', '\u29AD': 'angmsdaf', '\u29AE': 'angmsdag', '\u29AF': 'angmsdah', '\u29B0': 'bemptyv', '\u29B1': 'demptyv', '\u29B2': 'cemptyv', '\u29B3': 'raemptyv', '\u29B4': 'laemptyv', '\u29B5': 'ohbar', '\u29B6': 'omid', '\u29B7': 'opar', '\u29B9': 'operp', '\u29BB': 'olcross', '\u29BC': 'odsold', '\u29BE': 'olcir', '\u29BF': 'ofcir', '\u29C0': 'olt', '\u29C1': 'ogt', '\u29C2': 'cirscir', '\u29C3': 'cirE', '\u29C4': 'solb', '\u29C5': 'bsolb', '\u29C9': 'boxbox', '\u29CD': 'trisb', '\u29CE': 'rtriltri', '\u29CF': 'LeftTriangleBar', '\u29CF\u0338': 'NotLeftTriangleBar', '\u29D0': 'RightTriangleBar', '\u29D0\u0338': 'NotRightTriangleBar', '\u29DC': 'iinfin', '\u29DD': 'infintie', '\u29DE': 'nvinfin', '\u29E3': 'eparsl', '\u29E4': 'smeparsl', '\u29E5': 'eqvparsl', '\u29EB': 'lozf', '\u29F4': 'RuleDelayed', '\u29F6': 'dsol', '\u2A00': 'xodot', '\u2A01': 'xoplus', '\u2A02': 'xotime', '\u2A04': 'xuplus', '\u2A06': 'xsqcup', '\u2A0D': 'fpartint', '\u2A10': 'cirfnint', '\u2A11': 'awint', '\u2A12': 'rppolint', '\u2A13': 'scpolint', '\u2A14': 'npolint', '\u2A15': 'pointint', '\u2A16': 'quatint', '\u2A17': 'intlarhk', '\u2A22': 'pluscir', '\u2A23': 'plusacir', '\u2A24': 'simplus', '\u2A25': 'plusdu', '\u2A26': 'plussim', '\u2A27': 'plustwo', '\u2A29': 'mcomma', '\u2A2A': 'minusdu', '\u2A2D': 'loplus', '\u2A2E': 'roplus', '\u2A2F': 'Cross', '\u2A30': 'timesd', '\u2A31': 'timesbar', '\u2A33': 'smashp', '\u2A34': 'lotimes', '\u2A35': 'rotimes', '\u2A36': 'otimesas', '\u2A37': 'Otimes', '\u2A38': 'odiv', '\u2A39': 'triplus', '\u2A3A': 'triminus', '\u2A3B': 'tritime', '\u2A3C': 'iprod', '\u2A3F': 'amalg', '\u2A40': 'capdot', '\u2A42': 'ncup', '\u2A43': 'ncap', '\u2A44': 'capand', '\u2A45': 'cupor', '\u2A46': 'cupcap', '\u2A47': 'capcup', '\u2A48': 'cupbrcap', '\u2A49': 'capbrcup', '\u2A4A': 'cupcup', '\u2A4B': 'capcap', '\u2A4C': 'ccups', '\u2A4D': 'ccaps', '\u2A50': 'ccupssm', '\u2A53': 'And', '\u2A54': 'Or', '\u2A55': 'andand', '\u2A56': 'oror', '\u2A57': 'orslope', '\u2A58': 'andslope', '\u2A5A': 'andv', '\u2A5B': 'orv', '\u2A5C': 'andd', '\u2A5D': 'ord', '\u2A5F': 'wedbar', '\u2A66': 'sdote', '\u2A6A': 'simdot', '\u2A6D': 'congdot', '\u2A6D\u0338': 'ncongdot', '\u2A6E': 'easter', '\u2A6F': 'apacir', '\u2A70': 'apE', '\u2A70\u0338': 'napE', '\u2A71': 'eplus', '\u2A72': 'pluse', '\u2A73': 'Esim', '\u2A77': 'eDDot', '\u2A78': 'equivDD', '\u2A79': 'ltcir', '\u2A7A': 'gtcir', '\u2A7B': 'ltquest', '\u2A7C': 'gtquest', '\u2A7D': 'les', '\u2A7D\u0338': 'nles', '\u2A7E': 'ges', '\u2A7E\u0338': 'nges', '\u2A7F': 'lesdot', '\u2A80': 'gesdot', '\u2A81': 'lesdoto', '\u2A82': 'gesdoto', '\u2A83': 'lesdotor', '\u2A84': 'gesdotol', '\u2A85': 'lap', '\u2A86': 'gap', '\u2A87': 'lne', '\u2A88': 'gne', '\u2A89': 'lnap', '\u2A8A': 'gnap', '\u2A8B': 'lEg', '\u2A8C': 'gEl', '\u2A8D': 'lsime', '\u2A8E': 'gsime', '\u2A8F': 'lsimg', '\u2A90': 'gsiml', '\u2A91': 'lgE', '\u2A92': 'glE', '\u2A93': 'lesges', '\u2A94': 'gesles', '\u2A95': 'els', '\u2A96': 'egs', '\u2A97': 'elsdot', '\u2A98': 'egsdot', '\u2A99': 'el', '\u2A9A': 'eg', '\u2A9D': 'siml', '\u2A9E': 'simg', '\u2A9F': 'simlE', '\u2AA0': 'simgE', '\u2AA1': 'LessLess', '\u2AA1\u0338': 'NotNestedLessLess', '\u2AA2': 'GreaterGreater', '\u2AA2\u0338': 'NotNestedGreaterGreater', '\u2AA4': 'glj', '\u2AA5': 'gla', '\u2AA6': 'ltcc', '\u2AA7': 'gtcc', '\u2AA8': 'lescc', '\u2AA9': 'gescc', '\u2AAA': 'smt', '\u2AAB': 'lat', '\u2AAC': 'smte', '\u2AAC\uFE00': 'smtes', '\u2AAD': 'late', '\u2AAD\uFE00': 'lates', '\u2AAE': 'bumpE', '\u2AAF': 'pre', '\u2AAF\u0338': 'npre', '\u2AB0': 'sce', '\u2AB0\u0338': 'nsce', '\u2AB3': 'prE', '\u2AB4': 'scE', '\u2AB5': 'prnE', '\u2AB6': 'scnE', '\u2AB7': 'prap', '\u2AB8': 'scap', '\u2AB9': 'prnap', '\u2ABA': 'scnap', '\u2ABB': 'Pr', '\u2ABC': 'Sc', '\u2ABD': 'subdot', '\u2ABE': 'supdot', '\u2ABF': 'subplus', '\u2AC0': 'supplus', '\u2AC1': 'submult', '\u2AC2': 'supmult', '\u2AC3': 'subedot', '\u2AC4': 'supedot', '\u2AC5': 'subE', '\u2AC5\u0338': 'nsubE', '\u2AC6': 'supE', '\u2AC6\u0338': 'nsupE', '\u2AC7': 'subsim', '\u2AC8': 'supsim', '\u2ACB\uFE00': 'vsubnE', '\u2ACB': 'subnE', '\u2ACC\uFE00': 'vsupnE', '\u2ACC': 'supnE', '\u2ACF': 'csub', '\u2AD0': 'csup', '\u2AD1': 'csube', '\u2AD2': 'csupe', '\u2AD3': 'subsup', '\u2AD4': 'supsub', '\u2AD5': 'subsub', '\u2AD6': 'supsup', '\u2AD7': 'suphsub', '\u2AD8': 'supdsub', '\u2AD9': 'forkv', '\u2ADA': 'topfork', '\u2ADB': 'mlcp', '\u2AE4': 'Dashv', '\u2AE6': 'Vdashl', '\u2AE7': 'Barv', '\u2AE8': 'vBar', '\u2AE9': 'vBarv', '\u2AEB': 'Vbar', '\u2AEC': 'Not', '\u2AED': 'bNot', '\u2AEE': 'rnmid', '\u2AEF': 'cirmid', '\u2AF0': 'midcir', '\u2AF1': 'topcir', '\u2AF2': 'nhpar', '\u2AF3': 'parsim', '\u2AFD': 'parsl', '\u2AFD\u20E5': 'nparsl', '\u266D': 'flat', '\u266E': 'natur', '\u266F': 'sharp', '\xA4': 'curren', '\xA2': 'cent', '$': 'dollar', '\xA3': 'pound', '\xA5': 'yen', '\u20AC': 'euro', '\xB9': 'sup1', '\xBD': 'half', '\u2153': 'frac13', '\xBC': 'frac14', '\u2155': 'frac15', '\u2159': 'frac16', '\u215B': 'frac18', '\xB2': 'sup2', '\u2154': 'frac23', '\u2156': 'frac25', '\xB3': 'sup3', '\xBE': 'frac34', '\u2157': 'frac35', '\u215C': 'frac38', '\u2158': 'frac45', '\u215A': 'frac56', '\u215D': 'frac58', '\u215E': 'frac78', '\uD835\uDCB6': 'ascr', '\uD835\uDD52': 'aopf', '\uD835\uDD1E': 'afr', '\uD835\uDD38': 'Aopf', '\uD835\uDD04': 'Afr', '\uD835\uDC9C': 'Ascr', '\xAA': 'ordf', '\xE1': 'aacute', '\xC1': 'Aacute', '\xE0': 'agrave', '\xC0': 'Agrave', '\u0103': 'abreve', '\u0102': 'Abreve', '\xE2': 'acirc', '\xC2': 'Acirc', '\xE5': 'aring', '\xC5': 'angst', '\xE4': 'auml', '\xC4': 'Auml', '\xE3': 'atilde', '\xC3': 'Atilde', '\u0105': 'aogon', '\u0104': 'Aogon', '\u0101': 'amacr', '\u0100': 'Amacr', '\xE6': 'aelig', '\xC6': 'AElig', '\uD835\uDCB7': 'bscr', '\uD835\uDD53': 'bopf', '\uD835\uDD1F': 'bfr', '\uD835\uDD39': 'Bopf', '\u212C': 'Bscr', '\uD835\uDD05': 'Bfr', '\uD835\uDD20': 'cfr', '\uD835\uDCB8': 'cscr', '\uD835\uDD54': 'copf', '\u212D': 'Cfr', '\uD835\uDC9E': 'Cscr', '\u2102': 'Copf', '\u0107': 'cacute', '\u0106': 'Cacute', '\u0109': 'ccirc', '\u0108': 'Ccirc', '\u010D': 'ccaron', '\u010C': 'Ccaron', '\u010B': 'cdot', '\u010A': 'Cdot', '\xE7': 'ccedil', '\xC7': 'Ccedil', '\u2105': 'incare', '\uD835\uDD21': 'dfr', '\u2146': 'dd', '\uD835\uDD55': 'dopf', '\uD835\uDCB9': 'dscr', '\uD835\uDC9F': 'Dscr', '\uD835\uDD07': 'Dfr', '\u2145': 'DD', '\uD835\uDD3B': 'Dopf', '\u010F': 'dcaron', '\u010E': 'Dcaron', '\u0111': 'dstrok', '\u0110': 'Dstrok', '\xF0': 'eth', '\xD0': 'ETH', '\u2147': 'ee', '\u212F': 'escr', '\uD835\uDD22': 'efr', '\uD835\uDD56': 'eopf', '\u2130': 'Escr', '\uD835\uDD08': 'Efr', '\uD835\uDD3C': 'Eopf', '\xE9': 'eacute', '\xC9': 'Eacute', '\xE8': 'egrave', '\xC8': 'Egrave', '\xEA': 'ecirc', '\xCA': 'Ecirc', '\u011B': 'ecaron', '\u011A': 'Ecaron', '\xEB': 'euml', '\xCB': 'Euml', '\u0117': 'edot', '\u0116': 'Edot', '\u0119': 'eogon', '\u0118': 'Eogon', '\u0113': 'emacr', '\u0112': 'Emacr', '\uD835\uDD23': 'ffr', '\uD835\uDD57': 'fopf', '\uD835\uDCBB': 'fscr', '\uD835\uDD09': 'Ffr', '\uD835\uDD3D': 'Fopf', '\u2131': 'Fscr', '\uFB00': 'fflig', '\uFB03': 'ffilig', '\uFB04': 'ffllig', '\uFB01': 'filig', 'fj': 'fjlig', '\uFB02': 'fllig', '\u0192': 'fnof', '\u210A': 'gscr', '\uD835\uDD58': 'gopf', '\uD835\uDD24': 'gfr', '\uD835\uDCA2': 'Gscr', '\uD835\uDD3E': 'Gopf', '\uD835\uDD0A': 'Gfr', '\u01F5': 'gacute', '\u011F': 'gbreve', '\u011E': 'Gbreve', '\u011D': 'gcirc', '\u011C': 'Gcirc', '\u0121': 'gdot', '\u0120': 'Gdot', '\u0122': 'Gcedil', '\uD835\uDD25': 'hfr', '\u210E': 'planckh', '\uD835\uDCBD': 'hscr', '\uD835\uDD59': 'hopf', '\u210B': 'Hscr', '\u210C': 'Hfr', '\u210D': 'Hopf', '\u0125': 'hcirc', '\u0124': 'Hcirc', '\u210F': 'hbar', '\u0127': 'hstrok', '\u0126': 'Hstrok', '\uD835\uDD5A': 'iopf', '\uD835\uDD26': 'ifr', '\uD835\uDCBE': 'iscr', '\u2148': 'ii', '\uD835\uDD40': 'Iopf', '\u2110': 'Iscr', '\u2111': 'Im', '\xED': 'iacute', '\xCD': 'Iacute', '\xEC': 'igrave', '\xCC': 'Igrave', '\xEE': 'icirc', '\xCE': 'Icirc', '\xEF': 'iuml', '\xCF': 'Iuml', '\u0129': 'itilde', '\u0128': 'Itilde', '\u0130': 'Idot', '\u012F': 'iogon', '\u012E': 'Iogon', '\u012B': 'imacr', '\u012A': 'Imacr', '\u0133': 'ijlig', '\u0132': 'IJlig', '\u0131': 'imath', '\uD835\uDCBF': 'jscr', '\uD835\uDD5B': 'jopf', '\uD835\uDD27': 'jfr', '\uD835\uDCA5': 'Jscr', '\uD835\uDD0D': 'Jfr', '\uD835\uDD41': 'Jopf', '\u0135': 'jcirc', '\u0134': 'Jcirc', '\u0237': 'jmath', '\uD835\uDD5C': 'kopf', '\uD835\uDCC0': 'kscr', '\uD835\uDD28': 'kfr', '\uD835\uDCA6': 'Kscr', '\uD835\uDD42': 'Kopf', '\uD835\uDD0E': 'Kfr', '\u0137': 'kcedil', '\u0136': 'Kcedil', '\uD835\uDD29': 'lfr', '\uD835\uDCC1': 'lscr', '\u2113': 'ell', '\uD835\uDD5D': 'lopf', '\u2112': 'Lscr', '\uD835\uDD0F': 'Lfr', '\uD835\uDD43': 'Lopf', '\u013A': 'lacute', '\u0139': 'Lacute', '\u013E': 'lcaron', '\u013D': 'Lcaron', '\u013C': 'lcedil', '\u013B': 'Lcedil', '\u0142': 'lstrok', '\u0141': 'Lstrok', '\u0140': 'lmidot', '\u013F': 'Lmidot', '\uD835\uDD2A': 'mfr', '\uD835\uDD5E': 'mopf', '\uD835\uDCC2': 'mscr', '\uD835\uDD10': 'Mfr', '\uD835\uDD44': 'Mopf', '\u2133': 'Mscr', '\uD835\uDD2B': 'nfr', '\uD835\uDD5F': 'nopf', '\uD835\uDCC3': 'nscr', '\u2115': 'Nopf', '\uD835\uDCA9': 'Nscr', '\uD835\uDD11': 'Nfr', '\u0144': 'nacute', '\u0143': 'Nacute', '\u0148': 'ncaron', '\u0147': 'Ncaron', '\xF1': 'ntilde', '\xD1': 'Ntilde', '\u0146': 'ncedil', '\u0145': 'Ncedil', '\u2116': 'numero', '\u014B': 'eng', '\u014A': 'ENG', '\uD835\uDD60': 'oopf', '\uD835\uDD2C': 'ofr', '\u2134': 'oscr', '\uD835\uDCAA': 'Oscr', '\uD835\uDD12': 'Ofr', '\uD835\uDD46': 'Oopf', '\xBA': 'ordm', '\xF3': 'oacute', '\xD3': 'Oacute', '\xF2': 'ograve', '\xD2': 'Ograve', '\xF4': 'ocirc', '\xD4': 'Ocirc', '\xF6': 'ouml', '\xD6': 'Ouml', '\u0151': 'odblac', '\u0150': 'Odblac', '\xF5': 'otilde', '\xD5': 'Otilde', '\xF8': 'oslash', '\xD8': 'Oslash', '\u014D': 'omacr', '\u014C': 'Omacr', '\u0153': 'oelig', '\u0152': 'OElig', '\uD835\uDD2D': 'pfr', '\uD835\uDCC5': 'pscr', '\uD835\uDD61': 'popf', '\u2119': 'Popf', '\uD835\uDD13': 'Pfr', '\uD835\uDCAB': 'Pscr', '\uD835\uDD62': 'qopf', '\uD835\uDD2E': 'qfr', '\uD835\uDCC6': 'qscr', '\uD835\uDCAC': 'Qscr', '\uD835\uDD14': 'Qfr', '\u211A': 'Qopf', '\u0138': 'kgreen', '\uD835\uDD2F': 'rfr', '\uD835\uDD63': 'ropf', '\uD835\uDCC7': 'rscr', '\u211B': 'Rscr', '\u211C': 'Re', '\u211D': 'Ropf', '\u0155': 'racute', '\u0154': 'Racute', '\u0159': 'rcaron', '\u0158': 'Rcaron', '\u0157': 'rcedil', '\u0156': 'Rcedil', '\uD835\uDD64': 'sopf', '\uD835\uDCC8': 'sscr', '\uD835\uDD30': 'sfr', '\uD835\uDD4A': 'Sopf', '\uD835\uDD16': 'Sfr', '\uD835\uDCAE': 'Sscr', '\u24C8': 'oS', '\u015B': 'sacute', '\u015A': 'Sacute', '\u015D': 'scirc', '\u015C': 'Scirc', '\u0161': 'scaron', '\u0160': 'Scaron', '\u015F': 'scedil', '\u015E': 'Scedil', '\xDF': 'szlig', '\uD835\uDD31': 'tfr', '\uD835\uDCC9': 'tscr', '\uD835\uDD65': 'topf', '\uD835\uDCAF': 'Tscr', '\uD835\uDD17': 'Tfr', '\uD835\uDD4B': 'Topf', '\u0165': 'tcaron', '\u0164': 'Tcaron', '\u0163': 'tcedil', '\u0162': 'Tcedil', '\u2122': 'trade', '\u0167': 'tstrok', '\u0166': 'Tstrok', '\uD835\uDCCA': 'uscr', '\uD835\uDD66': 'uopf', '\uD835\uDD32': 'ufr', '\uD835\uDD4C': 'Uopf', '\uD835\uDD18': 'Ufr', '\uD835\uDCB0': 'Uscr', '\xFA': 'uacute', '\xDA': 'Uacute', '\xF9': 'ugrave', '\xD9': 'Ugrave', '\u016D': 'ubreve', '\u016C': 'Ubreve', '\xFB': 'ucirc', '\xDB': 'Ucirc', '\u016F': 'uring', '\u016E': 'Uring', '\xFC': 'uuml', '\xDC': 'Uuml', '\u0171': 'udblac', '\u0170': 'Udblac', '\u0169': 'utilde', '\u0168': 'Utilde', '\u0173': 'uogon', '\u0172': 'Uogon', '\u016B': 'umacr', '\u016A': 'Umacr', '\uD835\uDD33': 'vfr', '\uD835\uDD67': 'vopf', '\uD835\uDCCB': 'vscr', '\uD835\uDD19': 'Vfr', '\uD835\uDD4D': 'Vopf', '\uD835\uDCB1': 'Vscr', '\uD835\uDD68': 'wopf', '\uD835\uDCCC': 'wscr', '\uD835\uDD34': 'wfr', '\uD835\uDCB2': 'Wscr', '\uD835\uDD4E': 'Wopf', '\uD835\uDD1A': 'Wfr', '\u0175': 'wcirc', '\u0174': 'Wcirc', '\uD835\uDD35': 'xfr', '\uD835\uDCCD': 'xscr', '\uD835\uDD69': 'xopf', '\uD835\uDD4F': 'Xopf', '\uD835\uDD1B': 'Xfr', '\uD835\uDCB3': 'Xscr', '\uD835\uDD36': 'yfr', '\uD835\uDCCE': 'yscr', '\uD835\uDD6A': 'yopf', '\uD835\uDCB4': 'Yscr', '\uD835\uDD1C': 'Yfr', '\uD835\uDD50': 'Yopf', '\xFD': 'yacute', '\xDD': 'Yacute', '\u0177': 'ycirc', '\u0176': 'Ycirc', '\xFF': 'yuml', '\u0178': 'Yuml', '\uD835\uDCCF': 'zscr', '\uD835\uDD37': 'zfr', '\uD835\uDD6B': 'zopf', '\u2128': 'Zfr', '\u2124': 'Zopf', '\uD835\uDCB5': 'Zscr', '\u017A': 'zacute', '\u0179': 'Zacute', '\u017E': 'zcaron', '\u017D': 'Zcaron', '\u017C': 'zdot', '\u017B': 'Zdot', '\u01B5': 'imped', '\xFE': 'thorn', '\xDE': 'THORN', '\u0149': 'napos', '\u03B1': 'alpha', '\u0391': 'Alpha', '\u03B2': 'beta', '\u0392': 'Beta', '\u03B3': 'gamma', '\u0393': 'Gamma', '\u03B4': 'delta', '\u0394': 'Delta', '\u03B5': 'epsi', '\u03F5': 'epsiv', '\u0395': 'Epsilon', '\u03DD': 'gammad', '\u03DC': 'Gammad', '\u03B6': 'zeta', '\u0396': 'Zeta', '\u03B7': 'eta', '\u0397': 'Eta', '\u03B8': 'theta', '\u03D1': 'thetav', '\u0398': 'Theta', '\u03B9': 'iota', '\u0399': 'Iota', '\u03BA': 'kappa', '\u03F0': 'kappav', '\u039A': 'Kappa', '\u03BB': 'lambda', '\u039B': 'Lambda', '\u03BC': 'mu', '\xB5': 'micro', '\u039C': 'Mu', '\u03BD': 'nu', '\u039D': 'Nu', '\u03BE': 'xi', '\u039E': 'Xi', '\u03BF': 'omicron', '\u039F': 'Omicron', '\u03C0': 'pi', '\u03D6': 'piv', '\u03A0': 'Pi', '\u03C1': 'rho', '\u03F1': 'rhov', '\u03A1': 'Rho', '\u03C3': 'sigma', '\u03A3': 'Sigma', '\u03C2': 'sigmaf', '\u03C4': 'tau', '\u03A4': 'Tau', '\u03C5': 'upsi', '\u03A5': 'Upsilon', '\u03D2': 'Upsi', '\u03C6': 'phi', '\u03D5': 'phiv', '\u03A6': 'Phi', '\u03C7': 'chi', '\u03A7': 'Chi', '\u03C8': 'psi', '\u03A8': 'Psi', '\u03C9': 'omega', '\u03A9': 'ohm', '\u0430': 'acy', '\u0410': 'Acy', '\u0431': 'bcy', '\u0411': 'Bcy', '\u0432': 'vcy', '\u0412': 'Vcy', '\u0433': 'gcy', '\u0413': 'Gcy', '\u0453': 'gjcy', '\u0403': 'GJcy', '\u0434': 'dcy', '\u0414': 'Dcy', '\u0452': 'djcy', '\u0402': 'DJcy', '\u0435': 'iecy', '\u0415': 'IEcy', '\u0451': 'iocy', '\u0401': 'IOcy', '\u0454': 'jukcy', '\u0404': 'Jukcy', '\u0436': 'zhcy', '\u0416': 'ZHcy', '\u0437': 'zcy', '\u0417': 'Zcy', '\u0455': 'dscy', '\u0405': 'DScy', '\u0438': 'icy', '\u0418': 'Icy', '\u0456': 'iukcy', '\u0406': 'Iukcy', '\u0457': 'yicy', '\u0407': 'YIcy', '\u0439': 'jcy', '\u0419': 'Jcy', '\u0458': 'jsercy', '\u0408': 'Jsercy', '\u043A': 'kcy', '\u041A': 'Kcy', '\u045C': 'kjcy', '\u040C': 'KJcy', '\u043B': 'lcy', '\u041B': 'Lcy', '\u0459': 'ljcy', '\u0409': 'LJcy', '\u043C': 'mcy', '\u041C': 'Mcy', '\u043D': 'ncy', '\u041D': 'Ncy', '\u045A': 'njcy', '\u040A': 'NJcy', '\u043E': 'ocy', '\u041E': 'Ocy', '\u043F': 'pcy', '\u041F': 'Pcy', '\u0440': 'rcy', '\u0420': 'Rcy', '\u0441': 'scy', '\u0421': 'Scy', '\u0442': 'tcy', '\u0422': 'Tcy', '\u045B': 'tshcy', '\u040B': 'TSHcy', '\u0443': 'ucy', '\u0423': 'Ucy', '\u045E': 'ubrcy', '\u040E': 'Ubrcy', '\u0444': 'fcy', '\u0424': 'Fcy', '\u0445': 'khcy', '\u0425': 'KHcy', '\u0446': 'tscy', '\u0426': 'TScy', '\u0447': 'chcy', '\u0427': 'CHcy', '\u045F': 'dzcy', '\u040F': 'DZcy', '\u0448': 'shcy', '\u0428': 'SHcy', '\u0449': 'shchcy', '\u0429': 'SHCHcy', '\u044A': 'hardcy', '\u042A': 'HARDcy', '\u044B': 'ycy', '\u042B': 'Ycy', '\u044C': 'softcy', '\u042C': 'SOFTcy', '\u044D': 'ecy', '\u042D': 'Ecy', '\u044E': 'yucy', '\u042E': 'YUcy', '\u044F': 'yacy', '\u042F': 'YAcy', '\u2135': 'aleph', '\u2136': 'beth', '\u2137': 'gimel', '\u2138': 'daleth' };
                    var regexEscape = /["&'<>`]/g;
                    var escapeMap = {
                        '"': '&quot;',
                        '&': '&amp;',
                        '\'': '&#x27;',
                        '<': '&lt;',
                        // See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
                        // following is not strictly necessary unless it’s part of a tag or an
                        // unquoted attribute value. We’re only escaping it to support those
                        // situations, and for XML support.
                        '>': '&gt;',
                        // In Internet Explorer ≤ 8, the backtick character can be used
                        // to break out of (un)quoted attribute values or HTML comments.
                        // See http://html5sec.org/#102, http://html5sec.org/#108, and
                        // http://html5sec.org/#133.
                        '`': '&#x60;'
                    };
                    var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
                    var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
                    var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
                    var decodeMap = { 'aacute': '\xE1', 'Aacute': '\xC1', 'abreve': '\u0103', 'Abreve': '\u0102', 'ac': '\u223E', 'acd': '\u223F', 'acE': '\u223E\u0333', 'acirc': '\xE2', 'Acirc': '\xC2', 'acute': '\xB4', 'acy': '\u0430', 'Acy': '\u0410', 'aelig': '\xE6', 'AElig': '\xC6', 'af': '\u2061', 'afr': '\uD835\uDD1E', 'Afr': '\uD835\uDD04', 'agrave': '\xE0', 'Agrave': '\xC0', 'alefsym': '\u2135', 'aleph': '\u2135', 'alpha': '\u03B1', 'Alpha': '\u0391', 'amacr': '\u0101', 'Amacr': '\u0100', 'amalg': '\u2A3F', 'amp': '&', 'AMP': '&', 'and': '\u2227', 'And': '\u2A53', 'andand': '\u2A55', 'andd': '\u2A5C', 'andslope': '\u2A58', 'andv': '\u2A5A', 'ang': '\u2220', 'ange': '\u29A4', 'angle': '\u2220', 'angmsd': '\u2221', 'angmsdaa': '\u29A8', 'angmsdab': '\u29A9', 'angmsdac': '\u29AA', 'angmsdad': '\u29AB', 'angmsdae': '\u29AC', 'angmsdaf': '\u29AD', 'angmsdag': '\u29AE', 'angmsdah': '\u29AF', 'angrt': '\u221F', 'angrtvb': '\u22BE', 'angrtvbd': '\u299D', 'angsph': '\u2222', 'angst': '\xC5', 'angzarr': '\u237C', 'aogon': '\u0105', 'Aogon': '\u0104', 'aopf': '\uD835\uDD52', 'Aopf': '\uD835\uDD38', 'ap': '\u2248', 'apacir': '\u2A6F', 'ape': '\u224A', 'apE': '\u2A70', 'apid': '\u224B', 'apos': '\'', 'ApplyFunction': '\u2061', 'approx': '\u2248', 'approxeq': '\u224A', 'aring': '\xE5', 'Aring': '\xC5', 'ascr': '\uD835\uDCB6', 'Ascr': '\uD835\uDC9C', 'Assign': '\u2254', 'ast': '*', 'asymp': '\u2248', 'asympeq': '\u224D', 'atilde': '\xE3', 'Atilde': '\xC3', 'auml': '\xE4', 'Auml': '\xC4', 'awconint': '\u2233', 'awint': '\u2A11', 'backcong': '\u224C', 'backepsilon': '\u03F6', 'backprime': '\u2035', 'backsim': '\u223D', 'backsimeq': '\u22CD', 'Backslash': '\u2216', 'Barv': '\u2AE7', 'barvee': '\u22BD', 'barwed': '\u2305', 'Barwed': '\u2306', 'barwedge': '\u2305', 'bbrk': '\u23B5', 'bbrktbrk': '\u23B6', 'bcong': '\u224C', 'bcy': '\u0431', 'Bcy': '\u0411', 'bdquo': '\u201E', 'becaus': '\u2235', 'because': '\u2235', 'Because': '\u2235', 'bemptyv': '\u29B0', 'bepsi': '\u03F6', 'bernou': '\u212C', 'Bernoullis': '\u212C', 'beta': '\u03B2', 'Beta': '\u0392', 'beth': '\u2136', 'between': '\u226C', 'bfr': '\uD835\uDD1F', 'Bfr': '\uD835\uDD05', 'bigcap': '\u22C2', 'bigcirc': '\u25EF', 'bigcup': '\u22C3', 'bigodot': '\u2A00', 'bigoplus': '\u2A01', 'bigotimes': '\u2A02', 'bigsqcup': '\u2A06', 'bigstar': '\u2605', 'bigtriangledown': '\u25BD', 'bigtriangleup': '\u25B3', 'biguplus': '\u2A04', 'bigvee': '\u22C1', 'bigwedge': '\u22C0', 'bkarow': '\u290D', 'blacklozenge': '\u29EB', 'blacksquare': '\u25AA', 'blacktriangle': '\u25B4', 'blacktriangledown': '\u25BE', 'blacktriangleleft': '\u25C2', 'blacktriangleright': '\u25B8', 'blank': '\u2423', 'blk12': '\u2592', 'blk14': '\u2591', 'blk34': '\u2593', 'block': '\u2588', 'bne': '=\u20E5', 'bnequiv': '\u2261\u20E5', 'bnot': '\u2310', 'bNot': '\u2AED', 'bopf': '\uD835\uDD53', 'Bopf': '\uD835\uDD39', 'bot': '\u22A5', 'bottom': '\u22A5', 'bowtie': '\u22C8', 'boxbox': '\u29C9', 'boxdl': '\u2510', 'boxdL': '\u2555', 'boxDl': '\u2556', 'boxDL': '\u2557', 'boxdr': '\u250C', 'boxdR': '\u2552', 'boxDr': '\u2553', 'boxDR': '\u2554', 'boxh': '\u2500', 'boxH': '\u2550', 'boxhd': '\u252C', 'boxhD': '\u2565', 'boxHd': '\u2564', 'boxHD': '\u2566', 'boxhu': '\u2534', 'boxhU': '\u2568', 'boxHu': '\u2567', 'boxHU': '\u2569', 'boxminus': '\u229F', 'boxplus': '\u229E', 'boxtimes': '\u22A0', 'boxul': '\u2518', 'boxuL': '\u255B', 'boxUl': '\u255C', 'boxUL': '\u255D', 'boxur': '\u2514', 'boxuR': '\u2558', 'boxUr': '\u2559', 'boxUR': '\u255A', 'boxv': '\u2502', 'boxV': '\u2551', 'boxvh': '\u253C', 'boxvH': '\u256A', 'boxVh': '\u256B', 'boxVH': '\u256C', 'boxvl': '\u2524', 'boxvL': '\u2561', 'boxVl': '\u2562', 'boxVL': '\u2563', 'boxvr': '\u251C', 'boxvR': '\u255E', 'boxVr': '\u255F', 'boxVR': '\u2560', 'bprime': '\u2035', 'breve': '\u02D8', 'Breve': '\u02D8', 'brvbar': '\xA6', 'bscr': '\uD835\uDCB7', 'Bscr': '\u212C', 'bsemi': '\u204F', 'bsim': '\u223D', 'bsime': '\u22CD', 'bsol': '\\', 'bsolb': '\u29C5', 'bsolhsub': '\u27C8', 'bull': '\u2022', 'bullet': '\u2022', 'bump': '\u224E', 'bumpe': '\u224F', 'bumpE': '\u2AAE', 'bumpeq': '\u224F', 'Bumpeq': '\u224E', 'cacute': '\u0107', 'Cacute': '\u0106', 'cap': '\u2229', 'Cap': '\u22D2', 'capand': '\u2A44', 'capbrcup': '\u2A49', 'capcap': '\u2A4B', 'capcup': '\u2A47', 'capdot': '\u2A40', 'CapitalDifferentialD': '\u2145', 'caps': '\u2229\uFE00', 'caret': '\u2041', 'caron': '\u02C7', 'Cayleys': '\u212D', 'ccaps': '\u2A4D', 'ccaron': '\u010D', 'Ccaron': '\u010C', 'ccedil': '\xE7', 'Ccedil': '\xC7', 'ccirc': '\u0109', 'Ccirc': '\u0108', 'Cconint': '\u2230', 'ccups': '\u2A4C', 'ccupssm': '\u2A50', 'cdot': '\u010B', 'Cdot': '\u010A', 'cedil': '\xB8', 'Cedilla': '\xB8', 'cemptyv': '\u29B2', 'cent': '\xA2', 'centerdot': '\xB7', 'CenterDot': '\xB7', 'cfr': '\uD835\uDD20', 'Cfr': '\u212D', 'chcy': '\u0447', 'CHcy': '\u0427', 'check': '\u2713', 'checkmark': '\u2713', 'chi': '\u03C7', 'Chi': '\u03A7', 'cir': '\u25CB', 'circ': '\u02C6', 'circeq': '\u2257', 'circlearrowleft': '\u21BA', 'circlearrowright': '\u21BB', 'circledast': '\u229B', 'circledcirc': '\u229A', 'circleddash': '\u229D', 'CircleDot': '\u2299', 'circledR': '\xAE', 'circledS': '\u24C8', 'CircleMinus': '\u2296', 'CirclePlus': '\u2295', 'CircleTimes': '\u2297', 'cire': '\u2257', 'cirE': '\u29C3', 'cirfnint': '\u2A10', 'cirmid': '\u2AEF', 'cirscir': '\u29C2', 'ClockwiseContourIntegral': '\u2232', 'CloseCurlyDoubleQuote': '\u201D', 'CloseCurlyQuote': '\u2019', 'clubs': '\u2663', 'clubsuit': '\u2663', 'colon': ':', 'Colon': '\u2237', 'colone': '\u2254', 'Colone': '\u2A74', 'coloneq': '\u2254', 'comma': ',', 'commat': '@', 'comp': '\u2201', 'compfn': '\u2218', 'complement': '\u2201', 'complexes': '\u2102', 'cong': '\u2245', 'congdot': '\u2A6D', 'Congruent': '\u2261', 'conint': '\u222E', 'Conint': '\u222F', 'ContourIntegral': '\u222E', 'copf': '\uD835\uDD54', 'Copf': '\u2102', 'coprod': '\u2210', 'Coproduct': '\u2210', 'copy': '\xA9', 'COPY': '\xA9', 'copysr': '\u2117', 'CounterClockwiseContourIntegral': '\u2233', 'crarr': '\u21B5', 'cross': '\u2717', 'Cross': '\u2A2F', 'cscr': '\uD835\uDCB8', 'Cscr': '\uD835\uDC9E', 'csub': '\u2ACF', 'csube': '\u2AD1', 'csup': '\u2AD0', 'csupe': '\u2AD2', 'ctdot': '\u22EF', 'cudarrl': '\u2938', 'cudarrr': '\u2935', 'cuepr': '\u22DE', 'cuesc': '\u22DF', 'cularr': '\u21B6', 'cularrp': '\u293D', 'cup': '\u222A', 'Cup': '\u22D3', 'cupbrcap': '\u2A48', 'cupcap': '\u2A46', 'CupCap': '\u224D', 'cupcup': '\u2A4A', 'cupdot': '\u228D', 'cupor': '\u2A45', 'cups': '\u222A\uFE00', 'curarr': '\u21B7', 'curarrm': '\u293C', 'curlyeqprec': '\u22DE', 'curlyeqsucc': '\u22DF', 'curlyvee': '\u22CE', 'curlywedge': '\u22CF', 'curren': '\xA4', 'curvearrowleft': '\u21B6', 'curvearrowright': '\u21B7', 'cuvee': '\u22CE', 'cuwed': '\u22CF', 'cwconint': '\u2232', 'cwint': '\u2231', 'cylcty': '\u232D', 'dagger': '\u2020', 'Dagger': '\u2021', 'daleth': '\u2138', 'darr': '\u2193', 'dArr': '\u21D3', 'Darr': '\u21A1', 'dash': '\u2010', 'dashv': '\u22A3', 'Dashv': '\u2AE4', 'dbkarow': '\u290F', 'dblac': '\u02DD', 'dcaron': '\u010F', 'Dcaron': '\u010E', 'dcy': '\u0434', 'Dcy': '\u0414', 'dd': '\u2146', 'DD': '\u2145', 'ddagger': '\u2021', 'ddarr': '\u21CA', 'DDotrahd': '\u2911', 'ddotseq': '\u2A77', 'deg': '\xB0', 'Del': '\u2207', 'delta': '\u03B4', 'Delta': '\u0394', 'demptyv': '\u29B1', 'dfisht': '\u297F', 'dfr': '\uD835\uDD21', 'Dfr': '\uD835\uDD07', 'dHar': '\u2965', 'dharl': '\u21C3', 'dharr': '\u21C2', 'DiacriticalAcute': '\xB4', 'DiacriticalDot': '\u02D9', 'DiacriticalDoubleAcute': '\u02DD', 'DiacriticalGrave': '`', 'DiacriticalTilde': '\u02DC', 'diam': '\u22C4', 'diamond': '\u22C4', 'Diamond': '\u22C4', 'diamondsuit': '\u2666', 'diams': '\u2666', 'die': '\xA8', 'DifferentialD': '\u2146', 'digamma': '\u03DD', 'disin': '\u22F2', 'div': '\xF7', 'divide': '\xF7', 'divideontimes': '\u22C7', 'divonx': '\u22C7', 'djcy': '\u0452', 'DJcy': '\u0402', 'dlcorn': '\u231E', 'dlcrop': '\u230D', 'dollar': '$', 'dopf': '\uD835\uDD55', 'Dopf': '\uD835\uDD3B', 'dot': '\u02D9', 'Dot': '\xA8', 'DotDot': '\u20DC', 'doteq': '\u2250', 'doteqdot': '\u2251', 'DotEqual': '\u2250', 'dotminus': '\u2238', 'dotplus': '\u2214', 'dotsquare': '\u22A1', 'doublebarwedge': '\u2306', 'DoubleContourIntegral': '\u222F', 'DoubleDot': '\xA8', 'DoubleDownArrow': '\u21D3', 'DoubleLeftArrow': '\u21D0', 'DoubleLeftRightArrow': '\u21D4', 'DoubleLeftTee': '\u2AE4', 'DoubleLongLeftArrow': '\u27F8', 'DoubleLongLeftRightArrow': '\u27FA', 'DoubleLongRightArrow': '\u27F9', 'DoubleRightArrow': '\u21D2', 'DoubleRightTee': '\u22A8', 'DoubleUpArrow': '\u21D1', 'DoubleUpDownArrow': '\u21D5', 'DoubleVerticalBar': '\u2225', 'downarrow': '\u2193', 'Downarrow': '\u21D3', 'DownArrow': '\u2193', 'DownArrowBar': '\u2913', 'DownArrowUpArrow': '\u21F5', 'DownBreve': '\u0311', 'downdownarrows': '\u21CA', 'downharpoonleft': '\u21C3', 'downharpoonright': '\u21C2', 'DownLeftRightVector': '\u2950', 'DownLeftTeeVector': '\u295E', 'DownLeftVector': '\u21BD', 'DownLeftVectorBar': '\u2956', 'DownRightTeeVector': '\u295F', 'DownRightVector': '\u21C1', 'DownRightVectorBar': '\u2957', 'DownTee': '\u22A4', 'DownTeeArrow': '\u21A7', 'drbkarow': '\u2910', 'drcorn': '\u231F', 'drcrop': '\u230C', 'dscr': '\uD835\uDCB9', 'Dscr': '\uD835\uDC9F', 'dscy': '\u0455', 'DScy': '\u0405', 'dsol': '\u29F6', 'dstrok': '\u0111', 'Dstrok': '\u0110', 'dtdot': '\u22F1', 'dtri': '\u25BF', 'dtrif': '\u25BE', 'duarr': '\u21F5', 'duhar': '\u296F', 'dwangle': '\u29A6', 'dzcy': '\u045F', 'DZcy': '\u040F', 'dzigrarr': '\u27FF', 'eacute': '\xE9', 'Eacute': '\xC9', 'easter': '\u2A6E', 'ecaron': '\u011B', 'Ecaron': '\u011A', 'ecir': '\u2256', 'ecirc': '\xEA', 'Ecirc': '\xCA', 'ecolon': '\u2255', 'ecy': '\u044D', 'Ecy': '\u042D', 'eDDot': '\u2A77', 'edot': '\u0117', 'eDot': '\u2251', 'Edot': '\u0116', 'ee': '\u2147', 'efDot': '\u2252', 'efr': '\uD835\uDD22', 'Efr': '\uD835\uDD08', 'eg': '\u2A9A', 'egrave': '\xE8', 'Egrave': '\xC8', 'egs': '\u2A96', 'egsdot': '\u2A98', 'el': '\u2A99', 'Element': '\u2208', 'elinters': '\u23E7', 'ell': '\u2113', 'els': '\u2A95', 'elsdot': '\u2A97', 'emacr': '\u0113', 'Emacr': '\u0112', 'empty': '\u2205', 'emptyset': '\u2205', 'EmptySmallSquare': '\u25FB', 'emptyv': '\u2205', 'EmptyVerySmallSquare': '\u25AB', 'emsp': '\u2003', 'emsp13': '\u2004', 'emsp14': '\u2005', 'eng': '\u014B', 'ENG': '\u014A', 'ensp': '\u2002', 'eogon': '\u0119', 'Eogon': '\u0118', 'eopf': '\uD835\uDD56', 'Eopf': '\uD835\uDD3C', 'epar': '\u22D5', 'eparsl': '\u29E3', 'eplus': '\u2A71', 'epsi': '\u03B5', 'epsilon': '\u03B5', 'Epsilon': '\u0395', 'epsiv': '\u03F5', 'eqcirc': '\u2256', 'eqcolon': '\u2255', 'eqsim': '\u2242', 'eqslantgtr': '\u2A96', 'eqslantless': '\u2A95', 'Equal': '\u2A75', 'equals': '=', 'EqualTilde': '\u2242', 'equest': '\u225F', 'Equilibrium': '\u21CC', 'equiv': '\u2261', 'equivDD': '\u2A78', 'eqvparsl': '\u29E5', 'erarr': '\u2971', 'erDot': '\u2253', 'escr': '\u212F', 'Escr': '\u2130', 'esdot': '\u2250', 'esim': '\u2242', 'Esim': '\u2A73', 'eta': '\u03B7', 'Eta': '\u0397', 'eth': '\xF0', 'ETH': '\xD0', 'euml': '\xEB', 'Euml': '\xCB', 'euro': '\u20AC', 'excl': '!', 'exist': '\u2203', 'Exists': '\u2203', 'expectation': '\u2130', 'exponentiale': '\u2147', 'ExponentialE': '\u2147', 'fallingdotseq': '\u2252', 'fcy': '\u0444', 'Fcy': '\u0424', 'female': '\u2640', 'ffilig': '\uFB03', 'fflig': '\uFB00', 'ffllig': '\uFB04', 'ffr': '\uD835\uDD23', 'Ffr': '\uD835\uDD09', 'filig': '\uFB01', 'FilledSmallSquare': '\u25FC', 'FilledVerySmallSquare': '\u25AA', 'fjlig': 'fj', 'flat': '\u266D', 'fllig': '\uFB02', 'fltns': '\u25B1', 'fnof': '\u0192', 'fopf': '\uD835\uDD57', 'Fopf': '\uD835\uDD3D', 'forall': '\u2200', 'ForAll': '\u2200', 'fork': '\u22D4', 'forkv': '\u2AD9', 'Fouriertrf': '\u2131', 'fpartint': '\u2A0D', 'frac12': '\xBD', 'frac13': '\u2153', 'frac14': '\xBC', 'frac15': '\u2155', 'frac16': '\u2159', 'frac18': '\u215B', 'frac23': '\u2154', 'frac25': '\u2156', 'frac34': '\xBE', 'frac35': '\u2157', 'frac38': '\u215C', 'frac45': '\u2158', 'frac56': '\u215A', 'frac58': '\u215D', 'frac78': '\u215E', 'frasl': '\u2044', 'frown': '\u2322', 'fscr': '\uD835\uDCBB', 'Fscr': '\u2131', 'gacute': '\u01F5', 'gamma': '\u03B3', 'Gamma': '\u0393', 'gammad': '\u03DD', 'Gammad': '\u03DC', 'gap': '\u2A86', 'gbreve': '\u011F', 'Gbreve': '\u011E', 'Gcedil': '\u0122', 'gcirc': '\u011D', 'Gcirc': '\u011C', 'gcy': '\u0433', 'Gcy': '\u0413', 'gdot': '\u0121', 'Gdot': '\u0120', 'ge': '\u2265', 'gE': '\u2267', 'gel': '\u22DB', 'gEl': '\u2A8C', 'geq': '\u2265', 'geqq': '\u2267', 'geqslant': '\u2A7E', 'ges': '\u2A7E', 'gescc': '\u2AA9', 'gesdot': '\u2A80', 'gesdoto': '\u2A82', 'gesdotol': '\u2A84', 'gesl': '\u22DB\uFE00', 'gesles': '\u2A94', 'gfr': '\uD835\uDD24', 'Gfr': '\uD835\uDD0A', 'gg': '\u226B', 'Gg': '\u22D9', 'ggg': '\u22D9', 'gimel': '\u2137', 'gjcy': '\u0453', 'GJcy': '\u0403', 'gl': '\u2277', 'gla': '\u2AA5', 'glE': '\u2A92', 'glj': '\u2AA4', 'gnap': '\u2A8A', 'gnapprox': '\u2A8A', 'gne': '\u2A88', 'gnE': '\u2269', 'gneq': '\u2A88', 'gneqq': '\u2269', 'gnsim': '\u22E7', 'gopf': '\uD835\uDD58', 'Gopf': '\uD835\uDD3E', 'grave': '`', 'GreaterEqual': '\u2265', 'GreaterEqualLess': '\u22DB', 'GreaterFullEqual': '\u2267', 'GreaterGreater': '\u2AA2', 'GreaterLess': '\u2277', 'GreaterSlantEqual': '\u2A7E', 'GreaterTilde': '\u2273', 'gscr': '\u210A', 'Gscr': '\uD835\uDCA2', 'gsim': '\u2273', 'gsime': '\u2A8E', 'gsiml': '\u2A90', 'gt': '>', 'Gt': '\u226B', 'GT': '>', 'gtcc': '\u2AA7', 'gtcir': '\u2A7A', 'gtdot': '\u22D7', 'gtlPar': '\u2995', 'gtquest': '\u2A7C', 'gtrapprox': '\u2A86', 'gtrarr': '\u2978', 'gtrdot': '\u22D7', 'gtreqless': '\u22DB', 'gtreqqless': '\u2A8C', 'gtrless': '\u2277', 'gtrsim': '\u2273', 'gvertneqq': '\u2269\uFE00', 'gvnE': '\u2269\uFE00', 'Hacek': '\u02C7', 'hairsp': '\u200A', 'half': '\xBD', 'hamilt': '\u210B', 'hardcy': '\u044A', 'HARDcy': '\u042A', 'harr': '\u2194', 'hArr': '\u21D4', 'harrcir': '\u2948', 'harrw': '\u21AD', 'Hat': '^', 'hbar': '\u210F', 'hcirc': '\u0125', 'Hcirc': '\u0124', 'hearts': '\u2665', 'heartsuit': '\u2665', 'hellip': '\u2026', 'hercon': '\u22B9', 'hfr': '\uD835\uDD25', 'Hfr': '\u210C', 'HilbertSpace': '\u210B', 'hksearow': '\u2925', 'hkswarow': '\u2926', 'hoarr': '\u21FF', 'homtht': '\u223B', 'hookleftarrow': '\u21A9', 'hookrightarrow': '\u21AA', 'hopf': '\uD835\uDD59', 'Hopf': '\u210D', 'horbar': '\u2015', 'HorizontalLine': '\u2500', 'hscr': '\uD835\uDCBD', 'Hscr': '\u210B', 'hslash': '\u210F', 'hstrok': '\u0127', 'Hstrok': '\u0126', 'HumpDownHump': '\u224E', 'HumpEqual': '\u224F', 'hybull': '\u2043', 'hyphen': '\u2010', 'iacute': '\xED', 'Iacute': '\xCD', 'ic': '\u2063', 'icirc': '\xEE', 'Icirc': '\xCE', 'icy': '\u0438', 'Icy': '\u0418', 'Idot': '\u0130', 'iecy': '\u0435', 'IEcy': '\u0415', 'iexcl': '\xA1', 'iff': '\u21D4', 'ifr': '\uD835\uDD26', 'Ifr': '\u2111', 'igrave': '\xEC', 'Igrave': '\xCC', 'ii': '\u2148', 'iiiint': '\u2A0C', 'iiint': '\u222D', 'iinfin': '\u29DC', 'iiota': '\u2129', 'ijlig': '\u0133', 'IJlig': '\u0132', 'Im': '\u2111', 'imacr': '\u012B', 'Imacr': '\u012A', 'image': '\u2111', 'ImaginaryI': '\u2148', 'imagline': '\u2110', 'imagpart': '\u2111', 'imath': '\u0131', 'imof': '\u22B7', 'imped': '\u01B5', 'Implies': '\u21D2', 'in': '\u2208', 'incare': '\u2105', 'infin': '\u221E', 'infintie': '\u29DD', 'inodot': '\u0131', 'int': '\u222B', 'Int': '\u222C', 'intcal': '\u22BA', 'integers': '\u2124', 'Integral': '\u222B', 'intercal': '\u22BA', 'Intersection': '\u22C2', 'intlarhk': '\u2A17', 'intprod': '\u2A3C', 'InvisibleComma': '\u2063', 'InvisibleTimes': '\u2062', 'iocy': '\u0451', 'IOcy': '\u0401', 'iogon': '\u012F', 'Iogon': '\u012E', 'iopf': '\uD835\uDD5A', 'Iopf': '\uD835\uDD40', 'iota': '\u03B9', 'Iota': '\u0399', 'iprod': '\u2A3C', 'iquest': '\xBF', 'iscr': '\uD835\uDCBE', 'Iscr': '\u2110', 'isin': '\u2208', 'isindot': '\u22F5', 'isinE': '\u22F9', 'isins': '\u22F4', 'isinsv': '\u22F3', 'isinv': '\u2208', 'it': '\u2062', 'itilde': '\u0129', 'Itilde': '\u0128', 'iukcy': '\u0456', 'Iukcy': '\u0406', 'iuml': '\xEF', 'Iuml': '\xCF', 'jcirc': '\u0135', 'Jcirc': '\u0134', 'jcy': '\u0439', 'Jcy': '\u0419', 'jfr': '\uD835\uDD27', 'Jfr': '\uD835\uDD0D', 'jmath': '\u0237', 'jopf': '\uD835\uDD5B', 'Jopf': '\uD835\uDD41', 'jscr': '\uD835\uDCBF', 'Jscr': '\uD835\uDCA5', 'jsercy': '\u0458', 'Jsercy': '\u0408', 'jukcy': '\u0454', 'Jukcy': '\u0404', 'kappa': '\u03BA', 'Kappa': '\u039A', 'kappav': '\u03F0', 'kcedil': '\u0137', 'Kcedil': '\u0136', 'kcy': '\u043A', 'Kcy': '\u041A', 'kfr': '\uD835\uDD28', 'Kfr': '\uD835\uDD0E', 'kgreen': '\u0138', 'khcy': '\u0445', 'KHcy': '\u0425', 'kjcy': '\u045C', 'KJcy': '\u040C', 'kopf': '\uD835\uDD5C', 'Kopf': '\uD835\uDD42', 'kscr': '\uD835\uDCC0', 'Kscr': '\uD835\uDCA6', 'lAarr': '\u21DA', 'lacute': '\u013A', 'Lacute': '\u0139', 'laemptyv': '\u29B4', 'lagran': '\u2112', 'lambda': '\u03BB', 'Lambda': '\u039B', 'lang': '\u27E8', 'Lang': '\u27EA', 'langd': '\u2991', 'langle': '\u27E8', 'lap': '\u2A85', 'Laplacetrf': '\u2112', 'laquo': '\xAB', 'larr': '\u2190', 'lArr': '\u21D0', 'Larr': '\u219E', 'larrb': '\u21E4', 'larrbfs': '\u291F', 'larrfs': '\u291D', 'larrhk': '\u21A9', 'larrlp': '\u21AB', 'larrpl': '\u2939', 'larrsim': '\u2973', 'larrtl': '\u21A2', 'lat': '\u2AAB', 'latail': '\u2919', 'lAtail': '\u291B', 'late': '\u2AAD', 'lates': '\u2AAD\uFE00', 'lbarr': '\u290C', 'lBarr': '\u290E', 'lbbrk': '\u2772', 'lbrace': '{', 'lbrack': '[', 'lbrke': '\u298B', 'lbrksld': '\u298F', 'lbrkslu': '\u298D', 'lcaron': '\u013E', 'Lcaron': '\u013D', 'lcedil': '\u013C', 'Lcedil': '\u013B', 'lceil': '\u2308', 'lcub': '{', 'lcy': '\u043B', 'Lcy': '\u041B', 'ldca': '\u2936', 'ldquo': '\u201C', 'ldquor': '\u201E', 'ldrdhar': '\u2967', 'ldrushar': '\u294B', 'ldsh': '\u21B2', 'le': '\u2264', 'lE': '\u2266', 'LeftAngleBracket': '\u27E8', 'leftarrow': '\u2190', 'Leftarrow': '\u21D0', 'LeftArrow': '\u2190', 'LeftArrowBar': '\u21E4', 'LeftArrowRightArrow': '\u21C6', 'leftarrowtail': '\u21A2', 'LeftCeiling': '\u2308', 'LeftDoubleBracket': '\u27E6', 'LeftDownTeeVector': '\u2961', 'LeftDownVector': '\u21C3', 'LeftDownVectorBar': '\u2959', 'LeftFloor': '\u230A', 'leftharpoondown': '\u21BD', 'leftharpoonup': '\u21BC', 'leftleftarrows': '\u21C7', 'leftrightarrow': '\u2194', 'Leftrightarrow': '\u21D4', 'LeftRightArrow': '\u2194', 'leftrightarrows': '\u21C6', 'leftrightharpoons': '\u21CB', 'leftrightsquigarrow': '\u21AD', 'LeftRightVector': '\u294E', 'LeftTee': '\u22A3', 'LeftTeeArrow': '\u21A4', 'LeftTeeVector': '\u295A', 'leftthreetimes': '\u22CB', 'LeftTriangle': '\u22B2', 'LeftTriangleBar': '\u29CF', 'LeftTriangleEqual': '\u22B4', 'LeftUpDownVector': '\u2951', 'LeftUpTeeVector': '\u2960', 'LeftUpVector': '\u21BF', 'LeftUpVectorBar': '\u2958', 'LeftVector': '\u21BC', 'LeftVectorBar': '\u2952', 'leg': '\u22DA', 'lEg': '\u2A8B', 'leq': '\u2264', 'leqq': '\u2266', 'leqslant': '\u2A7D', 'les': '\u2A7D', 'lescc': '\u2AA8', 'lesdot': '\u2A7F', 'lesdoto': '\u2A81', 'lesdotor': '\u2A83', 'lesg': '\u22DA\uFE00', 'lesges': '\u2A93', 'lessapprox': '\u2A85', 'lessdot': '\u22D6', 'lesseqgtr': '\u22DA', 'lesseqqgtr': '\u2A8B', 'LessEqualGreater': '\u22DA', 'LessFullEqual': '\u2266', 'LessGreater': '\u2276', 'lessgtr': '\u2276', 'LessLess': '\u2AA1', 'lesssim': '\u2272', 'LessSlantEqual': '\u2A7D', 'LessTilde': '\u2272', 'lfisht': '\u297C', 'lfloor': '\u230A', 'lfr': '\uD835\uDD29', 'Lfr': '\uD835\uDD0F', 'lg': '\u2276', 'lgE': '\u2A91', 'lHar': '\u2962', 'lhard': '\u21BD', 'lharu': '\u21BC', 'lharul': '\u296A', 'lhblk': '\u2584', 'ljcy': '\u0459', 'LJcy': '\u0409', 'll': '\u226A', 'Ll': '\u22D8', 'llarr': '\u21C7', 'llcorner': '\u231E', 'Lleftarrow': '\u21DA', 'llhard': '\u296B', 'lltri': '\u25FA', 'lmidot': '\u0140', 'Lmidot': '\u013F', 'lmoust': '\u23B0', 'lmoustache': '\u23B0', 'lnap': '\u2A89', 'lnapprox': '\u2A89', 'lne': '\u2A87', 'lnE': '\u2268', 'lneq': '\u2A87', 'lneqq': '\u2268', 'lnsim': '\u22E6', 'loang': '\u27EC', 'loarr': '\u21FD', 'lobrk': '\u27E6', 'longleftarrow': '\u27F5', 'Longleftarrow': '\u27F8', 'LongLeftArrow': '\u27F5', 'longleftrightarrow': '\u27F7', 'Longleftrightarrow': '\u27FA', 'LongLeftRightArrow': '\u27F7', 'longmapsto': '\u27FC', 'longrightarrow': '\u27F6', 'Longrightarrow': '\u27F9', 'LongRightArrow': '\u27F6', 'looparrowleft': '\u21AB', 'looparrowright': '\u21AC', 'lopar': '\u2985', 'lopf': '\uD835\uDD5D', 'Lopf': '\uD835\uDD43', 'loplus': '\u2A2D', 'lotimes': '\u2A34', 'lowast': '\u2217', 'lowbar': '_', 'LowerLeftArrow': '\u2199', 'LowerRightArrow': '\u2198', 'loz': '\u25CA', 'lozenge': '\u25CA', 'lozf': '\u29EB', 'lpar': '(', 'lparlt': '\u2993', 'lrarr': '\u21C6', 'lrcorner': '\u231F', 'lrhar': '\u21CB', 'lrhard': '\u296D', 'lrm': '\u200E', 'lrtri': '\u22BF', 'lsaquo': '\u2039', 'lscr': '\uD835\uDCC1', 'Lscr': '\u2112', 'lsh': '\u21B0', 'Lsh': '\u21B0', 'lsim': '\u2272', 'lsime': '\u2A8D', 'lsimg': '\u2A8F', 'lsqb': '[', 'lsquo': '\u2018', 'lsquor': '\u201A', 'lstrok': '\u0142', 'Lstrok': '\u0141', 'lt': '<', 'Lt': '\u226A', 'LT': '<', 'ltcc': '\u2AA6', 'ltcir': '\u2A79', 'ltdot': '\u22D6', 'lthree': '\u22CB', 'ltimes': '\u22C9', 'ltlarr': '\u2976', 'ltquest': '\u2A7B', 'ltri': '\u25C3', 'ltrie': '\u22B4', 'ltrif': '\u25C2', 'ltrPar': '\u2996', 'lurdshar': '\u294A', 'luruhar': '\u2966', 'lvertneqq': '\u2268\uFE00', 'lvnE': '\u2268\uFE00', 'macr': '\xAF', 'male': '\u2642', 'malt': '\u2720', 'maltese': '\u2720', 'map': '\u21A6', 'Map': '\u2905', 'mapsto': '\u21A6', 'mapstodown': '\u21A7', 'mapstoleft': '\u21A4', 'mapstoup': '\u21A5', 'marker': '\u25AE', 'mcomma': '\u2A29', 'mcy': '\u043C', 'Mcy': '\u041C', 'mdash': '\u2014', 'mDDot': '\u223A', 'measuredangle': '\u2221', 'MediumSpace': '\u205F', 'Mellintrf': '\u2133', 'mfr': '\uD835\uDD2A', 'Mfr': '\uD835\uDD10', 'mho': '\u2127', 'micro': '\xB5', 'mid': '\u2223', 'midast': '*', 'midcir': '\u2AF0', 'middot': '\xB7', 'minus': '\u2212', 'minusb': '\u229F', 'minusd': '\u2238', 'minusdu': '\u2A2A', 'MinusPlus': '\u2213', 'mlcp': '\u2ADB', 'mldr': '\u2026', 'mnplus': '\u2213', 'models': '\u22A7', 'mopf': '\uD835\uDD5E', 'Mopf': '\uD835\uDD44', 'mp': '\u2213', 'mscr': '\uD835\uDCC2', 'Mscr': '\u2133', 'mstpos': '\u223E', 'mu': '\u03BC', 'Mu': '\u039C', 'multimap': '\u22B8', 'mumap': '\u22B8', 'nabla': '\u2207', 'nacute': '\u0144', 'Nacute': '\u0143', 'nang': '\u2220\u20D2', 'nap': '\u2249', 'napE': '\u2A70\u0338', 'napid': '\u224B\u0338', 'napos': '\u0149', 'napprox': '\u2249', 'natur': '\u266E', 'natural': '\u266E', 'naturals': '\u2115', 'nbsp': '\xA0', 'nbump': '\u224E\u0338', 'nbumpe': '\u224F\u0338', 'ncap': '\u2A43', 'ncaron': '\u0148', 'Ncaron': '\u0147', 'ncedil': '\u0146', 'Ncedil': '\u0145', 'ncong': '\u2247', 'ncongdot': '\u2A6D\u0338', 'ncup': '\u2A42', 'ncy': '\u043D', 'Ncy': '\u041D', 'ndash': '\u2013', 'ne': '\u2260', 'nearhk': '\u2924', 'nearr': '\u2197', 'neArr': '\u21D7', 'nearrow': '\u2197', 'nedot': '\u2250\u0338', 'NegativeMediumSpace': '\u200B', 'NegativeThickSpace': '\u200B', 'NegativeThinSpace': '\u200B', 'NegativeVeryThinSpace': '\u200B', 'nequiv': '\u2262', 'nesear': '\u2928', 'nesim': '\u2242\u0338', 'NestedGreaterGreater': '\u226B', 'NestedLessLess': '\u226A', 'NewLine': '\n', 'nexist': '\u2204', 'nexists': '\u2204', 'nfr': '\uD835\uDD2B', 'Nfr': '\uD835\uDD11', 'nge': '\u2271', 'ngE': '\u2267\u0338', 'ngeq': '\u2271', 'ngeqq': '\u2267\u0338', 'ngeqslant': '\u2A7E\u0338', 'nges': '\u2A7E\u0338', 'nGg': '\u22D9\u0338', 'ngsim': '\u2275', 'ngt': '\u226F', 'nGt': '\u226B\u20D2', 'ngtr': '\u226F', 'nGtv': '\u226B\u0338', 'nharr': '\u21AE', 'nhArr': '\u21CE', 'nhpar': '\u2AF2', 'ni': '\u220B', 'nis': '\u22FC', 'nisd': '\u22FA', 'niv': '\u220B', 'njcy': '\u045A', 'NJcy': '\u040A', 'nlarr': '\u219A', 'nlArr': '\u21CD', 'nldr': '\u2025', 'nle': '\u2270', 'nlE': '\u2266\u0338', 'nleftarrow': '\u219A', 'nLeftarrow': '\u21CD', 'nleftrightarrow': '\u21AE', 'nLeftrightarrow': '\u21CE', 'nleq': '\u2270', 'nleqq': '\u2266\u0338', 'nleqslant': '\u2A7D\u0338', 'nles': '\u2A7D\u0338', 'nless': '\u226E', 'nLl': '\u22D8\u0338', 'nlsim': '\u2274', 'nlt': '\u226E', 'nLt': '\u226A\u20D2', 'nltri': '\u22EA', 'nltrie': '\u22EC', 'nLtv': '\u226A\u0338', 'nmid': '\u2224', 'NoBreak': '\u2060', 'NonBreakingSpace': '\xA0', 'nopf': '\uD835\uDD5F', 'Nopf': '\u2115', 'not': '\xAC', 'Not': '\u2AEC', 'NotCongruent': '\u2262', 'NotCupCap': '\u226D', 'NotDoubleVerticalBar': '\u2226', 'NotElement': '\u2209', 'NotEqual': '\u2260', 'NotEqualTilde': '\u2242\u0338', 'NotExists': '\u2204', 'NotGreater': '\u226F', 'NotGreaterEqual': '\u2271', 'NotGreaterFullEqual': '\u2267\u0338', 'NotGreaterGreater': '\u226B\u0338', 'NotGreaterLess': '\u2279', 'NotGreaterSlantEqual': '\u2A7E\u0338', 'NotGreaterTilde': '\u2275', 'NotHumpDownHump': '\u224E\u0338', 'NotHumpEqual': '\u224F\u0338', 'notin': '\u2209', 'notindot': '\u22F5\u0338', 'notinE': '\u22F9\u0338', 'notinva': '\u2209', 'notinvb': '\u22F7', 'notinvc': '\u22F6', 'NotLeftTriangle': '\u22EA', 'NotLeftTriangleBar': '\u29CF\u0338', 'NotLeftTriangleEqual': '\u22EC', 'NotLess': '\u226E', 'NotLessEqual': '\u2270', 'NotLessGreater': '\u2278', 'NotLessLess': '\u226A\u0338', 'NotLessSlantEqual': '\u2A7D\u0338', 'NotLessTilde': '\u2274', 'NotNestedGreaterGreater': '\u2AA2\u0338', 'NotNestedLessLess': '\u2AA1\u0338', 'notni': '\u220C', 'notniva': '\u220C', 'notnivb': '\u22FE', 'notnivc': '\u22FD', 'NotPrecedes': '\u2280', 'NotPrecedesEqual': '\u2AAF\u0338', 'NotPrecedesSlantEqual': '\u22E0', 'NotReverseElement': '\u220C', 'NotRightTriangle': '\u22EB', 'NotRightTriangleBar': '\u29D0\u0338', 'NotRightTriangleEqual': '\u22ED', 'NotSquareSubset': '\u228F\u0338', 'NotSquareSubsetEqual': '\u22E2', 'NotSquareSuperset': '\u2290\u0338', 'NotSquareSupersetEqual': '\u22E3', 'NotSubset': '\u2282\u20D2', 'NotSubsetEqual': '\u2288', 'NotSucceeds': '\u2281', 'NotSucceedsEqual': '\u2AB0\u0338', 'NotSucceedsSlantEqual': '\u22E1', 'NotSucceedsTilde': '\u227F\u0338', 'NotSuperset': '\u2283\u20D2', 'NotSupersetEqual': '\u2289', 'NotTilde': '\u2241', 'NotTildeEqual': '\u2244', 'NotTildeFullEqual': '\u2247', 'NotTildeTilde': '\u2249', 'NotVerticalBar': '\u2224', 'npar': '\u2226', 'nparallel': '\u2226', 'nparsl': '\u2AFD\u20E5', 'npart': '\u2202\u0338', 'npolint': '\u2A14', 'npr': '\u2280', 'nprcue': '\u22E0', 'npre': '\u2AAF\u0338', 'nprec': '\u2280', 'npreceq': '\u2AAF\u0338', 'nrarr': '\u219B', 'nrArr': '\u21CF', 'nrarrc': '\u2933\u0338', 'nrarrw': '\u219D\u0338', 'nrightarrow': '\u219B', 'nRightarrow': '\u21CF', 'nrtri': '\u22EB', 'nrtrie': '\u22ED', 'nsc': '\u2281', 'nsccue': '\u22E1', 'nsce': '\u2AB0\u0338', 'nscr': '\uD835\uDCC3', 'Nscr': '\uD835\uDCA9', 'nshortmid': '\u2224', 'nshortparallel': '\u2226', 'nsim': '\u2241', 'nsime': '\u2244', 'nsimeq': '\u2244', 'nsmid': '\u2224', 'nspar': '\u2226', 'nsqsube': '\u22E2', 'nsqsupe': '\u22E3', 'nsub': '\u2284', 'nsube': '\u2288', 'nsubE': '\u2AC5\u0338', 'nsubset': '\u2282\u20D2', 'nsubseteq': '\u2288', 'nsubseteqq': '\u2AC5\u0338', 'nsucc': '\u2281', 'nsucceq': '\u2AB0\u0338', 'nsup': '\u2285', 'nsupe': '\u2289', 'nsupE': '\u2AC6\u0338', 'nsupset': '\u2283\u20D2', 'nsupseteq': '\u2289', 'nsupseteqq': '\u2AC6\u0338', 'ntgl': '\u2279', 'ntilde': '\xF1', 'Ntilde': '\xD1', 'ntlg': '\u2278', 'ntriangleleft': '\u22EA', 'ntrianglelefteq': '\u22EC', 'ntriangleright': '\u22EB', 'ntrianglerighteq': '\u22ED', 'nu': '\u03BD', 'Nu': '\u039D', 'num': '#', 'numero': '\u2116', 'numsp': '\u2007', 'nvap': '\u224D\u20D2', 'nvdash': '\u22AC', 'nvDash': '\u22AD', 'nVdash': '\u22AE', 'nVDash': '\u22AF', 'nvge': '\u2265\u20D2', 'nvgt': '>\u20D2', 'nvHarr': '\u2904', 'nvinfin': '\u29DE', 'nvlArr': '\u2902', 'nvle': '\u2264\u20D2', 'nvlt': '<\u20D2', 'nvltrie': '\u22B4\u20D2', 'nvrArr': '\u2903', 'nvrtrie': '\u22B5\u20D2', 'nvsim': '\u223C\u20D2', 'nwarhk': '\u2923', 'nwarr': '\u2196', 'nwArr': '\u21D6', 'nwarrow': '\u2196', 'nwnear': '\u2927', 'oacute': '\xF3', 'Oacute': '\xD3', 'oast': '\u229B', 'ocir': '\u229A', 'ocirc': '\xF4', 'Ocirc': '\xD4', 'ocy': '\u043E', 'Ocy': '\u041E', 'odash': '\u229D', 'odblac': '\u0151', 'Odblac': '\u0150', 'odiv': '\u2A38', 'odot': '\u2299', 'odsold': '\u29BC', 'oelig': '\u0153', 'OElig': '\u0152', 'ofcir': '\u29BF', 'ofr': '\uD835\uDD2C', 'Ofr': '\uD835\uDD12', 'ogon': '\u02DB', 'ograve': '\xF2', 'Ograve': '\xD2', 'ogt': '\u29C1', 'ohbar': '\u29B5', 'ohm': '\u03A9', 'oint': '\u222E', 'olarr': '\u21BA', 'olcir': '\u29BE', 'olcross': '\u29BB', 'oline': '\u203E', 'olt': '\u29C0', 'omacr': '\u014D', 'Omacr': '\u014C', 'omega': '\u03C9', 'Omega': '\u03A9', 'omicron': '\u03BF', 'Omicron': '\u039F', 'omid': '\u29B6', 'ominus': '\u2296', 'oopf': '\uD835\uDD60', 'Oopf': '\uD835\uDD46', 'opar': '\u29B7', 'OpenCurlyDoubleQuote': '\u201C', 'OpenCurlyQuote': '\u2018', 'operp': '\u29B9', 'oplus': '\u2295', 'or': '\u2228', 'Or': '\u2A54', 'orarr': '\u21BB', 'ord': '\u2A5D', 'order': '\u2134', 'orderof': '\u2134', 'ordf': '\xAA', 'ordm': '\xBA', 'origof': '\u22B6', 'oror': '\u2A56', 'orslope': '\u2A57', 'orv': '\u2A5B', 'oS': '\u24C8', 'oscr': '\u2134', 'Oscr': '\uD835\uDCAA', 'oslash': '\xF8', 'Oslash': '\xD8', 'osol': '\u2298', 'otilde': '\xF5', 'Otilde': '\xD5', 'otimes': '\u2297', 'Otimes': '\u2A37', 'otimesas': '\u2A36', 'ouml': '\xF6', 'Ouml': '\xD6', 'ovbar': '\u233D', 'OverBar': '\u203E', 'OverBrace': '\u23DE', 'OverBracket': '\u23B4', 'OverParenthesis': '\u23DC', 'par': '\u2225', 'para': '\xB6', 'parallel': '\u2225', 'parsim': '\u2AF3', 'parsl': '\u2AFD', 'part': '\u2202', 'PartialD': '\u2202', 'pcy': '\u043F', 'Pcy': '\u041F', 'percnt': '%', 'period': '.', 'permil': '\u2030', 'perp': '\u22A5', 'pertenk': '\u2031', 'pfr': '\uD835\uDD2D', 'Pfr': '\uD835\uDD13', 'phi': '\u03C6', 'Phi': '\u03A6', 'phiv': '\u03D5', 'phmmat': '\u2133', 'phone': '\u260E', 'pi': '\u03C0', 'Pi': '\u03A0', 'pitchfork': '\u22D4', 'piv': '\u03D6', 'planck': '\u210F', 'planckh': '\u210E', 'plankv': '\u210F', 'plus': '+', 'plusacir': '\u2A23', 'plusb': '\u229E', 'pluscir': '\u2A22', 'plusdo': '\u2214', 'plusdu': '\u2A25', 'pluse': '\u2A72', 'PlusMinus': '\xB1', 'plusmn': '\xB1', 'plussim': '\u2A26', 'plustwo': '\u2A27', 'pm': '\xB1', 'Poincareplane': '\u210C', 'pointint': '\u2A15', 'popf': '\uD835\uDD61', 'Popf': '\u2119', 'pound': '\xA3', 'pr': '\u227A', 'Pr': '\u2ABB', 'prap': '\u2AB7', 'prcue': '\u227C', 'pre': '\u2AAF', 'prE': '\u2AB3', 'prec': '\u227A', 'precapprox': '\u2AB7', 'preccurlyeq': '\u227C', 'Precedes': '\u227A', 'PrecedesEqual': '\u2AAF', 'PrecedesSlantEqual': '\u227C', 'PrecedesTilde': '\u227E', 'preceq': '\u2AAF', 'precnapprox': '\u2AB9', 'precneqq': '\u2AB5', 'precnsim': '\u22E8', 'precsim': '\u227E', 'prime': '\u2032', 'Prime': '\u2033', 'primes': '\u2119', 'prnap': '\u2AB9', 'prnE': '\u2AB5', 'prnsim': '\u22E8', 'prod': '\u220F', 'Product': '\u220F', 'profalar': '\u232E', 'profline': '\u2312', 'profsurf': '\u2313', 'prop': '\u221D', 'Proportion': '\u2237', 'Proportional': '\u221D', 'propto': '\u221D', 'prsim': '\u227E', 'prurel': '\u22B0', 'pscr': '\uD835\uDCC5', 'Pscr': '\uD835\uDCAB', 'psi': '\u03C8', 'Psi': '\u03A8', 'puncsp': '\u2008', 'qfr': '\uD835\uDD2E', 'Qfr': '\uD835\uDD14', 'qint': '\u2A0C', 'qopf': '\uD835\uDD62', 'Qopf': '\u211A', 'qprime': '\u2057', 'qscr': '\uD835\uDCC6', 'Qscr': '\uD835\uDCAC', 'quaternions': '\u210D', 'quatint': '\u2A16', 'quest': '?', 'questeq': '\u225F', 'quot': '"', 'QUOT': '"', 'rAarr': '\u21DB', 'race': '\u223D\u0331', 'racute': '\u0155', 'Racute': '\u0154', 'radic': '\u221A', 'raemptyv': '\u29B3', 'rang': '\u27E9', 'Rang': '\u27EB', 'rangd': '\u2992', 'range': '\u29A5', 'rangle': '\u27E9', 'raquo': '\xBB', 'rarr': '\u2192', 'rArr': '\u21D2', 'Rarr': '\u21A0', 'rarrap': '\u2975', 'rarrb': '\u21E5', 'rarrbfs': '\u2920', 'rarrc': '\u2933', 'rarrfs': '\u291E', 'rarrhk': '\u21AA', 'rarrlp': '\u21AC', 'rarrpl': '\u2945', 'rarrsim': '\u2974', 'rarrtl': '\u21A3', 'Rarrtl': '\u2916', 'rarrw': '\u219D', 'ratail': '\u291A', 'rAtail': '\u291C', 'ratio': '\u2236', 'rationals': '\u211A', 'rbarr': '\u290D', 'rBarr': '\u290F', 'RBarr': '\u2910', 'rbbrk': '\u2773', 'rbrace': '}', 'rbrack': ']', 'rbrke': '\u298C', 'rbrksld': '\u298E', 'rbrkslu': '\u2990', 'rcaron': '\u0159', 'Rcaron': '\u0158', 'rcedil': '\u0157', 'Rcedil': '\u0156', 'rceil': '\u2309', 'rcub': '}', 'rcy': '\u0440', 'Rcy': '\u0420', 'rdca': '\u2937', 'rdldhar': '\u2969', 'rdquo': '\u201D', 'rdquor': '\u201D', 'rdsh': '\u21B3', 'Re': '\u211C', 'real': '\u211C', 'realine': '\u211B', 'realpart': '\u211C', 'reals': '\u211D', 'rect': '\u25AD', 'reg': '\xAE', 'REG': '\xAE', 'ReverseElement': '\u220B', 'ReverseEquilibrium': '\u21CB', 'ReverseUpEquilibrium': '\u296F', 'rfisht': '\u297D', 'rfloor': '\u230B', 'rfr': '\uD835\uDD2F', 'Rfr': '\u211C', 'rHar': '\u2964', 'rhard': '\u21C1', 'rharu': '\u21C0', 'rharul': '\u296C', 'rho': '\u03C1', 'Rho': '\u03A1', 'rhov': '\u03F1', 'RightAngleBracket': '\u27E9', 'rightarrow': '\u2192', 'Rightarrow': '\u21D2', 'RightArrow': '\u2192', 'RightArrowBar': '\u21E5', 'RightArrowLeftArrow': '\u21C4', 'rightarrowtail': '\u21A3', 'RightCeiling': '\u2309', 'RightDoubleBracket': '\u27E7', 'RightDownTeeVector': '\u295D', 'RightDownVector': '\u21C2', 'RightDownVectorBar': '\u2955', 'RightFloor': '\u230B', 'rightharpoondown': '\u21C1', 'rightharpoonup': '\u21C0', 'rightleftarrows': '\u21C4', 'rightleftharpoons': '\u21CC', 'rightrightarrows': '\u21C9', 'rightsquigarrow': '\u219D', 'RightTee': '\u22A2', 'RightTeeArrow': '\u21A6', 'RightTeeVector': '\u295B', 'rightthreetimes': '\u22CC', 'RightTriangle': '\u22B3', 'RightTriangleBar': '\u29D0', 'RightTriangleEqual': '\u22B5', 'RightUpDownVector': '\u294F', 'RightUpTeeVector': '\u295C', 'RightUpVector': '\u21BE', 'RightUpVectorBar': '\u2954', 'RightVector': '\u21C0', 'RightVectorBar': '\u2953', 'ring': '\u02DA', 'risingdotseq': '\u2253', 'rlarr': '\u21C4', 'rlhar': '\u21CC', 'rlm': '\u200F', 'rmoust': '\u23B1', 'rmoustache': '\u23B1', 'rnmid': '\u2AEE', 'roang': '\u27ED', 'roarr': '\u21FE', 'robrk': '\u27E7', 'ropar': '\u2986', 'ropf': '\uD835\uDD63', 'Ropf': '\u211D', 'roplus': '\u2A2E', 'rotimes': '\u2A35', 'RoundImplies': '\u2970', 'rpar': ')', 'rpargt': '\u2994', 'rppolint': '\u2A12', 'rrarr': '\u21C9', 'Rrightarrow': '\u21DB', 'rsaquo': '\u203A', 'rscr': '\uD835\uDCC7', 'Rscr': '\u211B', 'rsh': '\u21B1', 'Rsh': '\u21B1', 'rsqb': ']', 'rsquo': '\u2019', 'rsquor': '\u2019', 'rthree': '\u22CC', 'rtimes': '\u22CA', 'rtri': '\u25B9', 'rtrie': '\u22B5', 'rtrif': '\u25B8', 'rtriltri': '\u29CE', 'RuleDelayed': '\u29F4', 'ruluhar': '\u2968', 'rx': '\u211E', 'sacute': '\u015B', 'Sacute': '\u015A', 'sbquo': '\u201A', 'sc': '\u227B', 'Sc': '\u2ABC', 'scap': '\u2AB8', 'scaron': '\u0161', 'Scaron': '\u0160', 'sccue': '\u227D', 'sce': '\u2AB0', 'scE': '\u2AB4', 'scedil': '\u015F', 'Scedil': '\u015E', 'scirc': '\u015D', 'Scirc': '\u015C', 'scnap': '\u2ABA', 'scnE': '\u2AB6', 'scnsim': '\u22E9', 'scpolint': '\u2A13', 'scsim': '\u227F', 'scy': '\u0441', 'Scy': '\u0421', 'sdot': '\u22C5', 'sdotb': '\u22A1', 'sdote': '\u2A66', 'searhk': '\u2925', 'searr': '\u2198', 'seArr': '\u21D8', 'searrow': '\u2198', 'sect': '\xA7', 'semi': ';', 'seswar': '\u2929', 'setminus': '\u2216', 'setmn': '\u2216', 'sext': '\u2736', 'sfr': '\uD835\uDD30', 'Sfr': '\uD835\uDD16', 'sfrown': '\u2322', 'sharp': '\u266F', 'shchcy': '\u0449', 'SHCHcy': '\u0429', 'shcy': '\u0448', 'SHcy': '\u0428', 'ShortDownArrow': '\u2193', 'ShortLeftArrow': '\u2190', 'shortmid': '\u2223', 'shortparallel': '\u2225', 'ShortRightArrow': '\u2192', 'ShortUpArrow': '\u2191', 'shy': '\xAD', 'sigma': '\u03C3', 'Sigma': '\u03A3', 'sigmaf': '\u03C2', 'sigmav': '\u03C2', 'sim': '\u223C', 'simdot': '\u2A6A', 'sime': '\u2243', 'simeq': '\u2243', 'simg': '\u2A9E', 'simgE': '\u2AA0', 'siml': '\u2A9D', 'simlE': '\u2A9F', 'simne': '\u2246', 'simplus': '\u2A24', 'simrarr': '\u2972', 'slarr': '\u2190', 'SmallCircle': '\u2218', 'smallsetminus': '\u2216', 'smashp': '\u2A33', 'smeparsl': '\u29E4', 'smid': '\u2223', 'smile': '\u2323', 'smt': '\u2AAA', 'smte': '\u2AAC', 'smtes': '\u2AAC\uFE00', 'softcy': '\u044C', 'SOFTcy': '\u042C', 'sol': '/', 'solb': '\u29C4', 'solbar': '\u233F', 'sopf': '\uD835\uDD64', 'Sopf': '\uD835\uDD4A', 'spades': '\u2660', 'spadesuit': '\u2660', 'spar': '\u2225', 'sqcap': '\u2293', 'sqcaps': '\u2293\uFE00', 'sqcup': '\u2294', 'sqcups': '\u2294\uFE00', 'Sqrt': '\u221A', 'sqsub': '\u228F', 'sqsube': '\u2291', 'sqsubset': '\u228F', 'sqsubseteq': '\u2291', 'sqsup': '\u2290', 'sqsupe': '\u2292', 'sqsupset': '\u2290', 'sqsupseteq': '\u2292', 'squ': '\u25A1', 'square': '\u25A1', 'Square': '\u25A1', 'SquareIntersection': '\u2293', 'SquareSubset': '\u228F', 'SquareSubsetEqual': '\u2291', 'SquareSuperset': '\u2290', 'SquareSupersetEqual': '\u2292', 'SquareUnion': '\u2294', 'squarf': '\u25AA', 'squf': '\u25AA', 'srarr': '\u2192', 'sscr': '\uD835\uDCC8', 'Sscr': '\uD835\uDCAE', 'ssetmn': '\u2216', 'ssmile': '\u2323', 'sstarf': '\u22C6', 'star': '\u2606', 'Star': '\u22C6', 'starf': '\u2605', 'straightepsilon': '\u03F5', 'straightphi': '\u03D5', 'strns': '\xAF', 'sub': '\u2282', 'Sub': '\u22D0', 'subdot': '\u2ABD', 'sube': '\u2286', 'subE': '\u2AC5', 'subedot': '\u2AC3', 'submult': '\u2AC1', 'subne': '\u228A', 'subnE': '\u2ACB', 'subplus': '\u2ABF', 'subrarr': '\u2979', 'subset': '\u2282', 'Subset': '\u22D0', 'subseteq': '\u2286', 'subseteqq': '\u2AC5', 'SubsetEqual': '\u2286', 'subsetneq': '\u228A', 'subsetneqq': '\u2ACB', 'subsim': '\u2AC7', 'subsub': '\u2AD5', 'subsup': '\u2AD3', 'succ': '\u227B', 'succapprox': '\u2AB8', 'succcurlyeq': '\u227D', 'Succeeds': '\u227B', 'SucceedsEqual': '\u2AB0', 'SucceedsSlantEqual': '\u227D', 'SucceedsTilde': '\u227F', 'succeq': '\u2AB0', 'succnapprox': '\u2ABA', 'succneqq': '\u2AB6', 'succnsim': '\u22E9', 'succsim': '\u227F', 'SuchThat': '\u220B', 'sum': '\u2211', 'Sum': '\u2211', 'sung': '\u266A', 'sup': '\u2283', 'Sup': '\u22D1', 'sup1': '\xB9', 'sup2': '\xB2', 'sup3': '\xB3', 'supdot': '\u2ABE', 'supdsub': '\u2AD8', 'supe': '\u2287', 'supE': '\u2AC6', 'supedot': '\u2AC4', 'Superset': '\u2283', 'SupersetEqual': '\u2287', 'suphsol': '\u27C9', 'suphsub': '\u2AD7', 'suplarr': '\u297B', 'supmult': '\u2AC2', 'supne': '\u228B', 'supnE': '\u2ACC', 'supplus': '\u2AC0', 'supset': '\u2283', 'Supset': '\u22D1', 'supseteq': '\u2287', 'supseteqq': '\u2AC6', 'supsetneq': '\u228B', 'supsetneqq': '\u2ACC', 'supsim': '\u2AC8', 'supsub': '\u2AD4', 'supsup': '\u2AD6', 'swarhk': '\u2926', 'swarr': '\u2199', 'swArr': '\u21D9', 'swarrow': '\u2199', 'swnwar': '\u292A', 'szlig': '\xDF', 'Tab': '\t', 'target': '\u2316', 'tau': '\u03C4', 'Tau': '\u03A4', 'tbrk': '\u23B4', 'tcaron': '\u0165', 'Tcaron': '\u0164', 'tcedil': '\u0163', 'Tcedil': '\u0162', 'tcy': '\u0442', 'Tcy': '\u0422', 'tdot': '\u20DB', 'telrec': '\u2315', 'tfr': '\uD835\uDD31', 'Tfr': '\uD835\uDD17', 'there4': '\u2234', 'therefore': '\u2234', 'Therefore': '\u2234', 'theta': '\u03B8', 'Theta': '\u0398', 'thetasym': '\u03D1', 'thetav': '\u03D1', 'thickapprox': '\u2248', 'thicksim': '\u223C', 'ThickSpace': '\u205F\u200A', 'thinsp': '\u2009', 'ThinSpace': '\u2009', 'thkap': '\u2248', 'thksim': '\u223C', 'thorn': '\xFE', 'THORN': '\xDE', 'tilde': '\u02DC', 'Tilde': '\u223C', 'TildeEqual': '\u2243', 'TildeFullEqual': '\u2245', 'TildeTilde': '\u2248', 'times': '\xD7', 'timesb': '\u22A0', 'timesbar': '\u2A31', 'timesd': '\u2A30', 'tint': '\u222D', 'toea': '\u2928', 'top': '\u22A4', 'topbot': '\u2336', 'topcir': '\u2AF1', 'topf': '\uD835\uDD65', 'Topf': '\uD835\uDD4B', 'topfork': '\u2ADA', 'tosa': '\u2929', 'tprime': '\u2034', 'trade': '\u2122', 'TRADE': '\u2122', 'triangle': '\u25B5', 'triangledown': '\u25BF', 'triangleleft': '\u25C3', 'trianglelefteq': '\u22B4', 'triangleq': '\u225C', 'triangleright': '\u25B9', 'trianglerighteq': '\u22B5', 'tridot': '\u25EC', 'trie': '\u225C', 'triminus': '\u2A3A', 'TripleDot': '\u20DB', 'triplus': '\u2A39', 'trisb': '\u29CD', 'tritime': '\u2A3B', 'trpezium': '\u23E2', 'tscr': '\uD835\uDCC9', 'Tscr': '\uD835\uDCAF', 'tscy': '\u0446', 'TScy': '\u0426', 'tshcy': '\u045B', 'TSHcy': '\u040B', 'tstrok': '\u0167', 'Tstrok': '\u0166', 'twixt': '\u226C', 'twoheadleftarrow': '\u219E', 'twoheadrightarrow': '\u21A0', 'uacute': '\xFA', 'Uacute': '\xDA', 'uarr': '\u2191', 'uArr': '\u21D1', 'Uarr': '\u219F', 'Uarrocir': '\u2949', 'ubrcy': '\u045E', 'Ubrcy': '\u040E', 'ubreve': '\u016D', 'Ubreve': '\u016C', 'ucirc': '\xFB', 'Ucirc': '\xDB', 'ucy': '\u0443', 'Ucy': '\u0423', 'udarr': '\u21C5', 'udblac': '\u0171', 'Udblac': '\u0170', 'udhar': '\u296E', 'ufisht': '\u297E', 'ufr': '\uD835\uDD32', 'Ufr': '\uD835\uDD18', 'ugrave': '\xF9', 'Ugrave': '\xD9', 'uHar': '\u2963', 'uharl': '\u21BF', 'uharr': '\u21BE', 'uhblk': '\u2580', 'ulcorn': '\u231C', 'ulcorner': '\u231C', 'ulcrop': '\u230F', 'ultri': '\u25F8', 'umacr': '\u016B', 'Umacr': '\u016A', 'uml': '\xA8', 'UnderBar': '_', 'UnderBrace': '\u23DF', 'UnderBracket': '\u23B5', 'UnderParenthesis': '\u23DD', 'Union': '\u22C3', 'UnionPlus': '\u228E', 'uogon': '\u0173', 'Uogon': '\u0172', 'uopf': '\uD835\uDD66', 'Uopf': '\uD835\uDD4C', 'uparrow': '\u2191', 'Uparrow': '\u21D1', 'UpArrow': '\u2191', 'UpArrowBar': '\u2912', 'UpArrowDownArrow': '\u21C5', 'updownarrow': '\u2195', 'Updownarrow': '\u21D5', 'UpDownArrow': '\u2195', 'UpEquilibrium': '\u296E', 'upharpoonleft': '\u21BF', 'upharpoonright': '\u21BE', 'uplus': '\u228E', 'UpperLeftArrow': '\u2196', 'UpperRightArrow': '\u2197', 'upsi': '\u03C5', 'Upsi': '\u03D2', 'upsih': '\u03D2', 'upsilon': '\u03C5', 'Upsilon': '\u03A5', 'UpTee': '\u22A5', 'UpTeeArrow': '\u21A5', 'upuparrows': '\u21C8', 'urcorn': '\u231D', 'urcorner': '\u231D', 'urcrop': '\u230E', 'uring': '\u016F', 'Uring': '\u016E', 'urtri': '\u25F9', 'uscr': '\uD835\uDCCA', 'Uscr': '\uD835\uDCB0', 'utdot': '\u22F0', 'utilde': '\u0169', 'Utilde': '\u0168', 'utri': '\u25B5', 'utrif': '\u25B4', 'uuarr': '\u21C8', 'uuml': '\xFC', 'Uuml': '\xDC', 'uwangle': '\u29A7', 'vangrt': '\u299C', 'varepsilon': '\u03F5', 'varkappa': '\u03F0', 'varnothing': '\u2205', 'varphi': '\u03D5', 'varpi': '\u03D6', 'varpropto': '\u221D', 'varr': '\u2195', 'vArr': '\u21D5', 'varrho': '\u03F1', 'varsigma': '\u03C2', 'varsubsetneq': '\u228A\uFE00', 'varsubsetneqq': '\u2ACB\uFE00', 'varsupsetneq': '\u228B\uFE00', 'varsupsetneqq': '\u2ACC\uFE00', 'vartheta': '\u03D1', 'vartriangleleft': '\u22B2', 'vartriangleright': '\u22B3', 'vBar': '\u2AE8', 'Vbar': '\u2AEB', 'vBarv': '\u2AE9', 'vcy': '\u0432', 'Vcy': '\u0412', 'vdash': '\u22A2', 'vDash': '\u22A8', 'Vdash': '\u22A9', 'VDash': '\u22AB', 'Vdashl': '\u2AE6', 'vee': '\u2228', 'Vee': '\u22C1', 'veebar': '\u22BB', 'veeeq': '\u225A', 'vellip': '\u22EE', 'verbar': '|', 'Verbar': '\u2016', 'vert': '|', 'Vert': '\u2016', 'VerticalBar': '\u2223', 'VerticalLine': '|', 'VerticalSeparator': '\u2758', 'VerticalTilde': '\u2240', 'VeryThinSpace': '\u200A', 'vfr': '\uD835\uDD33', 'Vfr': '\uD835\uDD19', 'vltri': '\u22B2', 'vnsub': '\u2282\u20D2', 'vnsup': '\u2283\u20D2', 'vopf': '\uD835\uDD67', 'Vopf': '\uD835\uDD4D', 'vprop': '\u221D', 'vrtri': '\u22B3', 'vscr': '\uD835\uDCCB', 'Vscr': '\uD835\uDCB1', 'vsubne': '\u228A\uFE00', 'vsubnE': '\u2ACB\uFE00', 'vsupne': '\u228B\uFE00', 'vsupnE': '\u2ACC\uFE00', 'Vvdash': '\u22AA', 'vzigzag': '\u299A', 'wcirc': '\u0175', 'Wcirc': '\u0174', 'wedbar': '\u2A5F', 'wedge': '\u2227', 'Wedge': '\u22C0', 'wedgeq': '\u2259', 'weierp': '\u2118', 'wfr': '\uD835\uDD34', 'Wfr': '\uD835\uDD1A', 'wopf': '\uD835\uDD68', 'Wopf': '\uD835\uDD4E', 'wp': '\u2118', 'wr': '\u2240', 'wreath': '\u2240', 'wscr': '\uD835\uDCCC', 'Wscr': '\uD835\uDCB2', 'xcap': '\u22C2', 'xcirc': '\u25EF', 'xcup': '\u22C3', 'xdtri': '\u25BD', 'xfr': '\uD835\uDD35', 'Xfr': '\uD835\uDD1B', 'xharr': '\u27F7', 'xhArr': '\u27FA', 'xi': '\u03BE', 'Xi': '\u039E', 'xlarr': '\u27F5', 'xlArr': '\u27F8', 'xmap': '\u27FC', 'xnis': '\u22FB', 'xodot': '\u2A00', 'xopf': '\uD835\uDD69', 'Xopf': '\uD835\uDD4F', 'xoplus': '\u2A01', 'xotime': '\u2A02', 'xrarr': '\u27F6', 'xrArr': '\u27F9', 'xscr': '\uD835\uDCCD', 'Xscr': '\uD835\uDCB3', 'xsqcup': '\u2A06', 'xuplus': '\u2A04', 'xutri': '\u25B3', 'xvee': '\u22C1', 'xwedge': '\u22C0', 'yacute': '\xFD', 'Yacute': '\xDD', 'yacy': '\u044F', 'YAcy': '\u042F', 'ycirc': '\u0177', 'Ycirc': '\u0176', 'ycy': '\u044B', 'Ycy': '\u042B', 'yen': '\xA5', 'yfr': '\uD835\uDD36', 'Yfr': '\uD835\uDD1C', 'yicy': '\u0457', 'YIcy': '\u0407', 'yopf': '\uD835\uDD6A', 'Yopf': '\uD835\uDD50', 'yscr': '\uD835\uDCCE', 'Yscr': '\uD835\uDCB4', 'yucy': '\u044E', 'YUcy': '\u042E', 'yuml': '\xFF', 'Yuml': '\u0178', 'zacute': '\u017A', 'Zacute': '\u0179', 'zcaron': '\u017E', 'Zcaron': '\u017D', 'zcy': '\u0437', 'Zcy': '\u0417', 'zdot': '\u017C', 'Zdot': '\u017B', 'zeetrf': '\u2128', 'ZeroWidthSpace': '\u200B', 'zeta': '\u03B6', 'Zeta': '\u0396', 'zfr': '\uD835\uDD37', 'Zfr': '\u2128', 'zhcy': '\u0436', 'ZHcy': '\u0416', 'zigrarr': '\u21DD', 'zopf': '\uD835\uDD6B', 'Zopf': '\u2124', 'zscr': '\uD835\uDCCF', 'Zscr': '\uD835\uDCB5', 'zwj': '\u200D', 'zwnj': '\u200C' };
                    var decodeMapLegacy = { 'aacute': '\xE1', 'Aacute': '\xC1', 'acirc': '\xE2', 'Acirc': '\xC2', 'acute': '\xB4', 'aelig': '\xE6', 'AElig': '\xC6', 'agrave': '\xE0', 'Agrave': '\xC0', 'amp': '&', 'AMP': '&', 'aring': '\xE5', 'Aring': '\xC5', 'atilde': '\xE3', 'Atilde': '\xC3', 'auml': '\xE4', 'Auml': '\xC4', 'brvbar': '\xA6', 'ccedil': '\xE7', 'Ccedil': '\xC7', 'cedil': '\xB8', 'cent': '\xA2', 'copy': '\xA9', 'COPY': '\xA9', 'curren': '\xA4', 'deg': '\xB0', 'divide': '\xF7', 'eacute': '\xE9', 'Eacute': '\xC9', 'ecirc': '\xEA', 'Ecirc': '\xCA', 'egrave': '\xE8', 'Egrave': '\xC8', 'eth': '\xF0', 'ETH': '\xD0', 'euml': '\xEB', 'Euml': '\xCB', 'frac12': '\xBD', 'frac14': '\xBC', 'frac34': '\xBE', 'gt': '>', 'GT': '>', 'iacute': '\xED', 'Iacute': '\xCD', 'icirc': '\xEE', 'Icirc': '\xCE', 'iexcl': '\xA1', 'igrave': '\xEC', 'Igrave': '\xCC', 'iquest': '\xBF', 'iuml': '\xEF', 'Iuml': '\xCF', 'laquo': '\xAB', 'lt': '<', 'LT': '<', 'macr': '\xAF', 'micro': '\xB5', 'middot': '\xB7', 'nbsp': '\xA0', 'not': '\xAC', 'ntilde': '\xF1', 'Ntilde': '\xD1', 'oacute': '\xF3', 'Oacute': '\xD3', 'ocirc': '\xF4', 'Ocirc': '\xD4', 'ograve': '\xF2', 'Ograve': '\xD2', 'ordf': '\xAA', 'ordm': '\xBA', 'oslash': '\xF8', 'Oslash': '\xD8', 'otilde': '\xF5', 'Otilde': '\xD5', 'ouml': '\xF6', 'Ouml': '\xD6', 'para': '\xB6', 'plusmn': '\xB1', 'pound': '\xA3', 'quot': '"', 'QUOT': '"', 'raquo': '\xBB', 'reg': '\xAE', 'REG': '\xAE', 'sect': '\xA7', 'shy': '\xAD', 'sup1': '\xB9', 'sup2': '\xB2', 'sup3': '\xB3', 'szlig': '\xDF', 'thorn': '\xFE', 'THORN': '\xDE', 'times': '\xD7', 'uacute': '\xFA', 'Uacute': '\xDA', 'ucirc': '\xFB', 'Ucirc': '\xDB', 'ugrave': '\xF9', 'Ugrave': '\xD9', 'uml': '\xA8', 'uuml': '\xFC', 'Uuml': '\xDC', 'yacute': '\xFD', 'Yacute': '\xDD', 'yen': '\xA5', 'yuml': '\xFF' };
                    var decodeMapNumeric = { '0': '\uFFFD', '128': '\u20AC', '130': '\u201A', '131': '\u0192', '132': '\u201E', '133': '\u2026', '134': '\u2020', '135': '\u2021', '136': '\u02C6', '137': '\u2030', '138': '\u0160', '139': '\u2039', '140': '\u0152', '142': '\u017D', '145': '\u2018', '146': '\u2019', '147': '\u201C', '148': '\u201D', '149': '\u2022', '150': '\u2013', '151': '\u2014', '152': '\u02DC', '153': '\u2122', '154': '\u0161', '155': '\u203A', '156': '\u0153', '158': '\u017E', '159': '\u0178' };
                    var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65000, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
                    /*--------------------------------------------------------------------------*/
                    var stringFromCharCode = String.fromCharCode;
                    var object = {};
                    var hasOwnProperty = object.hasOwnProperty;
                    var has = function (object, propertyName) {
                        return hasOwnProperty.call(object, propertyName);
                    };
                    var contains = function (array, value) {
                        var index = -1;
                        var length = array.length;
                        while (++index < length) {
                            if (array[index] == value) {
                                return true;
                            }
                        }
                        return false;
                    };
                    var merge = function (options, defaults) {
                        if (!options) {
                            return defaults;
                        }
                        var result = {};
                        var key;
                        for (key in defaults) {
                            // A `hasOwnProperty` check is not needed here, since only recognized
                            // option names are used anyway. Any others are ignored.
                            result[key] = has(options, key) ? options[key] : defaults[key];
                        }
                        return result;
                    };
                    // Modified version of `ucs2encode`; see https://mths.be/punycode.
                    var codePointToSymbol = function (codePoint, strict) {
                        var output = '';
                        if ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {
                            // See issue #4:
                            // “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
                            // greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
                            // REPLACEMENT CHARACTER.”
                            if (strict) {
                                parseError('character reference outside the permissible Unicode range');
                            }
                            return '\uFFFD';
                        }
                        if (has(decodeMapNumeric, codePoint)) {
                            if (strict) {
                                parseError('disallowed character reference');
                            }
                            return decodeMapNumeric[codePoint];
                        }
                        if (strict && contains(invalidReferenceCodePoints, codePoint)) {
                            parseError('disallowed character reference');
                        }
                        if (codePoint > 0xFFFF) {
                            codePoint -= 0x10000;
                            output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
                            codePoint = 0xDC00 | codePoint & 0x3FF;
                        }
                        output += stringFromCharCode(codePoint);
                        return output;
                    };
                    var hexEscape = function (codePoint) {
                        return '&#x' + codePoint.toString(16).toUpperCase() + ';';
                    };
                    var decEscape = function (codePoint) {
                        return '&#' + codePoint + ';';
                    };
                    var parseError = function (message) {
                        throw Error('Parse error: ' + message);
                    };
                    /*--------------------------------------------------------------------------*/
                    var encode = function (string, options) {
                        options = merge(options, encode.options);
                        var strict = options.strict;
                        if (strict && regexInvalidRawCodePoint.test(string)) {
                            parseError('forbidden code point');
                        }
                        var encodeEverything = options.encodeEverything;
                        var useNamedReferences = options.useNamedReferences;
                        var allowUnsafeSymbols = options.allowUnsafeSymbols;
                        var escapeCodePoint = options.decimal ? decEscape : hexEscape;
                        var escapeBmpSymbol = function (symbol) {
                            return escapeCodePoint(symbol.charCodeAt(0));
                        };
                        if (encodeEverything) {
                            // Encode ASCII symbols.
                            string = string.replace(regexAsciiWhitelist, function (symbol) {
                                // Use named references if requested & possible.
                                if (useNamedReferences && has(encodeMap, symbol)) {
                                    return '&' + encodeMap[symbol] + ';';
                                }
                                return escapeBmpSymbol(symbol);
                            });
                            // Shorten a few escapes that represent two symbols, of which at least one
                            // is within the ASCII range.
                            if (useNamedReferences) {
                                string = string
                                    .replace(/&gt;\u20D2/g, '&nvgt;')
                                    .replace(/&lt;\u20D2/g, '&nvlt;')
                                    .replace(/&#x66;&#x6A;/g, '&fjlig;');
                            }
                            // Encode non-ASCII symbols.
                            if (useNamedReferences) {
                                // Encode non-ASCII symbols that can be replaced with a named reference.
                                string = string.replace(regexEncodeNonAscii, function (string) {
                                    // Note: there is no need to check `has(encodeMap, string)` here.
                                    return '&' + encodeMap[string] + ';';
                                });
                            }
                            // Note: any remaining non-ASCII symbols are handled outside of the `if`.
                        }
                        else if (useNamedReferences) {
                            // Apply named character references.
                            // Encode `<>"'&` using named character references.
                            if (!allowUnsafeSymbols) {
                                string = string.replace(regexEscape, function (string) {
                                    return '&' + encodeMap[string] + ';'; // no need to check `has()` here
                                });
                            }
                            // Shorten escapes that represent two symbols, of which at least one is
                            // `<>"'&`.
                            string = string
                                .replace(/&gt;\u20D2/g, '&nvgt;')
                                .replace(/&lt;\u20D2/g, '&nvlt;');
                            // Encode non-ASCII symbols that can be replaced with a named reference.
                            string = string.replace(regexEncodeNonAscii, function (string) {
                                // Note: there is no need to check `has(encodeMap, string)` here.
                                return '&' + encodeMap[string] + ';';
                            });
                        }
                        else if (!allowUnsafeSymbols) {
                            // Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
                            // using named character references.
                            string = string.replace(regexEscape, escapeBmpSymbol);
                        }
                        return string
                            // Encode astral symbols.
                            .replace(regexAstralSymbols, function ($0) {
                            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                            var high = $0.charCodeAt(0);
                            var low = $0.charCodeAt(1);
                            var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
                            return escapeCodePoint(codePoint);
                        })
                            // Encode any remaining BMP symbols that are not printable ASCII symbols
                            // using a hexadecimal escape.
                            .replace(regexBmpWhitelist, escapeBmpSymbol);
                    };
                    // Expose default options (so they can be overridden globally).
                    encode.options = {
                        'allowUnsafeSymbols': false,
                        'encodeEverything': false,
                        'strict': false,
                        'useNamedReferences': false,
                        'decimal': false
                    };
                    var decode = function (html, options) {
                        options = merge(options, decode.options);
                        var strict = options.strict;
                        if (strict && regexInvalidEntity.test(html)) {
                            parseError('malformed character reference');
                        }
                        return html.replace(regexDecode, function ($0, $1, $2, $3, $4, $5, $6, $7, $8) {
                            var codePoint;
                            var semicolon;
                            var decDigits;
                            var hexDigits;
                            var reference;
                            var next;
                            if ($1) {
                                reference = $1;
                                // Note: there is no need to check `has(decodeMap, reference)`.
                                return decodeMap[reference];
                            }
                            if ($2) {
                                // Decode named character references without trailing `;`, e.g. `&amp`.
                                // This is only a parse error if it gets converted to `&`, or if it is
                                // followed by `=` in an attribute context.
                                reference = $2;
                                next = $3;
                                if (next && options.isAttributeValue) {
                                    if (strict && next == '=') {
                                        parseError('`&` did not start a character reference');
                                    }
                                    return $0;
                                }
                                else {
                                    if (strict) {
                                        parseError('named character reference was not terminated by a semicolon');
                                    }
                                    // Note: there is no need to check `has(decodeMapLegacy, reference)`.
                                    return decodeMapLegacy[reference] + (next || '');
                                }
                            }
                            if ($4) {
                                // Decode decimal escapes, e.g. `&#119558;`.
                                decDigits = $4;
                                semicolon = $5;
                                if (strict && !semicolon) {
                                    parseError('character reference was not terminated by a semicolon');
                                }
                                codePoint = parseInt(decDigits, 10);
                                return codePointToSymbol(codePoint, strict);
                            }
                            if ($6) {
                                // Decode hexadecimal escapes, e.g. `&#x1D306;`.
                                hexDigits = $6;
                                semicolon = $7;
                                if (strict && !semicolon) {
                                    parseError('character reference was not terminated by a semicolon');
                                }
                                codePoint = parseInt(hexDigits, 16);
                                return codePointToSymbol(codePoint, strict);
                            }
                            // If we’re still here, `if ($7)` is implied; it’s an ambiguous
                            // ampersand for sure. https://mths.be/notes/ambiguous-ampersands
                            if (strict) {
                                parseError('named character reference was not terminated by a semicolon');
                            }
                            return $0;
                        });
                    };
                    // Expose default options (so they can be overridden globally).
                    decode.options = {
                        'isAttributeValue': false,
                        'strict': false
                    };
                    var escape = function (string) {
                        return string.replace(regexEscape, function ($0) {
                            // Note: there is no need to check `has(escapeMap, $0)` here.
                            return escapeMap[$0];
                        });
                    };
                    /*--------------------------------------------------------------------------*/
                    var he = {
                        'version': '1.2.0',
                        'encode': encode,
                        'decode': decode,
                        'escape': escape,
                        'unescape': decode
                    };
                    // Some AMD build optimizers, like r.js, check for specific condition patterns
                    // like the following:
                    if (true) {
                        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                            return he;
                        }).call(exports, __webpack_require__, exports, module),
                            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    }
                    else {
                        var key;
                    }
                }(this));
                /***/ 
            }),
            /***/ "./node_modules/lodash/lodash.js": 
            /*!***************************************!*\
              !*** ./node_modules/lodash/lodash.js ***!
              \***************************************/
            /***/ (function (module, exports, __webpack_require__) {
                /* module decorator */ module = __webpack_require__.nmd(module);
                var __WEBPACK_AMD_DEFINE_RESULT__; /**
                 * @license
                 * Lodash <https://lodash.com/>
                 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
                 * Released under MIT license <https://lodash.com/license>
                 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                 */
                ;
                (function () {
                    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                    var undefined;
                    /** Used as the semantic version number. */
                    var VERSION = '4.17.21';
                    /** Used as the size to enable large array optimizations. */
                    var LARGE_ARRAY_SIZE = 200;
                    /** Error message constants. */
                    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function', INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
                    /** Used to stand-in for `undefined` hash values. */
                    var HASH_UNDEFINED = '__lodash_hash_undefined__';
                    /** Used as the maximum memoize cache size. */
                    var MAX_MEMOIZE_SIZE = 500;
                    /** Used as the internal argument placeholder. */
                    var PLACEHOLDER = '__lodash_placeholder__';
                    /** Used to compose bitmasks for cloning. */
                    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
                    /** Used to compose bitmasks for value comparisons. */
                    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
                    /** Used to compose bitmasks for function metadata. */
                    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
                    /** Used as default options for `_.truncate`. */
                    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
                    /** Used to detect hot functions by number of calls within a span of milliseconds. */
                    var HOT_COUNT = 800, HOT_SPAN = 16;
                    /** Used to indicate the type of lazy iteratees. */
                    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
                    /** Used as references for various `Number` constants. */
                    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
                    /** Used as references for the maximum length and index of an array. */
                    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
                    /** Used to associate wrap methods with their bit flags. */
                    var wrapFlags = [
                        ['ary', WRAP_ARY_FLAG],
                        ['bind', WRAP_BIND_FLAG],
                        ['bindKey', WRAP_BIND_KEY_FLAG],
                        ['curry', WRAP_CURRY_FLAG],
                        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                        ['flip', WRAP_FLIP_FLAG],
                        ['partial', WRAP_PARTIAL_FLAG],
                        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                        ['rearg', WRAP_REARG_FLAG]
                    ];
                    /** `Object#toString` result references. */
                    var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
                    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
                    /** Used to match empty string literals in compiled template source. */
                    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
                    /** Used to match HTML entities and HTML characters. */
                    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
                    /** Used to match template delimiters. */
                    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
                    /** Used to match property names within property paths. */
                    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
                    /**
                     * Used to match `RegExp`
                     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                     */
                    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
                    /** Used to match leading whitespace. */
                    var reTrimStart = /^\s+/;
                    /** Used to match a single whitespace character. */
                    var reWhitespace = /\s/;
                    /** Used to match wrap detail comments. */
                    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
                    /** Used to match words composed of alphanumeric characters. */
                    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
                    /**
                     * Used to validate the `validate` option in `_.template` variable.
                     *
                     * Forbids characters which could potentially change the meaning of the function argument definition:
                     * - "()," (modification of function parameters)
                     * - "=" (default value)
                     * - "[]{}" (destructuring of function parameters)
                     * - "/" (beginning of a comment)
                     * - whitespace
                     */
                    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
                    /** Used to match backslashes in property paths. */
                    var reEscapeChar = /\\(\\)?/g;
                    /**
                     * Used to match
                     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                     */
                    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
                    /** Used to match `RegExp` flags from their coerced string values. */
                    var reFlags = /\w*$/;
                    /** Used to detect bad signed hexadecimal string values. */
                    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
                    /** Used to detect binary string values. */
                    var reIsBinary = /^0b[01]+$/i;
                    /** Used to detect host constructors (Safari). */
                    var reIsHostCtor = /^\[object .+?Constructor\]$/;
                    /** Used to detect octal string values. */
                    var reIsOctal = /^0o[0-7]+$/i;
                    /** Used to detect unsigned integer values. */
                    var reIsUint = /^(?:0|[1-9]\d*)$/;
                    /** Used to match Latin Unicode letters (excluding mathematical operators). */
                    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
                    /** Used to ensure capturing order of template delimiters. */
                    var reNoMatch = /($^)/;
                    /** Used to match unescaped characters in compiled string literals. */
                    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
                    /** Used to compose unicode character classes. */
                    var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
                    /** Used to compose unicode capture groups. */
                    var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
                    /** Used to compose unicode regexes. */
                    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
                    /** Used to match apostrophes. */
                    var reApos = RegExp(rsApos, 'g');
                    /**
                     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                     */
                    var reComboMark = RegExp(rsCombo, 'g');
                    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
                    /** Used to match complex or compound words. */
                    var reUnicodeWord = RegExp([
                        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                        rsUpper + '+' + rsOptContrUpper,
                        rsOrdUpper,
                        rsOrdLower,
                        rsDigits,
                        rsEmoji
                    ].join('|'), 'g');
                    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
                    /** Used to detect strings that need a more robust regexp to match words. */
                    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
                    /** Used to assign default `context` object properties. */
                    var contextProps = [
                        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
                    ];
                    /** Used to make template sourceURLs easier to identify. */
                    var templateCounter = -1;
                    /** Used to identify `toStringTag` values of typed arrays. */
                    var typedArrayTags = {};
                    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                        typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                                    typedArrayTags[uint32Tag] = true;
                    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                        typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                                typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                                    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                                        typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                            typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                                typedArrayTags[weakMapTag] = false;
                    /** Used to identify `toStringTag` values supported by `_.clone`. */
                    var cloneableTags = {};
                    cloneableTags[argsTag] = cloneableTags[arrayTag] =
                        cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                            cloneableTags[boolTag] = cloneableTags[dateTag] =
                                cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                                    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                                        cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                            cloneableTags[numberTag] = cloneableTags[objectTag] =
                                                cloneableTags[regexpTag] = cloneableTags[setTag] =
                                                    cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                                        cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                            cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                    cloneableTags[errorTag] = cloneableTags[funcTag] =
                        cloneableTags[weakMapTag] = false;
                    /** Used to map Latin Unicode letters to basic Latin letters. */
                    var deburredLetters = {
                        // Latin-1 Supplement block.
                        '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                        '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                        '\xc7': 'C', '\xe7': 'c',
                        '\xd0': 'D', '\xf0': 'd',
                        '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                        '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                        '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                        '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
                        '\xd1': 'N', '\xf1': 'n',
                        '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                        '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                        '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                        '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                        '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
                        '\xc6': 'Ae', '\xe6': 'ae',
                        '\xde': 'Th', '\xfe': 'th',
                        '\xdf': 'ss',
                        // Latin Extended-A block.
                        '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
                        '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
                        '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                        '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                        '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                        '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                        '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                        '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                        '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                        '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                        '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                        '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                        '\u0134': 'J', '\u0135': 'j',
                        '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
                        '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                        '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                        '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                        '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                        '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
                        '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
                        '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
                        '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
                        '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                        '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
                        '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
                        '\u0163': 't', '\u0165': 't', '\u0167': 't',
                        '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                        '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                        '\u0174': 'W', '\u0175': 'w',
                        '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
                        '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
                        '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
                        '\u0132': 'IJ', '\u0133': 'ij',
                        '\u0152': 'Oe', '\u0153': 'oe',
                        '\u0149': "'n", '\u017f': 's'
                    };
                    /** Used to map characters to HTML entities. */
                    var htmlEscapes = {
                        '&': '&amp;',
                        '<': '&lt;',
                        '>': '&gt;',
                        '"': '&quot;',
                        "'": '&#39;'
                    };
                    /** Used to map HTML entities to characters. */
                    var htmlUnescapes = {
                        '&amp;': '&',
                        '&lt;': '<',
                        '&gt;': '>',
                        '&quot;': '"',
                        '&#39;': "'"
                    };
                    /** Used to escape characters for inclusion in compiled string literals. */
                    var stringEscapes = {
                        '\\': '\\',
                        "'": "'",
                        '\n': 'n',
                        '\r': 'r',
                        '\u2028': 'u2028',
                        '\u2029': 'u2029'
                    };
                    /** Built-in method references without a dependency on `root`. */
                    var freeParseFloat = parseFloat, freeParseInt = parseInt;
                    /** Detect free variable `global` from Node.js. */
                    var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
                    /** Detect free variable `self`. */
                    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
                    /** Used as a reference to the global object. */
                    var root = freeGlobal || freeSelf || Function('return this')();
                    /** Detect free variable `exports`. */
                    var freeExports = true && exports && !exports.nodeType && exports;
                    /** Detect free variable `module`. */
                    var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;
                    /** Detect the popular CommonJS extension `module.exports`. */
                    var moduleExports = freeModule && freeModule.exports === freeExports;
                    /** Detect free variable `process` from Node.js. */
                    var freeProcess = moduleExports && freeGlobal.process;
                    /** Used to access faster Node.js helpers. */
                    var nodeUtil = (function () {
                        try {
                            // Use `util.types` for Node.js 10+.
                            var types = freeModule && freeModule.require && freeModule.require('util').types;
                            if (types) {
                                return types;
                            }
                            // Legacy `process.binding('util')` for Node.js < 10.
                            return freeProcess && freeProcess.binding && freeProcess.binding('util');
                        }
                        catch (e) { }
                    }());
                    /* Node.js helper references. */
                    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
                    /*--------------------------------------------------------------------------*/
                    /**
                     * A faster alternative to `Function#apply`, this function invokes `func`
                     * with the `this` binding of `thisArg` and the arguments of `args`.
                     *
                     * @private
                     * @param {Function} func The function to invoke.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {Array} args The arguments to invoke `func` with.
                     * @returns {*} Returns the result of `func`.
                     */
                    function apply(func, thisArg, args) {
                        switch (args.length) {
                            case 0: return func.call(thisArg);
                            case 1: return func.call(thisArg, args[0]);
                            case 2: return func.call(thisArg, args[0], args[1]);
                            case 3: return func.call(thisArg, args[0], args[1], args[2]);
                        }
                        return func.apply(thisArg, args);
                    }
                    /**
                     * A specialized version of `baseAggregator` for arrays.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform keys.
                     * @param {Object} accumulator The initial aggregated object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function arrayAggregator(array, setter, iteratee, accumulator) {
                        var index = -1, length = array == null ? 0 : array.length;
                        while (++index < length) {
                            var value = array[index];
                            setter(accumulator, value, iteratee(value), array);
                        }
                        return accumulator;
                    }
                    /**
                     * A specialized version of `_.forEach` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayEach(array, iteratee) {
                        var index = -1, length = array == null ? 0 : array.length;
                        while (++index < length) {
                            if (iteratee(array[index], index, array) === false) {
                                break;
                            }
                        }
                        return array;
                    }
                    /**
                     * A specialized version of `_.forEachRight` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayEachRight(array, iteratee) {
                        var length = array == null ? 0 : array.length;
                        while (length--) {
                            if (iteratee(array[length], length, array) === false) {
                                break;
                            }
                        }
                        return array;
                    }
                    /**
                     * A specialized version of `_.every` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`.
                     */
                    function arrayEvery(array, predicate) {
                        var index = -1, length = array == null ? 0 : array.length;
                        while (++index < length) {
                            if (!predicate(array[index], index, array)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    /**
                     * A specialized version of `_.filter` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     */
                    function arrayFilter(array, predicate) {
                        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result[resIndex++] = value;
                            }
                        }
                        return result;
                    }
                    /**
                     * A specialized version of `_.includes` for arrays without support for
                     * specifying an index to search from.
                     *
                     * @private
                     * @param {Array} [array] The array to inspect.
                     * @param {*} target The value to search for.
                     * @returns {boolean} Returns `true` if `target` is found, else `false`.
                     */
                    function arrayIncludes(array, value) {
                        var length = array == null ? 0 : array.length;
                        return !!length && baseIndexOf(array, value, 0) > -1;
                    }
                    /**
                     * This function is like `arrayIncludes` except that it accepts a comparator.
                     *
                     * @private
                     * @param {Array} [array] The array to inspect.
                     * @param {*} target The value to search for.
                     * @param {Function} comparator The comparator invoked per element.
                     * @returns {boolean} Returns `true` if `target` is found, else `false`.
                     */
                    function arrayIncludesWith(array, value, comparator) {
                        var index = -1, length = array == null ? 0 : array.length;
                        while (++index < length) {
                            if (comparator(value, array[index])) {
                                return true;
                            }
                        }
                        return false;
                    }
                    /**
                     * A specialized version of `_.map` for arrays without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     */
                    function arrayMap(array, iteratee) {
                        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
                        while (++index < length) {
                            result[index] = iteratee(array[index], index, array);
                        }
                        return result;
                    }
                    /**
                     * Appends the elements of `values` to `array`.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to append.
                     * @returns {Array} Returns `array`.
                     */
                    function arrayPush(array, values) {
                        var index = -1, length = values.length, offset = array.length;
                        while (++index < length) {
                            array[offset + index] = values[index];
                        }
                        return array;
                    }
                    /**
                     * A specialized version of `_.reduce` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @param {boolean} [initAccum] Specify using the first element of `array` as
                     *  the initial value.
                     * @returns {*} Returns the accumulated value.
                     */
                    function arrayReduce(array, iteratee, accumulator, initAccum) {
                        var index = -1, length = array == null ? 0 : array.length;
                        if (initAccum && length) {
                            accumulator = array[++index];
                        }
                        while (++index < length) {
                            accumulator = iteratee(accumulator, array[index], index, array);
                        }
                        return accumulator;
                    }
                    /**
                     * A specialized version of `_.reduceRight` for arrays without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @param {boolean} [initAccum] Specify using the last element of `array` as
                     *  the initial value.
                     * @returns {*} Returns the accumulated value.
                     */
                    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                        var length = array == null ? 0 : array.length;
                        if (initAccum && length) {
                            accumulator = array[--length];
                        }
                        while (length--) {
                            accumulator = iteratee(accumulator, array[length], length, array);
                        }
                        return accumulator;
                    }
                    /**
                     * A specialized version of `_.some` for arrays without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} [array] The array to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     */
                    function arraySome(array, predicate) {
                        var index = -1, length = array == null ? 0 : array.length;
                        while (++index < length) {
                            if (predicate(array[index], index, array)) {
                                return true;
                            }
                        }
                        return false;
                    }
                    /**
                     * Gets the size of an ASCII `string`.
                     *
                     * @private
                     * @param {string} string The string inspect.
                     * @returns {number} Returns the string size.
                     */
                    var asciiSize = baseProperty('length');
                    /**
                     * Converts an ASCII `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function asciiToArray(string) {
                        return string.split('');
                    }
                    /**
                     * Splits an ASCII `string` into an array of its words.
                     *
                     * @private
                     * @param {string} The string to inspect.
                     * @returns {Array} Returns the words of `string`.
                     */
                    function asciiWords(string) {
                        return string.match(reAsciiWord) || [];
                    }
                    /**
                     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                     * without support for iteratee shorthands, which iterates over `collection`
                     * using `eachFunc`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {Function} eachFunc The function to iterate over `collection`.
                     * @returns {*} Returns the found element or its key, else `undefined`.
                     */
                    function baseFindKey(collection, predicate, eachFunc) {
                        var result;
                        eachFunc(collection, function (value, key, collection) {
                            if (predicate(value, key, collection)) {
                                result = key;
                                return false;
                            }
                        });
                        return result;
                    }
                    /**
                     * The base implementation of `_.findIndex` and `_.findLastIndex` without
                     * support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {number} fromIndex The index to search from.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseFindIndex(array, predicate, fromIndex, fromRight) {
                        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
                        while ((fromRight ? index-- : ++index < length)) {
                            if (predicate(array[index], index, array)) {
                                return index;
                            }
                        }
                        return -1;
                    }
                    /**
                     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseIndexOf(array, value, fromIndex) {
                        return value === value
                            ? strictIndexOf(array, value, fromIndex)
                            : baseFindIndex(array, baseIsNaN, fromIndex);
                    }
                    /**
                     * This function is like `baseIndexOf` except that it accepts a comparator.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @param {Function} comparator The comparator invoked per element.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function baseIndexOfWith(array, value, fromIndex, comparator) {
                        var index = fromIndex - 1, length = array.length;
                        while (++index < length) {
                            if (comparator(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }
                    /**
                     * The base implementation of `_.isNaN` without support for number objects.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                     */
                    function baseIsNaN(value) {
                        return value !== value;
                    }
                    /**
                     * The base implementation of `_.mean` and `_.meanBy` without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {number} Returns the mean.
                     */
                    function baseMean(array, iteratee) {
                        var length = array == null ? 0 : array.length;
                        return length ? (baseSum(array, iteratee) / length) : NAN;
                    }
                    /**
                     * The base implementation of `_.property` without support for deep paths.
                     *
                     * @private
                     * @param {string} key The key of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function baseProperty(key) {
                        return function (object) {
                            return object == null ? undefined : object[key];
                        };
                    }
                    /**
                     * The base implementation of `_.propertyOf` without support for deep paths.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function basePropertyOf(object) {
                        return function (key) {
                            return object == null ? undefined : object[key];
                        };
                    }
                    /**
                     * The base implementation of `_.reduce` and `_.reduceRight`, without support
                     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {*} accumulator The initial value.
                     * @param {boolean} initAccum Specify using the first or last element of
                     *  `collection` as the initial value.
                     * @param {Function} eachFunc The function to iterate over `collection`.
                     * @returns {*} Returns the accumulated value.
                     */
                    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                        eachFunc(collection, function (value, index, collection) {
                            accumulator = initAccum
                                ? (initAccum = false, value)
                                : iteratee(accumulator, value, index, collection);
                        });
                        return accumulator;
                    }
                    /**
                     * The base implementation of `_.sortBy` which uses `comparer` to define the
                     * sort order of `array` and replaces criteria objects with their corresponding
                     * values.
                     *
                     * @private
                     * @param {Array} array The array to sort.
                     * @param {Function} comparer The function to define sort order.
                     * @returns {Array} Returns `array`.
                     */
                    function baseSortBy(array, comparer) {
                        var length = array.length;
                        array.sort(comparer);
                        while (length--) {
                            array[length] = array[length].value;
                        }
                        return array;
                    }
                    /**
                     * The base implementation of `_.sum` and `_.sumBy` without support for
                     * iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {number} Returns the sum.
                     */
                    function baseSum(array, iteratee) {
                        var result, index = -1, length = array.length;
                        while (++index < length) {
                            var current = iteratee(array[index]);
                            if (current !== undefined) {
                                result = result === undefined ? current : (result + current);
                            }
                        }
                        return result;
                    }
                    /**
                     * The base implementation of `_.times` without support for iteratee shorthands
                     * or max array length checks.
                     *
                     * @private
                     * @param {number} n The number of times to invoke `iteratee`.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the array of results.
                     */
                    function baseTimes(n, iteratee) {
                        var index = -1, result = Array(n);
                        while (++index < n) {
                            result[index] = iteratee(index);
                        }
                        return result;
                    }
                    /**
                     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                     * of key-value pairs for `object` corresponding to the property names of `props`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} props The property names to get values for.
                     * @returns {Object} Returns the key-value pairs.
                     */
                    function baseToPairs(object, props) {
                        return arrayMap(props, function (key) {
                            return [key, object[key]];
                        });
                    }
                    /**
                     * The base implementation of `_.trim`.
                     *
                     * @private
                     * @param {string} string The string to trim.
                     * @returns {string} Returns the trimmed string.
                     */
                    function baseTrim(string) {
                        return string
                            ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
                            : string;
                    }
                    /**
                     * The base implementation of `_.unary` without support for storing metadata.
                     *
                     * @private
                     * @param {Function} func The function to cap arguments for.
                     * @returns {Function} Returns the new capped function.
                     */
                    function baseUnary(func) {
                        return function (value) {
                            return func(value);
                        };
                    }
                    /**
                     * The base implementation of `_.values` and `_.valuesIn` which creates an
                     * array of `object` property values corresponding to the property names
                     * of `props`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} props The property names to get values for.
                     * @returns {Object} Returns the array of property values.
                     */
                    function baseValues(object, props) {
                        return arrayMap(props, function (key) {
                            return object[key];
                        });
                    }
                    /**
                     * Checks if a `cache` value for `key` exists.
                     *
                     * @private
                     * @param {Object} cache The cache to query.
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function cacheHas(cache, key) {
                        return cache.has(key);
                    }
                    /**
                     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                     * that is not found in the character symbols.
                     *
                     * @private
                     * @param {Array} strSymbols The string symbols to inspect.
                     * @param {Array} chrSymbols The character symbols to find.
                     * @returns {number} Returns the index of the first unmatched string symbol.
                     */
                    function charsStartIndex(strSymbols, chrSymbols) {
                        var index = -1, length = strSymbols.length;
                        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
                        return index;
                    }
                    /**
                     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                     * that is not found in the character symbols.
                     *
                     * @private
                     * @param {Array} strSymbols The string symbols to inspect.
                     * @param {Array} chrSymbols The character symbols to find.
                     * @returns {number} Returns the index of the last unmatched string symbol.
                     */
                    function charsEndIndex(strSymbols, chrSymbols) {
                        var index = strSymbols.length;
                        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
                        return index;
                    }
                    /**
                     * Gets the number of `placeholder` occurrences in `array`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} placeholder The placeholder to search for.
                     * @returns {number} Returns the placeholder count.
                     */
                    function countHolders(array, placeholder) {
                        var length = array.length, result = 0;
                        while (length--) {
                            if (array[length] === placeholder) {
                                ++result;
                            }
                        }
                        return result;
                    }
                    /**
                     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                     * letters to basic Latin letters.
                     *
                     * @private
                     * @param {string} letter The matched letter to deburr.
                     * @returns {string} Returns the deburred letter.
                     */
                    var deburrLetter = basePropertyOf(deburredLetters);
                    /**
                     * Used by `_.escape` to convert characters to HTML entities.
                     *
                     * @private
                     * @param {string} chr The matched character to escape.
                     * @returns {string} Returns the escaped character.
                     */
                    var escapeHtmlChar = basePropertyOf(htmlEscapes);
                    /**
                     * Used by `_.template` to escape characters for inclusion in compiled string literals.
                     *
                     * @private
                     * @param {string} chr The matched character to escape.
                     * @returns {string} Returns the escaped character.
                     */
                    function escapeStringChar(chr) {
                        return '\\' + stringEscapes[chr];
                    }
                    /**
                     * Gets the value at `key` of `object`.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {string} key The key of the property to get.
                     * @returns {*} Returns the property value.
                     */
                    function getValue(object, key) {
                        return object == null ? undefined : object[key];
                    }
                    /**
                     * Checks if `string` contains Unicode symbols.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                     */
                    function hasUnicode(string) {
                        return reHasUnicode.test(string);
                    }
                    /**
                     * Checks if `string` contains a word composed of Unicode symbols.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {boolean} Returns `true` if a word is found, else `false`.
                     */
                    function hasUnicodeWord(string) {
                        return reHasUnicodeWord.test(string);
                    }
                    /**
                     * Converts `iterator` to an array.
                     *
                     * @private
                     * @param {Object} iterator The iterator to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function iteratorToArray(iterator) {
                        var data, result = [];
                        while (!(data = iterator.next()).done) {
                            result.push(data.value);
                        }
                        return result;
                    }
                    /**
                     * Converts `map` to its key-value pairs.
                     *
                     * @private
                     * @param {Object} map The map to convert.
                     * @returns {Array} Returns the key-value pairs.
                     */
                    function mapToArray(map) {
                        var index = -1, result = Array(map.size);
                        map.forEach(function (value, key) {
                            result[++index] = [key, value];
                        });
                        return result;
                    }
                    /**
                     * Creates a unary function that invokes `func` with its argument transformed.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {Function} transform The argument transform.
                     * @returns {Function} Returns the new function.
                     */
                    function overArg(func, transform) {
                        return function (arg) {
                            return func(transform(arg));
                        };
                    }
                    /**
                     * Replaces all `placeholder` elements in `array` with an internal placeholder
                     * and returns an array of their indexes.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {*} placeholder The placeholder to replace.
                     * @returns {Array} Returns the new array of placeholder indexes.
                     */
                    function replaceHolders(array, placeholder) {
                        var index = -1, length = array.length, resIndex = 0, result = [];
                        while (++index < length) {
                            var value = array[index];
                            if (value === placeholder || value === PLACEHOLDER) {
                                array[index] = PLACEHOLDER;
                                result[resIndex++] = index;
                            }
                        }
                        return result;
                    }
                    /**
                     * Converts `set` to an array of its values.
                     *
                     * @private
                     * @param {Object} set The set to convert.
                     * @returns {Array} Returns the values.
                     */
                    function setToArray(set) {
                        var index = -1, result = Array(set.size);
                        set.forEach(function (value) {
                            result[++index] = value;
                        });
                        return result;
                    }
                    /**
                     * Converts `set` to its value-value pairs.
                     *
                     * @private
                     * @param {Object} set The set to convert.
                     * @returns {Array} Returns the value-value pairs.
                     */
                    function setToPairs(set) {
                        var index = -1, result = Array(set.size);
                        set.forEach(function (value) {
                            result[++index] = [value, value];
                        });
                        return result;
                    }
                    /**
                     * A specialized version of `_.indexOf` which performs strict equality
                     * comparisons of values, i.e. `===`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function strictIndexOf(array, value, fromIndex) {
                        var index = fromIndex - 1, length = array.length;
                        while (++index < length) {
                            if (array[index] === value) {
                                return index;
                            }
                        }
                        return -1;
                    }
                    /**
                     * A specialized version of `_.lastIndexOf` which performs strict equality
                     * comparisons of values, i.e. `===`.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} fromIndex The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function strictLastIndexOf(array, value, fromIndex) {
                        var index = fromIndex + 1;
                        while (index--) {
                            if (array[index] === value) {
                                return index;
                            }
                        }
                        return index;
                    }
                    /**
                     * Gets the number of symbols in `string`.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {number} Returns the string size.
                     */
                    function stringSize(string) {
                        return hasUnicode(string)
                            ? unicodeSize(string)
                            : asciiSize(string);
                    }
                    /**
                     * Converts `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function stringToArray(string) {
                        return hasUnicode(string)
                            ? unicodeToArray(string)
                            : asciiToArray(string);
                    }
                    /**
                     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
                     * character of `string`.
                     *
                     * @private
                     * @param {string} string The string to inspect.
                     * @returns {number} Returns the index of the last non-whitespace character.
                     */
                    function trimmedEndIndex(string) {
                        var index = string.length;
                        while (index-- && reWhitespace.test(string.charAt(index))) { }
                        return index;
                    }
                    /**
                     * Used by `_.unescape` to convert HTML entities to characters.
                     *
                     * @private
                     * @param {string} chr The matched character to unescape.
                     * @returns {string} Returns the unescaped character.
                     */
                    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
                    /**
                     * Gets the size of a Unicode `string`.
                     *
                     * @private
                     * @param {string} string The string inspect.
                     * @returns {number} Returns the string size.
                     */
                    function unicodeSize(string) {
                        var result = reUnicode.lastIndex = 0;
                        while (reUnicode.test(string)) {
                            ++result;
                        }
                        return result;
                    }
                    /**
                     * Converts a Unicode `string` to an array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the converted array.
                     */
                    function unicodeToArray(string) {
                        return string.match(reUnicode) || [];
                    }
                    /**
                     * Splits a Unicode `string` into an array of its words.
                     *
                     * @private
                     * @param {string} The string to inspect.
                     * @returns {Array} Returns the words of `string`.
                     */
                    function unicodeWords(string) {
                        return string.match(reUnicodeWord) || [];
                    }
                    /*--------------------------------------------------------------------------*/
                    /**
                     * Create a new pristine `lodash` function using the `context` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Util
                     * @param {Object} [context=root] The context object.
                     * @returns {Function} Returns a new `lodash` function.
                     * @example
                     *
                     * _.mixin({ 'foo': _.constant('foo') });
                     *
                     * var lodash = _.runInContext();
                     * lodash.mixin({ 'bar': lodash.constant('bar') });
                     *
                     * _.isFunction(_.foo);
                     * // => true
                     * _.isFunction(_.bar);
                     * // => false
                     *
                     * lodash.isFunction(lodash.foo);
                     * // => false
                     * lodash.isFunction(lodash.bar);
                     * // => true
                     *
                     * // Create a suped-up `defer` in Node.js.
                     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                     */
                    var runInContext = (function runInContext(context) {
                        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
                        /** Built-in constructor references. */
                        var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
                        /** Used for built-in method references. */
                        var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
                        /** Used to detect overreaching core-js shims. */
                        var coreJsData = context['__core-js_shared__'];
                        /** Used to resolve the decompiled source of functions. */
                        var funcToString = funcProto.toString;
                        /** Used to check objects for own properties. */
                        var hasOwnProperty = objectProto.hasOwnProperty;
                        /** Used to generate unique IDs. */
                        var idCounter = 0;
                        /** Used to detect methods masquerading as native. */
                        var maskSrcKey = (function () {
                            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                            return uid ? ('Symbol(src)_1.' + uid) : '';
                        }());
                        /**
                         * Used to resolve the
                         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                         * of values.
                         */
                        var nativeObjectToString = objectProto.toString;
                        /** Used to infer the `Object` constructor. */
                        var objectCtorString = funcToString.call(Object);
                        /** Used to restore the original `_` reference in `_.noConflict`. */
                        var oldDash = root._;
                        /** Used to detect if a method is native. */
                        var reIsNative = RegExp('^' +
                            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
                        /** Built-in value references. */
                        var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
                        var defineProperty = (function () {
                            try {
                                var func = getNative(Object, 'defineProperty');
                                func({}, '', {});
                                return func;
                            }
                            catch (e) { }
                        }());
                        /** Mocked built-ins. */
                        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
                        /* Built-in method references for those with the same name as other `lodash` methods. */
                        var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
                        /* Built-in method references that are verified to be native. */
                        var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
                        /** Used to store function metadata. */
                        var metaMap = WeakMap && new WeakMap;
                        /** Used to lookup unminified function names. */
                        var realNames = {};
                        /** Used to detect maps, sets, and weakmaps. */
                        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
                        /** Used to convert symbols to primitives and strings. */
                        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a `lodash` object which wraps `value` to enable implicit method
                         * chain sequences. Methods that operate on and return arrays, collections,
                         * and functions can be chained together. Methods that retrieve a single value
                         * or may return a primitive value will automatically end the chain sequence
                         * and return the unwrapped value. Otherwise, the value must be unwrapped
                         * with `_#value`.
                         *
                         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                         * enabled using `_.chain`.
                         *
                         * The execution of chained methods is lazy, that is, it's deferred until
                         * `_#value` is implicitly or explicitly called.
                         *
                         * Lazy evaluation allows several methods to support shortcut fusion.
                         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                         * the creation of intermediate arrays and can greatly reduce the number of
                         * iteratee executions. Sections of a chain sequence qualify for shortcut
                         * fusion if the section is applied to an array and iteratees accept only
                         * one argument. The heuristic for whether a section qualifies for shortcut
                         * fusion is subject to change.
                         *
                         * Chaining is supported in custom builds as long as the `_#value` method is
                         * directly or indirectly included in the build.
                         *
                         * In addition to lodash methods, wrappers have `Array` and `String` methods.
                         *
                         * The wrapper `Array` methods are:
                         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                         *
                         * The wrapper `String` methods are:
                         * `replace` and `split`
                         *
                         * The wrapper methods that support shortcut fusion are:
                         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                         *
                         * The chainable wrapper methods are:
                         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                         * `zipObject`, `zipObjectDeep`, and `zipWith`
                         *
                         * The wrapper methods that are **not** chainable by default are:
                         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                         * `upperFirst`, `value`, and `words`
                         *
                         * @name _
                         * @constructor
                         * @category Seq
                         * @param {*} value The value to wrap in a `lodash` instance.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * var wrapped = _([1, 2, 3]);
                         *
                         * // Returns an unwrapped value.
                         * wrapped.reduce(_.add);
                         * // => 6
                         *
                         * // Returns a wrapped value.
                         * var squares = wrapped.map(square);
                         *
                         * _.isArray(squares);
                         * // => false
                         *
                         * _.isArray(squares.value());
                         * // => true
                         */
                        function lodash(value) {
                            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                                if (value instanceof LodashWrapper) {
                                    return value;
                                }
                                if (hasOwnProperty.call(value, '__wrapped__')) {
                                    return wrapperClone(value);
                                }
                            }
                            return new LodashWrapper(value);
                        }
                        /**
                         * The base implementation of `_.create` without support for assigning
                         * properties to the created object.
                         *
                         * @private
                         * @param {Object} proto The object to inherit from.
                         * @returns {Object} Returns the new object.
                         */
                        var baseCreate = (function () {
                            function object() { }
                            return function (proto) {
                                if (!isObject(proto)) {
                                    return {};
                                }
                                if (objectCreate) {
                                    return objectCreate(proto);
                                }
                                object.prototype = proto;
                                var result = new object;
                                object.prototype = undefined;
                                return result;
                            };
                        }());
                        /**
                         * The function whose prototype chain sequence wrappers inherit from.
                         *
                         * @private
                         */
                        function baseLodash() {
                            // No operation performed.
                        }
                        /**
                         * The base constructor for creating `lodash` wrapper objects.
                         *
                         * @private
                         * @param {*} value The value to wrap.
                         * @param {boolean} [chainAll] Enable explicit method chain sequences.
                         */
                        function LodashWrapper(value, chainAll) {
                            this.__wrapped__ = value;
                            this.__actions__ = [];
                            this.__chain__ = !!chainAll;
                            this.__index__ = 0;
                            this.__values__ = undefined;
                        }
                        /**
                         * By default, the template delimiters used by lodash are like those in
                         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                         * following template settings to use alternative delimiters.
                         *
                         * @static
                         * @memberOf _
                         * @type {Object}
                         */
                        lodash.templateSettings = {
                            /**
                             * Used to detect `data` property values to be HTML-escaped.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'escape': reEscape,
                            /**
                             * Used to detect code to be evaluated.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'evaluate': reEvaluate,
                            /**
                             * Used to detect `data` property values to inject.
                             *
                             * @memberOf _.templateSettings
                             * @type {RegExp}
                             */
                            'interpolate': reInterpolate,
                            /**
                             * Used to reference the data object in the template text.
                             *
                             * @memberOf _.templateSettings
                             * @type {string}
                             */
                            'variable': '',
                            /**
                             * Used to import variables into the compiled template.
                             *
                             * @memberOf _.templateSettings
                             * @type {Object}
                             */
                            'imports': {
                                /**
                                 * A reference to the `lodash` function.
                                 *
                                 * @memberOf _.templateSettings.imports
                                 * @type {Function}
                                 */
                                '_': lodash
                            }
                        };
                        // Ensure wrappers are instances of `baseLodash`.
                        lodash.prototype = baseLodash.prototype;
                        lodash.prototype.constructor = lodash;
                        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                        LodashWrapper.prototype.constructor = LodashWrapper;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                         *
                         * @private
                         * @constructor
                         * @param {*} value The value to wrap.
                         */
                        function LazyWrapper(value) {
                            this.__wrapped__ = value;
                            this.__actions__ = [];
                            this.__dir__ = 1;
                            this.__filtered__ = false;
                            this.__iteratees__ = [];
                            this.__takeCount__ = MAX_ARRAY_LENGTH;
                            this.__views__ = [];
                        }
                        /**
                         * Creates a clone of the lazy wrapper object.
                         *
                         * @private
                         * @name clone
                         * @memberOf LazyWrapper
                         * @returns {Object} Returns the cloned `LazyWrapper` object.
                         */
                        function lazyClone() {
                            var result = new LazyWrapper(this.__wrapped__);
                            result.__actions__ = copyArray(this.__actions__);
                            result.__dir__ = this.__dir__;
                            result.__filtered__ = this.__filtered__;
                            result.__iteratees__ = copyArray(this.__iteratees__);
                            result.__takeCount__ = this.__takeCount__;
                            result.__views__ = copyArray(this.__views__);
                            return result;
                        }
                        /**
                         * Reverses the direction of lazy iteration.
                         *
                         * @private
                         * @name reverse
                         * @memberOf LazyWrapper
                         * @returns {Object} Returns the new reversed `LazyWrapper` object.
                         */
                        function lazyReverse() {
                            if (this.__filtered__) {
                                var result = new LazyWrapper(this);
                                result.__dir__ = -1;
                                result.__filtered__ = true;
                            }
                            else {
                                result = this.clone();
                                result.__dir__ *= -1;
                            }
                            return result;
                        }
                        /**
                         * Extracts the unwrapped value from its lazy wrapper.
                         *
                         * @private
                         * @name value
                         * @memberOf LazyWrapper
                         * @returns {*} Returns the unwrapped value.
                         */
                        function lazyValue() {
                            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : (start - 1), iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
                            if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                                return baseWrapperValue(array, this.__actions__);
                            }
                            var result = [];
                            outer: while (length-- && resIndex < takeCount) {
                                index += dir;
                                var iterIndex = -1, value = array[index];
                                while (++iterIndex < iterLength) {
                                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                                    if (type == LAZY_MAP_FLAG) {
                                        value = computed;
                                    }
                                    else if (!computed) {
                                        if (type == LAZY_FILTER_FLAG) {
                                            continue outer;
                                        }
                                        else {
                                            break outer;
                                        }
                                    }
                                }
                                result[resIndex++] = value;
                            }
                            return result;
                        }
                        // Ensure `LazyWrapper` is an instance of `baseLodash`.
                        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                        LazyWrapper.prototype.constructor = LazyWrapper;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a hash object.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function Hash(entries) {
                            var index = -1, length = entries == null ? 0 : entries.length;
                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }
                        /**
                         * Removes all key-value entries from the hash.
                         *
                         * @private
                         * @name clear
                         * @memberOf Hash
                         */
                        function hashClear() {
                            this.__data__ = nativeCreate ? nativeCreate(null) : {};
                            this.size = 0;
                        }
                        /**
                         * Removes `key` and its value from the hash.
                         *
                         * @private
                         * @name delete
                         * @memberOf Hash
                         * @param {Object} hash The hash to modify.
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function hashDelete(key) {
                            var result = this.has(key) && delete this.__data__[key];
                            this.size -= result ? 1 : 0;
                            return result;
                        }
                        /**
                         * Gets the hash value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf Hash
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function hashGet(key) {
                            var data = this.__data__;
                            if (nativeCreate) {
                                var result = data[key];
                                return result === HASH_UNDEFINED ? undefined : result;
                            }
                            return hasOwnProperty.call(data, key) ? data[key] : undefined;
                        }
                        /**
                         * Checks if a hash value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf Hash
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function hashHas(key) {
                            var data = this.__data__;
                            return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                        }
                        /**
                         * Sets the hash `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf Hash
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the hash instance.
                         */
                        function hashSet(key, value) {
                            var data = this.__data__;
                            this.size += this.has(key) ? 0 : 1;
                            data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                            return this;
                        }
                        // Add methods to `Hash`.
                        Hash.prototype.clear = hashClear;
                        Hash.prototype['delete'] = hashDelete;
                        Hash.prototype.get = hashGet;
                        Hash.prototype.has = hashHas;
                        Hash.prototype.set = hashSet;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates an list cache object.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function ListCache(entries) {
                            var index = -1, length = entries == null ? 0 : entries.length;
                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }
                        /**
                         * Removes all key-value entries from the list cache.
                         *
                         * @private
                         * @name clear
                         * @memberOf ListCache
                         */
                        function listCacheClear() {
                            this.__data__ = [];
                            this.size = 0;
                        }
                        /**
                         * Removes `key` and its value from the list cache.
                         *
                         * @private
                         * @name delete
                         * @memberOf ListCache
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function listCacheDelete(key) {
                            var data = this.__data__, index = assocIndexOf(data, key);
                            if (index < 0) {
                                return false;
                            }
                            var lastIndex = data.length - 1;
                            if (index == lastIndex) {
                                data.pop();
                            }
                            else {
                                splice.call(data, index, 1);
                            }
                            --this.size;
                            return true;
                        }
                        /**
                         * Gets the list cache value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf ListCache
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function listCacheGet(key) {
                            var data = this.__data__, index = assocIndexOf(data, key);
                            return index < 0 ? undefined : data[index][1];
                        }
                        /**
                         * Checks if a list cache value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf ListCache
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function listCacheHas(key) {
                            return assocIndexOf(this.__data__, key) > -1;
                        }
                        /**
                         * Sets the list cache `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf ListCache
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the list cache instance.
                         */
                        function listCacheSet(key, value) {
                            var data = this.__data__, index = assocIndexOf(data, key);
                            if (index < 0) {
                                ++this.size;
                                data.push([key, value]);
                            }
                            else {
                                data[index][1] = value;
                            }
                            return this;
                        }
                        // Add methods to `ListCache`.
                        ListCache.prototype.clear = listCacheClear;
                        ListCache.prototype['delete'] = listCacheDelete;
                        ListCache.prototype.get = listCacheGet;
                        ListCache.prototype.has = listCacheHas;
                        ListCache.prototype.set = listCacheSet;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a map cache object to store key-value pairs.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function MapCache(entries) {
                            var index = -1, length = entries == null ? 0 : entries.length;
                            this.clear();
                            while (++index < length) {
                                var entry = entries[index];
                                this.set(entry[0], entry[1]);
                            }
                        }
                        /**
                         * Removes all key-value entries from the map.
                         *
                         * @private
                         * @name clear
                         * @memberOf MapCache
                         */
                        function mapCacheClear() {
                            this.size = 0;
                            this.__data__ = {
                                'hash': new Hash,
                                'map': new (Map || ListCache),
                                'string': new Hash
                            };
                        }
                        /**
                         * Removes `key` and its value from the map.
                         *
                         * @private
                         * @name delete
                         * @memberOf MapCache
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function mapCacheDelete(key) {
                            var result = getMapData(this, key)['delete'](key);
                            this.size -= result ? 1 : 0;
                            return result;
                        }
                        /**
                         * Gets the map value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf MapCache
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function mapCacheGet(key) {
                            return getMapData(this, key).get(key);
                        }
                        /**
                         * Checks if a map value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf MapCache
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function mapCacheHas(key) {
                            return getMapData(this, key).has(key);
                        }
                        /**
                         * Sets the map `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf MapCache
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the map cache instance.
                         */
                        function mapCacheSet(key, value) {
                            var data = getMapData(this, key), size = data.size;
                            data.set(key, value);
                            this.size += data.size == size ? 0 : 1;
                            return this;
                        }
                        // Add methods to `MapCache`.
                        MapCache.prototype.clear = mapCacheClear;
                        MapCache.prototype['delete'] = mapCacheDelete;
                        MapCache.prototype.get = mapCacheGet;
                        MapCache.prototype.has = mapCacheHas;
                        MapCache.prototype.set = mapCacheSet;
                        /*------------------------------------------------------------------------*/
                        /**
                         *
                         * Creates an array cache object to store unique values.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [values] The values to cache.
                         */
                        function SetCache(values) {
                            var index = -1, length = values == null ? 0 : values.length;
                            this.__data__ = new MapCache;
                            while (++index < length) {
                                this.add(values[index]);
                            }
                        }
                        /**
                         * Adds `value` to the array cache.
                         *
                         * @private
                         * @name add
                         * @memberOf SetCache
                         * @alias push
                         * @param {*} value The value to cache.
                         * @returns {Object} Returns the cache instance.
                         */
                        function setCacheAdd(value) {
                            this.__data__.set(value, HASH_UNDEFINED);
                            return this;
                        }
                        /**
                         * Checks if `value` is in the array cache.
                         *
                         * @private
                         * @name has
                         * @memberOf SetCache
                         * @param {*} value The value to search for.
                         * @returns {number} Returns `true` if `value` is found, else `false`.
                         */
                        function setCacheHas(value) {
                            return this.__data__.has(value);
                        }
                        // Add methods to `SetCache`.
                        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                        SetCache.prototype.has = setCacheHas;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a stack cache object to store key-value pairs.
                         *
                         * @private
                         * @constructor
                         * @param {Array} [entries] The key-value pairs to cache.
                         */
                        function Stack(entries) {
                            var data = this.__data__ = new ListCache(entries);
                            this.size = data.size;
                        }
                        /**
                         * Removes all key-value entries from the stack.
                         *
                         * @private
                         * @name clear
                         * @memberOf Stack
                         */
                        function stackClear() {
                            this.__data__ = new ListCache;
                            this.size = 0;
                        }
                        /**
                         * Removes `key` and its value from the stack.
                         *
                         * @private
                         * @name delete
                         * @memberOf Stack
                         * @param {string} key The key of the value to remove.
                         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                         */
                        function stackDelete(key) {
                            var data = this.__data__, result = data['delete'](key);
                            this.size = data.size;
                            return result;
                        }
                        /**
                         * Gets the stack value for `key`.
                         *
                         * @private
                         * @name get
                         * @memberOf Stack
                         * @param {string} key The key of the value to get.
                         * @returns {*} Returns the entry value.
                         */
                        function stackGet(key) {
                            return this.__data__.get(key);
                        }
                        /**
                         * Checks if a stack value for `key` exists.
                         *
                         * @private
                         * @name has
                         * @memberOf Stack
                         * @param {string} key The key of the entry to check.
                         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                         */
                        function stackHas(key) {
                            return this.__data__.has(key);
                        }
                        /**
                         * Sets the stack `key` to `value`.
                         *
                         * @private
                         * @name set
                         * @memberOf Stack
                         * @param {string} key The key of the value to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns the stack cache instance.
                         */
                        function stackSet(key, value) {
                            var data = this.__data__;
                            if (data instanceof ListCache) {
                                var pairs = data.__data__;
                                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                                    pairs.push([key, value]);
                                    this.size = ++data.size;
                                    return this;
                                }
                                data = this.__data__ = new MapCache(pairs);
                            }
                            data.set(key, value);
                            this.size = data.size;
                            return this;
                        }
                        // Add methods to `Stack`.
                        Stack.prototype.clear = stackClear;
                        Stack.prototype['delete'] = stackDelete;
                        Stack.prototype.get = stackGet;
                        Stack.prototype.has = stackHas;
                        Stack.prototype.set = stackSet;
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates an array of the enumerable property names of the array-like `value`.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @param {boolean} inherited Specify returning inherited property names.
                         * @returns {Array} Returns the array of property names.
                         */
                        function arrayLikeKeys(value, inherited) {
                            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
                            for (var key in value) {
                                if ((inherited || hasOwnProperty.call(value, key)) &&
                                    !(skipIndexes && (
                                    // Safari 9 has enumerable `arguments.length` in strict mode.
                                    key == 'length' ||
                                        // Node.js 0.10 has enumerable non-index properties on buffers.
                                        (isBuff && (key == 'offset' || key == 'parent')) ||
                                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                        // Skip index properties.
                                        isIndex(key, length)))) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }
                        /**
                         * A specialized version of `_.sample` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to sample.
                         * @returns {*} Returns the random element.
                         */
                        function arraySample(array) {
                            var length = array.length;
                            return length ? array[baseRandom(0, length - 1)] : undefined;
                        }
                        /**
                         * A specialized version of `_.sampleSize` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to sample.
                         * @param {number} n The number of elements to sample.
                         * @returns {Array} Returns the random elements.
                         */
                        function arraySampleSize(array, n) {
                            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                        }
                        /**
                         * A specialized version of `_.shuffle` for arrays.
                         *
                         * @private
                         * @param {Array} array The array to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         */
                        function arrayShuffle(array) {
                            return shuffleSelf(copyArray(array));
                        }
                        /**
                         * This function is like `assignValue` except that it doesn't assign
                         * `undefined` values.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function assignMergeValue(object, key, value) {
                            if ((value !== undefined && !eq(object[key], value)) ||
                                (value === undefined && !(key in object))) {
                                baseAssignValue(object, key, value);
                            }
                        }
                        /**
                         * Assigns `value` to `key` of `object` if the existing value is not equivalent
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function assignValue(object, key, value) {
                            var objValue = object[key];
                            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                                (value === undefined && !(key in object))) {
                                baseAssignValue(object, key, value);
                            }
                        }
                        /**
                         * Gets the index at which the `key` is found in `array` of key-value pairs.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {*} key The key to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         */
                        function assocIndexOf(array, key) {
                            var length = array.length;
                            while (length--) {
                                if (eq(array[length][0], key)) {
                                    return length;
                                }
                            }
                            return -1;
                        }
                        /**
                         * Aggregates elements of `collection` on `accumulator` with keys transformed
                         * by `iteratee` and values set by `setter`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} setter The function to set `accumulator` values.
                         * @param {Function} iteratee The iteratee to transform keys.
                         * @param {Object} accumulator The initial aggregated object.
                         * @returns {Function} Returns `accumulator`.
                         */
                        function baseAggregator(collection, setter, iteratee, accumulator) {
                            baseEach(collection, function (value, key, collection) {
                                setter(accumulator, value, iteratee(value), collection);
                            });
                            return accumulator;
                        }
                        /**
                         * The base implementation of `_.assign` without support for multiple sources
                         * or `customizer` functions.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @returns {Object} Returns `object`.
                         */
                        function baseAssign(object, source) {
                            return object && copyObject(source, keys(source), object);
                        }
                        /**
                         * The base implementation of `_.assignIn` without support for multiple sources
                         * or `customizer` functions.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @returns {Object} Returns `object`.
                         */
                        function baseAssignIn(object, source) {
                            return object && copyObject(source, keysIn(source), object);
                        }
                        /**
                         * The base implementation of `assignValue` and `assignMergeValue` without
                         * value checks.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {string} key The key of the property to assign.
                         * @param {*} value The value to assign.
                         */
                        function baseAssignValue(object, key, value) {
                            if (key == '__proto__' && defineProperty) {
                                defineProperty(object, key, {
                                    'configurable': true,
                                    'enumerable': true,
                                    'value': value,
                                    'writable': true
                                });
                            }
                            else {
                                object[key] = value;
                            }
                        }
                        /**
                         * The base implementation of `_.at` without support for individual paths.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {string[]} paths The property paths to pick.
                         * @returns {Array} Returns the picked elements.
                         */
                        function baseAt(object, paths) {
                            var index = -1, length = paths.length, result = Array(length), skip = object == null;
                            while (++index < length) {
                                result[index] = skip ? undefined : get(object, paths[index]);
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.clamp` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {number} number The number to clamp.
                         * @param {number} [lower] The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the clamped number.
                         */
                        function baseClamp(number, lower, upper) {
                            if (number === number) {
                                if (upper !== undefined) {
                                    number = number <= upper ? number : upper;
                                }
                                if (lower !== undefined) {
                                    number = number >= lower ? number : lower;
                                }
                            }
                            return number;
                        }
                        /**
                         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                         * traversed objects.
                         *
                         * @private
                         * @param {*} value The value to clone.
                         * @param {boolean} bitmask The bitmask flags.
                         *  1 - Deep clone
                         *  2 - Flatten inherited properties
                         *  4 - Clone symbols
                         * @param {Function} [customizer] The function to customize cloning.
                         * @param {string} [key] The key of `value`.
                         * @param {Object} [object] The parent object of `value`.
                         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                         * @returns {*} Returns the cloned value.
                         */
                        function baseClone(value, bitmask, customizer, key, object, stack) {
                            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
                            if (customizer) {
                                result = object ? customizer(value, key, object, stack) : customizer(value);
                            }
                            if (result !== undefined) {
                                return result;
                            }
                            if (!isObject(value)) {
                                return value;
                            }
                            var isArr = isArray(value);
                            if (isArr) {
                                result = initCloneArray(value);
                                if (!isDeep) {
                                    return copyArray(value, result);
                                }
                            }
                            else {
                                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                                if (isBuffer(value)) {
                                    return cloneBuffer(value, isDeep);
                                }
                                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                    result = (isFlat || isFunc) ? {} : initCloneObject(value);
                                    if (!isDeep) {
                                        return isFlat
                                            ? copySymbolsIn(value, baseAssignIn(result, value))
                                            : copySymbols(value, baseAssign(result, value));
                                    }
                                }
                                else {
                                    if (!cloneableTags[tag]) {
                                        return object ? value : {};
                                    }
                                    result = initCloneByTag(value, tag, isDeep);
                                }
                            }
                            // Check for circular references and return its corresponding clone.
                            stack || (stack = new Stack);
                            var stacked = stack.get(value);
                            if (stacked) {
                                return stacked;
                            }
                            stack.set(value, result);
                            if (isSet(value)) {
                                value.forEach(function (subValue) {
                                    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                                });
                            }
                            else if (isMap(value)) {
                                value.forEach(function (subValue, key) {
                                    result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                                });
                            }
                            var keysFunc = isFull
                                ? (isFlat ? getAllKeysIn : getAllKeys)
                                : (isFlat ? keysIn : keys);
                            var props = isArr ? undefined : keysFunc(value);
                            arrayEach(props || value, function (subValue, key) {
                                if (props) {
                                    key = subValue;
                                    subValue = value[key];
                                }
                                // Recursively populate clone (susceptible to call stack limits).
                                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                            });
                            return result;
                        }
                        /**
                         * The base implementation of `_.conforms` which doesn't clone `source`.
                         *
                         * @private
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseConforms(source) {
                            var props = keys(source);
                            return function (object) {
                                return baseConformsTo(object, source, props);
                            };
                        }
                        /**
                         * The base implementation of `_.conformsTo` which accepts `props` to check.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                         */
                        function baseConformsTo(object, source, props) {
                            var length = props.length;
                            if (object == null) {
                                return !length;
                            }
                            object = Object(object);
                            while (length--) {
                                var key = props[length], predicate = source[key], value = object[key];
                                if ((value === undefined && !(key in object)) || !predicate(value)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        /**
                         * The base implementation of `_.delay` and `_.defer` which accepts `args`
                         * to provide to `func`.
                         *
                         * @private
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @param {Array} args The arguments to provide to `func`.
                         * @returns {number|Object} Returns the timer id or timeout object.
                         */
                        function baseDelay(func, wait, args) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return setTimeout(function () { func.apply(undefined, args); }, wait);
                        }
                        /**
                         * The base implementation of methods like `_.difference` without support
                         * for excluding multiple arrays or iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Array} values The values to exclude.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         */
                        function baseDifference(array, values, iteratee, comparator) {
                            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
                            if (!length) {
                                return result;
                            }
                            if (iteratee) {
                                values = arrayMap(values, baseUnary(iteratee));
                            }
                            if (comparator) {
                                includes = arrayIncludesWith;
                                isCommon = false;
                            }
                            else if (values.length >= LARGE_ARRAY_SIZE) {
                                includes = cacheHas;
                                isCommon = false;
                                values = new SetCache(values);
                            }
                            outer: while (++index < length) {
                                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var valuesIndex = valuesLength;
                                    while (valuesIndex--) {
                                        if (values[valuesIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    result.push(value);
                                }
                                else if (!includes(values, computed, comparator)) {
                                    result.push(value);
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.forEach` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         */
                        var baseEach = createBaseEach(baseForOwn);
                        /**
                         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         */
                        var baseEachRight = createBaseEach(baseForOwnRight, true);
                        /**
                         * The base implementation of `_.every` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if all elements pass the predicate check,
                         *  else `false`
                         */
                        function baseEvery(collection, predicate) {
                            var result = true;
                            baseEach(collection, function (value, index, collection) {
                                result = !!predicate(value, index, collection);
                                return result;
                            });
                            return result;
                        }
                        /**
                         * The base implementation of methods like `_.max` and `_.min` which accepts a
                         * `comparator` to determine the extremum value.
                         *
                         * @private
                         * @param {Array} array The array to iterate over.
                         * @param {Function} iteratee The iteratee invoked per iteration.
                         * @param {Function} comparator The comparator used to compare values.
                         * @returns {*} Returns the extremum value.
                         */
                        function baseExtremum(array, iteratee, comparator) {
                            var index = -1, length = array.length;
                            while (++index < length) {
                                var value = array[index], current = iteratee(value);
                                if (current != null && (computed === undefined
                                    ? (current === current && !isSymbol(current))
                                    : comparator(current, computed))) {
                                    var computed = current, result = value;
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.fill` without an iteratee call guard.
                         *
                         * @private
                         * @param {Array} array The array to fill.
                         * @param {*} value The value to fill `array` with.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns `array`.
                         */
                        function baseFill(array, value, start, end) {
                            var length = array.length;
                            start = toInteger(start);
                            if (start < 0) {
                                start = -start > length ? 0 : (length + start);
                            }
                            end = (end === undefined || end > length) ? length : toInteger(end);
                            if (end < 0) {
                                end += length;
                            }
                            end = start > end ? 0 : toLength(end);
                            while (start < end) {
                                array[start++] = value;
                            }
                            return array;
                        }
                        /**
                         * The base implementation of `_.filter` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         */
                        function baseFilter(collection, predicate) {
                            var result = [];
                            baseEach(collection, function (value, index, collection) {
                                if (predicate(value, index, collection)) {
                                    result.push(value);
                                }
                            });
                            return result;
                        }
                        /**
                         * The base implementation of `_.flatten` with support for restricting flattening.
                         *
                         * @private
                         * @param {Array} array The array to flatten.
                         * @param {number} depth The maximum recursion depth.
                         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                         * @param {Array} [result=[]] The initial result value.
                         * @returns {Array} Returns the new flattened array.
                         */
                        function baseFlatten(array, depth, predicate, isStrict, result) {
                            var index = -1, length = array.length;
                            predicate || (predicate = isFlattenable);
                            result || (result = []);
                            while (++index < length) {
                                var value = array[index];
                                if (depth > 0 && predicate(value)) {
                                    if (depth > 1) {
                                        // Recursively flatten arrays (susceptible to call stack limits).
                                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                                    }
                                    else {
                                        arrayPush(result, value);
                                    }
                                }
                                else if (!isStrict) {
                                    result[result.length] = value;
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `baseForOwn` which iterates over `object`
                         * properties returned by `keysFunc` and invokes `iteratee` for each property.
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @returns {Object} Returns `object`.
                         */
                        var baseFor = createBaseFor();
                        /**
                         * This function is like `baseFor` except that it iterates over properties
                         * in the opposite order.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @returns {Object} Returns `object`.
                         */
                        var baseForRight = createBaseFor(true);
                        /**
                         * The base implementation of `_.forOwn` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         */
                        function baseForOwn(object, iteratee) {
                            return object && baseFor(object, iteratee, keys);
                        }
                        /**
                         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         */
                        function baseForOwnRight(object, iteratee) {
                            return object && baseForRight(object, iteratee, keys);
                        }
                        /**
                         * The base implementation of `_.functions` which creates an array of
                         * `object` function property names filtered from `props`.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Array} props The property names to filter.
                         * @returns {Array} Returns the function names.
                         */
                        function baseFunctions(object, props) {
                            return arrayFilter(props, function (key) {
                                return isFunction(object[key]);
                            });
                        }
                        /**
                         * The base implementation of `_.get` without support for default values.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to get.
                         * @returns {*} Returns the resolved value.
                         */
                        function baseGet(object, path) {
                            path = castPath(path, object);
                            var index = 0, length = path.length;
                            while (object != null && index < length) {
                                object = object[toKey(path[index++])];
                            }
                            return (index && index == length) ? object : undefined;
                        }
                        /**
                         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                         * symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Function} keysFunc The function to get the keys of `object`.
                         * @param {Function} symbolsFunc The function to get the symbols of `object`.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                            var result = keysFunc(object);
                            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                        }
                        /**
                         * The base implementation of `getTag` without fallbacks for buggy environments.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the `toStringTag`.
                         */
                        function baseGetTag(value) {
                            if (value == null) {
                                return value === undefined ? undefinedTag : nullTag;
                            }
                            return (symToStringTag && symToStringTag in Object(value))
                                ? getRawTag(value)
                                : objectToString(value);
                        }
                        /**
                         * The base implementation of `_.gt` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than `other`,
                         *  else `false`.
                         */
                        function baseGt(value, other) {
                            return value > other;
                        }
                        /**
                         * The base implementation of `_.has` without support for deep paths.
                         *
                         * @private
                         * @param {Object} [object] The object to query.
                         * @param {Array|string} key The key to check.
                         * @returns {boolean} Returns `true` if `key` exists, else `false`.
                         */
                        function baseHas(object, key) {
                            return object != null && hasOwnProperty.call(object, key);
                        }
                        /**
                         * The base implementation of `_.hasIn` without support for deep paths.
                         *
                         * @private
                         * @param {Object} [object] The object to query.
                         * @param {Array|string} key The key to check.
                         * @returns {boolean} Returns `true` if `key` exists, else `false`.
                         */
                        function baseHasIn(object, key) {
                            return object != null && key in Object(object);
                        }
                        /**
                         * The base implementation of `_.inRange` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {number} number The number to check.
                         * @param {number} start The start of the range.
                         * @param {number} end The end of the range.
                         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                         */
                        function baseInRange(number, start, end) {
                            return number >= nativeMin(start, end) && number < nativeMax(start, end);
                        }
                        /**
                         * The base implementation of methods like `_.intersection`, without support
                         * for iteratee shorthands, that accepts an array of arrays to inspect.
                         *
                         * @private
                         * @param {Array} arrays The arrays to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of shared values.
                         */
                        function baseIntersection(arrays, iteratee, comparator) {
                            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
                            while (othIndex--) {
                                var array = arrays[othIndex];
                                if (othIndex && iteratee) {
                                    array = arrayMap(array, baseUnary(iteratee));
                                }
                                maxLength = nativeMin(array.length, maxLength);
                                caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                                    ? new SetCache(othIndex && array)
                                    : undefined;
                            }
                            array = arrays[0];
                            var index = -1, seen = caches[0];
                            outer: while (++index < length && result.length < maxLength) {
                                var value = array[index], computed = iteratee ? iteratee(value) : value;
                                value = (comparator || value !== 0) ? value : 0;
                                if (!(seen
                                    ? cacheHas(seen, computed)
                                    : includes(result, computed, comparator))) {
                                    othIndex = othLength;
                                    while (--othIndex) {
                                        var cache = caches[othIndex];
                                        if (!(cache
                                            ? cacheHas(cache, computed)
                                            : includes(arrays[othIndex], computed, comparator))) {
                                            continue outer;
                                        }
                                    }
                                    if (seen) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.invert` and `_.invertBy` which inverts
                         * `object` with values transformed by `iteratee` and set by `setter`.
                         *
                         * @private
                         * @param {Object} object The object to iterate over.
                         * @param {Function} setter The function to set `accumulator` values.
                         * @param {Function} iteratee The iteratee to transform values.
                         * @param {Object} accumulator The initial inverted object.
                         * @returns {Function} Returns `accumulator`.
                         */
                        function baseInverter(object, setter, iteratee, accumulator) {
                            baseForOwn(object, function (value, key, object) {
                                setter(accumulator, iteratee(value), key, object);
                            });
                            return accumulator;
                        }
                        /**
                         * The base implementation of `_.invoke` without support for individual
                         * method arguments.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {Array} args The arguments to invoke the method with.
                         * @returns {*} Returns the result of the invoked method.
                         */
                        function baseInvoke(object, path, args) {
                            path = castPath(path, object);
                            object = parent(object, path);
                            var func = object == null ? object : object[toKey(last(path))];
                            return func == null ? undefined : apply(func, object, args);
                        }
                        /**
                         * The base implementation of `_.isArguments`.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                         */
                        function baseIsArguments(value) {
                            return isObjectLike(value) && baseGetTag(value) == argsTag;
                        }
                        /**
                         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                         */
                        function baseIsArrayBuffer(value) {
                            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                        }
                        /**
                         * The base implementation of `_.isDate` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                         */
                        function baseIsDate(value) {
                            return isObjectLike(value) && baseGetTag(value) == dateTag;
                        }
                        /**
                         * The base implementation of `_.isEqual` which supports partial comparisons
                         * and tracks traversed objects.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @param {boolean} bitmask The bitmask flags.
                         *  1 - Unordered comparison
                         *  2 - Partial comparison
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         */
                        function baseIsEqual(value, other, bitmask, customizer, stack) {
                            if (value === other) {
                                return true;
                            }
                            if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                                return value !== value && other !== other;
                            }
                            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                        }
                        /**
                         * A specialized version of `baseIsEqual` for arrays and objects which performs
                         * deep comparisons and tracks traversed objects enabling objects with circular
                         * references to be compared.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
                            objTag = objTag == argsTag ? objectTag : objTag;
                            othTag = othTag == argsTag ? objectTag : othTag;
                            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
                            if (isSameTag && isBuffer(object)) {
                                if (!isBuffer(other)) {
                                    return false;
                                }
                                objIsArr = true;
                                objIsObj = false;
                            }
                            if (isSameTag && !objIsObj) {
                                stack || (stack = new Stack);
                                return (objIsArr || isTypedArray(object))
                                    ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                                    : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                            }
                            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                                if (objIsWrapped || othIsWrapped) {
                                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                                    stack || (stack = new Stack);
                                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                                }
                            }
                            if (!isSameTag) {
                                return false;
                            }
                            stack || (stack = new Stack);
                            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                        }
                        /**
                         * The base implementation of `_.isMap` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                         */
                        function baseIsMap(value) {
                            return isObjectLike(value) && getTag(value) == mapTag;
                        }
                        /**
                         * The base implementation of `_.isMatch` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @param {Array} matchData The property names, values, and compare flags to match.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         */
                        function baseIsMatch(object, source, matchData, customizer) {
                            var index = matchData.length, length = index, noCustomizer = !customizer;
                            if (object == null) {
                                return !length;
                            }
                            object = Object(object);
                            while (index--) {
                                var data = matchData[index];
                                if ((noCustomizer && data[2])
                                    ? data[1] !== object[data[0]]
                                    : !(data[0] in object)) {
                                    return false;
                                }
                            }
                            while (++index < length) {
                                data = matchData[index];
                                var key = data[0], objValue = object[key], srcValue = data[1];
                                if (noCustomizer && data[2]) {
                                    if (objValue === undefined && !(key in object)) {
                                        return false;
                                    }
                                }
                                else {
                                    var stack = new Stack;
                                    if (customizer) {
                                        var result = customizer(objValue, srcValue, key, object, source, stack);
                                    }
                                    if (!(result === undefined
                                        ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                                        : result)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        /**
                         * The base implementation of `_.isNative` without bad shim checks.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a native function,
                         *  else `false`.
                         */
                        function baseIsNative(value) {
                            if (!isObject(value) || isMasked(value)) {
                                return false;
                            }
                            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                            return pattern.test(toSource(value));
                        }
                        /**
                         * The base implementation of `_.isRegExp` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                         */
                        function baseIsRegExp(value) {
                            return isObjectLike(value) && baseGetTag(value) == regexpTag;
                        }
                        /**
                         * The base implementation of `_.isSet` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                         */
                        function baseIsSet(value) {
                            return isObjectLike(value) && getTag(value) == setTag;
                        }
                        /**
                         * The base implementation of `_.isTypedArray` without Node.js optimizations.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                         */
                        function baseIsTypedArray(value) {
                            return isObjectLike(value) &&
                                isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                        }
                        /**
                         * The base implementation of `_.iteratee`.
                         *
                         * @private
                         * @param {*} [value=_.identity] The value to convert to an iteratee.
                         * @returns {Function} Returns the iteratee.
                         */
                        function baseIteratee(value) {
                            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                            if (typeof value == 'function') {
                                return value;
                            }
                            if (value == null) {
                                return identity;
                            }
                            if (typeof value == 'object') {
                                return isArray(value)
                                    ? baseMatchesProperty(value[0], value[1])
                                    : baseMatches(value);
                            }
                            return property(value);
                        }
                        /**
                         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function baseKeys(object) {
                            if (!isPrototype(object)) {
                                return nativeKeys(object);
                            }
                            var result = [];
                            for (var key in Object(object)) {
                                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                    result.push(key);
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function baseKeysIn(object) {
                            if (!isObject(object)) {
                                return nativeKeysIn(object);
                            }
                            var isProto = isPrototype(object), result = [];
                            for (var key in object) {
                                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.lt` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than `other`,
                         *  else `false`.
                         */
                        function baseLt(value, other) {
                            return value < other;
                        }
                        /**
                         * The base implementation of `_.map` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} iteratee The function invoked per iteration.
                         * @returns {Array} Returns the new mapped array.
                         */
                        function baseMap(collection, iteratee) {
                            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
                            baseEach(collection, function (value, key, collection) {
                                result[++index] = iteratee(value, key, collection);
                            });
                            return result;
                        }
                        /**
                         * The base implementation of `_.matches` which doesn't clone `source`.
                         *
                         * @private
                         * @param {Object} source The object of property values to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseMatches(source) {
                            var matchData = getMatchData(source);
                            if (matchData.length == 1 && matchData[0][2]) {
                                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                            }
                            return function (object) {
                                return object === source || baseIsMatch(object, source, matchData);
                            };
                        }
                        /**
                         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                         *
                         * @private
                         * @param {string} path The path of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function baseMatchesProperty(path, srcValue) {
                            if (isKey(path) && isStrictComparable(srcValue)) {
                                return matchesStrictComparable(toKey(path), srcValue);
                            }
                            return function (object) {
                                var objValue = get(object, path);
                                return (objValue === undefined && objValue === srcValue)
                                    ? hasIn(object, path)
                                    : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                            };
                        }
                        /**
                         * The base implementation of `_.merge` without support for multiple sources.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @param {number} srcIndex The index of `source`.
                         * @param {Function} [customizer] The function to customize merged values.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         */
                        function baseMerge(object, source, srcIndex, customizer, stack) {
                            if (object === source) {
                                return;
                            }
                            baseFor(source, function (srcValue, key) {
                                stack || (stack = new Stack);
                                if (isObject(srcValue)) {
                                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                                }
                                else {
                                    var newValue = customizer
                                        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                                        : undefined;
                                    if (newValue === undefined) {
                                        newValue = srcValue;
                                    }
                                    assignMergeValue(object, key, newValue);
                                }
                            }, keysIn);
                        }
                        /**
                         * A specialized version of `baseMerge` for arrays and objects which performs
                         * deep merges and tracks traversed objects enabling objects with circular
                         * references to be merged.
                         *
                         * @private
                         * @param {Object} object The destination object.
                         * @param {Object} source The source object.
                         * @param {string} key The key of the value to merge.
                         * @param {number} srcIndex The index of `source`.
                         * @param {Function} mergeFunc The function to merge values.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         */
                        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
                            if (stacked) {
                                assignMergeValue(object, key, stacked);
                                return;
                            }
                            var newValue = customizer
                                ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                                : undefined;
                            var isCommon = newValue === undefined;
                            if (isCommon) {
                                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                                newValue = srcValue;
                                if (isArr || isBuff || isTyped) {
                                    if (isArray(objValue)) {
                                        newValue = objValue;
                                    }
                                    else if (isArrayLikeObject(objValue)) {
                                        newValue = copyArray(objValue);
                                    }
                                    else if (isBuff) {
                                        isCommon = false;
                                        newValue = cloneBuffer(srcValue, true);
                                    }
                                    else if (isTyped) {
                                        isCommon = false;
                                        newValue = cloneTypedArray(srcValue, true);
                                    }
                                    else {
                                        newValue = [];
                                    }
                                }
                                else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                    newValue = objValue;
                                    if (isArguments(objValue)) {
                                        newValue = toPlainObject(objValue);
                                    }
                                    else if (!isObject(objValue) || isFunction(objValue)) {
                                        newValue = initCloneObject(srcValue);
                                    }
                                }
                                else {
                                    isCommon = false;
                                }
                            }
                            if (isCommon) {
                                // Recursively merge objects and arrays (susceptible to call stack limits).
                                stack.set(srcValue, newValue);
                                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                                stack['delete'](srcValue);
                            }
                            assignMergeValue(object, key, newValue);
                        }
                        /**
                         * The base implementation of `_.nth` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {Array} array The array to query.
                         * @param {number} n The index of the element to return.
                         * @returns {*} Returns the nth element of `array`.
                         */
                        function baseNth(array, n) {
                            var length = array.length;
                            if (!length) {
                                return;
                            }
                            n += n < 0 ? length : 0;
                            return isIndex(n, length) ? array[n] : undefined;
                        }
                        /**
                         * The base implementation of `_.orderBy` without param guards.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                         * @param {string[]} orders The sort orders of `iteratees`.
                         * @returns {Array} Returns the new sorted array.
                         */
                        function baseOrderBy(collection, iteratees, orders) {
                            if (iteratees.length) {
                                iteratees = arrayMap(iteratees, function (iteratee) {
                                    if (isArray(iteratee)) {
                                        return function (value) {
                                            return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                                        };
                                    }
                                    return iteratee;
                                });
                            }
                            else {
                                iteratees = [identity];
                            }
                            var index = -1;
                            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                            var result = baseMap(collection, function (value, key, collection) {
                                var criteria = arrayMap(iteratees, function (iteratee) {
                                    return iteratee(value);
                                });
                                return { 'criteria': criteria, 'index': ++index, 'value': value };
                            });
                            return baseSortBy(result, function (object, other) {
                                return compareMultiple(object, other, orders);
                            });
                        }
                        /**
                         * The base implementation of `_.pick` without support for individual
                         * property identifiers.
                         *
                         * @private
                         * @param {Object} object The source object.
                         * @param {string[]} paths The property paths to pick.
                         * @returns {Object} Returns the new object.
                         */
                        function basePick(object, paths) {
                            return basePickBy(object, paths, function (value, path) {
                                return hasIn(object, path);
                            });
                        }
                        /**
                         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Object} object The source object.
                         * @param {string[]} paths The property paths to pick.
                         * @param {Function} predicate The function invoked per property.
                         * @returns {Object} Returns the new object.
                         */
                        function basePickBy(object, paths, predicate) {
                            var index = -1, length = paths.length, result = {};
                            while (++index < length) {
                                var path = paths[index], value = baseGet(object, path);
                                if (predicate(value, path)) {
                                    baseSet(result, castPath(path, object), value);
                                }
                            }
                            return result;
                        }
                        /**
                         * A specialized version of `baseProperty` which supports deep paths.
                         *
                         * @private
                         * @param {Array|string} path The path of the property to get.
                         * @returns {Function} Returns the new accessor function.
                         */
                        function basePropertyDeep(path) {
                            return function (object) {
                                return baseGet(object, path);
                            };
                        }
                        /**
                         * The base implementation of `_.pullAllBy` without support for iteratee
                         * shorthands.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns `array`.
                         */
                        function basePullAll(array, values, iteratee, comparator) {
                            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
                            if (array === values) {
                                values = copyArray(values);
                            }
                            if (iteratee) {
                                seen = arrayMap(array, baseUnary(iteratee));
                            }
                            while (++index < length) {
                                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                    if (seen !== array) {
                                        splice.call(seen, fromIndex, 1);
                                    }
                                    splice.call(array, fromIndex, 1);
                                }
                            }
                            return array;
                        }
                        /**
                         * The base implementation of `_.pullAt` without support for individual
                         * indexes or capturing the removed elements.
                         *
                         * @private
                         * @param {Array} array The array to modify.
                         * @param {number[]} indexes The indexes of elements to remove.
                         * @returns {Array} Returns `array`.
                         */
                        function basePullAt(array, indexes) {
                            var length = array ? indexes.length : 0, lastIndex = length - 1;
                            while (length--) {
                                var index = indexes[length];
                                if (length == lastIndex || index !== previous) {
                                    var previous = index;
                                    if (isIndex(index)) {
                                        splice.call(array, index, 1);
                                    }
                                    else {
                                        baseUnset(array, index);
                                    }
                                }
                            }
                            return array;
                        }
                        /**
                         * The base implementation of `_.random` without support for returning
                         * floating-point numbers.
                         *
                         * @private
                         * @param {number} lower The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the random number.
                         */
                        function baseRandom(lower, upper) {
                            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                        }
                        /**
                         * The base implementation of `_.range` and `_.rangeRight` which doesn't
                         * coerce arguments.
                         *
                         * @private
                         * @param {number} start The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} step The value to increment or decrement by.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Array} Returns the range of numbers.
                         */
                        function baseRange(start, end, step, fromRight) {
                            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
                            while (length--) {
                                result[fromRight ? length : ++index] = start;
                                start += step;
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.repeat` which doesn't coerce arguments.
                         *
                         * @private
                         * @param {string} string The string to repeat.
                         * @param {number} n The number of times to repeat the string.
                         * @returns {string} Returns the repeated string.
                         */
                        function baseRepeat(string, n) {
                            var result = '';
                            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                                return result;
                            }
                            // Leverage the exponentiation by squaring algorithm for a faster repeat.
                            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                            do {
                                if (n % 2) {
                                    result += string;
                                }
                                n = nativeFloor(n / 2);
                                if (n) {
                                    string += string;
                                }
                            } while (n);
                            return result;
                        }
                        /**
                         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @returns {Function} Returns the new function.
                         */
                        function baseRest(func, start) {
                            return setToString(overRest(func, start, identity), func + '');
                        }
                        /**
                         * The base implementation of `_.sample`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to sample.
                         * @returns {*} Returns the random element.
                         */
                        function baseSample(collection) {
                            return arraySample(values(collection));
                        }
                        /**
                         * The base implementation of `_.sampleSize` without param guards.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to sample.
                         * @param {number} n The number of elements to sample.
                         * @returns {Array} Returns the random elements.
                         */
                        function baseSampleSize(collection, n) {
                            var array = values(collection);
                            return shuffleSelf(array, baseClamp(n, 0, array.length));
                        }
                        /**
                         * The base implementation of `_.set`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @param {Function} [customizer] The function to customize path creation.
                         * @returns {Object} Returns `object`.
                         */
                        function baseSet(object, path, value, customizer) {
                            if (!isObject(object)) {
                                return object;
                            }
                            path = castPath(path, object);
                            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
                            while (nested != null && ++index < length) {
                                var key = toKey(path[index]), newValue = value;
                                if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                                    return object;
                                }
                                if (index != lastIndex) {
                                    var objValue = nested[key];
                                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                    if (newValue === undefined) {
                                        newValue = isObject(objValue)
                                            ? objValue
                                            : (isIndex(path[index + 1]) ? [] : {});
                                    }
                                }
                                assignValue(nested, key, newValue);
                                nested = nested[key];
                            }
                            return object;
                        }
                        /**
                         * The base implementation of `setData` without support for hot loop shorting.
                         *
                         * @private
                         * @param {Function} func The function to associate metadata with.
                         * @param {*} data The metadata.
                         * @returns {Function} Returns `func`.
                         */
                        var baseSetData = !metaMap ? identity : function (func, data) {
                            metaMap.set(func, data);
                            return func;
                        };
                        /**
                         * The base implementation of `setToString` without support for hot loop shorting.
                         *
                         * @private
                         * @param {Function} func The function to modify.
                         * @param {Function} string The `toString` result.
                         * @returns {Function} Returns `func`.
                         */
                        var baseSetToString = !defineProperty ? identity : function (func, string) {
                            return defineProperty(func, 'toString', {
                                'configurable': true,
                                'enumerable': false,
                                'value': constant(string),
                                'writable': true
                            });
                        };
                        /**
                         * The base implementation of `_.shuffle`.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         */
                        function baseShuffle(collection) {
                            return shuffleSelf(values(collection));
                        }
                        /**
                         * The base implementation of `_.slice` without an iteratee call guard.
                         *
                         * @private
                         * @param {Array} array The array to slice.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function baseSlice(array, start, end) {
                            var index = -1, length = array.length;
                            if (start < 0) {
                                start = -start > length ? 0 : (length + start);
                            }
                            end = end > length ? length : end;
                            if (end < 0) {
                                end += length;
                            }
                            length = start > end ? 0 : ((end - start) >>> 0);
                            start >>>= 0;
                            var result = Array(length);
                            while (++index < length) {
                                result[index] = array[index + start];
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.some` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} predicate The function invoked per iteration.
                         * @returns {boolean} Returns `true` if any element passes the predicate check,
                         *  else `false`.
                         */
                        function baseSome(collection, predicate) {
                            var result;
                            baseEach(collection, function (value, index, collection) {
                                result = predicate(value, index, collection);
                                return !result;
                            });
                            return !!result;
                        }
                        /**
                         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                         * performs a binary search of `array` to determine the index at which `value`
                         * should be inserted into `array` in order to maintain its sort order.
                         *
                         * @private
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {boolean} [retHighest] Specify returning the highest qualified index.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         */
                        function baseSortedIndex(array, value, retHighest) {
                            var low = 0, high = array == null ? low : array.length;
                            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                                while (low < high) {
                                    var mid = (low + high) >>> 1, computed = array[mid];
                                    if (computed !== null && !isSymbol(computed) &&
                                        (retHighest ? (computed <= value) : (computed < value))) {
                                        low = mid + 1;
                                    }
                                    else {
                                        high = mid;
                                    }
                                }
                                return high;
                            }
                            return baseSortedIndexBy(array, value, identity, retHighest);
                        }
                        /**
                         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                         * which invokes `iteratee` for `value` and each element of `array` to compute
                         * their sort ranking. The iteratee is invoked with one argument; (value).
                         *
                         * @private
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} iteratee The iteratee invoked per element.
                         * @param {boolean} [retHighest] Specify returning the highest qualified index.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         */
                        function baseSortedIndexBy(array, value, iteratee, retHighest) {
                            var low = 0, high = array == null ? 0 : array.length;
                            if (high === 0) {
                                return 0;
                            }
                            value = iteratee(value);
                            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
                            while (low < high) {
                                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                                if (valIsNaN) {
                                    var setLow = retHighest || othIsReflexive;
                                }
                                else if (valIsUndefined) {
                                    setLow = othIsReflexive && (retHighest || othIsDefined);
                                }
                                else if (valIsNull) {
                                    setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                                }
                                else if (valIsSymbol) {
                                    setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                                }
                                else if (othIsNull || othIsSymbol) {
                                    setLow = false;
                                }
                                else {
                                    setLow = retHighest ? (computed <= value) : (computed < value);
                                }
                                if (setLow) {
                                    low = mid + 1;
                                }
                                else {
                                    high = mid;
                                }
                            }
                            return nativeMin(high, MAX_ARRAY_INDEX);
                        }
                        /**
                         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                         * support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         */
                        function baseSortedUniq(array, iteratee) {
                            var index = -1, length = array.length, resIndex = 0, result = [];
                            while (++index < length) {
                                var value = array[index], computed = iteratee ? iteratee(value) : value;
                                if (!index || !eq(computed, seen)) {
                                    var seen = computed;
                                    result[resIndex++] = value === 0 ? 0 : value;
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.toNumber` which doesn't ensure correct
                         * conversions of binary, hexadecimal, or octal string values.
                         *
                         * @private
                         * @param {*} value The value to process.
                         * @returns {number} Returns the number.
                         */
                        function baseToNumber(value) {
                            if (typeof value == 'number') {
                                return value;
                            }
                            if (isSymbol(value)) {
                                return NAN;
                            }
                            return +value;
                        }
                        /**
                         * The base implementation of `_.toString` which doesn't convert nullish
                         * values to empty strings.
                         *
                         * @private
                         * @param {*} value The value to process.
                         * @returns {string} Returns the string.
                         */
                        function baseToString(value) {
                            // Exit early for strings to avoid a performance hit in some environments.
                            if (typeof value == 'string') {
                                return value;
                            }
                            if (isArray(value)) {
                                // Recursively convert values (susceptible to call stack limits).
                                return arrayMap(value, baseToString) + '';
                            }
                            if (isSymbol(value)) {
                                return symbolToString ? symbolToString.call(value) : '';
                            }
                            var result = (value + '');
                            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                        }
                        /**
                         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         */
                        function baseUniq(array, iteratee, comparator) {
                            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
                            if (comparator) {
                                isCommon = false;
                                includes = arrayIncludesWith;
                            }
                            else if (length >= LARGE_ARRAY_SIZE) {
                                var set = iteratee ? null : createSet(array);
                                if (set) {
                                    return setToArray(set);
                                }
                                isCommon = false;
                                includes = cacheHas;
                                seen = new SetCache;
                            }
                            else {
                                seen = iteratee ? [] : result;
                            }
                            outer: while (++index < length) {
                                var value = array[index], computed = iteratee ? iteratee(value) : value;
                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var seenIndex = seen.length;
                                    while (seenIndex--) {
                                        if (seen[seenIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    if (iteratee) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                                else if (!includes(seen, computed, comparator)) {
                                    if (seen !== result) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                            return result;
                        }
                        /**
                         * The base implementation of `_.unset`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The property path to unset.
                         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                         */
                        function baseUnset(object, path) {
                            path = castPath(path, object);
                            object = parent(object, path);
                            return object == null || delete object[toKey(last(path))];
                        }
                        /**
                         * The base implementation of `_.update`.
                         *
                         * @private
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to update.
                         * @param {Function} updater The function to produce the updated value.
                         * @param {Function} [customizer] The function to customize path creation.
                         * @returns {Object} Returns `object`.
                         */
                        function baseUpdate(object, path, updater, customizer) {
                            return baseSet(object, path, updater(baseGet(object, path)), customizer);
                        }
                        /**
                         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                         * without support for iteratee shorthands.
                         *
                         * @private
                         * @param {Array} array The array to query.
                         * @param {Function} predicate The function invoked per iteration.
                         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function baseWhile(array, predicate, isDrop, fromRight) {
                            var length = array.length, index = fromRight ? length : -1;
                            while ((fromRight ? index-- : ++index < length) &&
                                predicate(array[index], index, array)) { }
                            return isDrop
                                ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                                : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                        }
                        /**
                         * The base implementation of `wrapperValue` which returns the result of
                         * performing a sequence of actions on the unwrapped `value`, where each
                         * successive action is supplied the return value of the previous.
                         *
                         * @private
                         * @param {*} value The unwrapped value.
                         * @param {Array} actions Actions to perform to resolve the unwrapped value.
                         * @returns {*} Returns the resolved value.
                         */
                        function baseWrapperValue(value, actions) {
                            var result = value;
                            if (result instanceof LazyWrapper) {
                                result = result.value();
                            }
                            return arrayReduce(actions, function (result, action) {
                                return action.func.apply(action.thisArg, arrayPush([result], action.args));
                            }, result);
                        }
                        /**
                         * The base implementation of methods like `_.xor`, without support for
                         * iteratee shorthands, that accepts an array of arrays to inspect.
                         *
                         * @private
                         * @param {Array} arrays The arrays to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of values.
                         */
                        function baseXor(arrays, iteratee, comparator) {
                            var length = arrays.length;
                            if (length < 2) {
                                return length ? baseUniq(arrays[0]) : [];
                            }
                            var index = -1, result = Array(length);
                            while (++index < length) {
                                var array = arrays[index], othIndex = -1;
                                while (++othIndex < length) {
                                    if (othIndex != index) {
                                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                                    }
                                }
                            }
                            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                        }
                        /**
                         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                         *
                         * @private
                         * @param {Array} props The property identifiers.
                         * @param {Array} values The property values.
                         * @param {Function} assignFunc The function to assign values.
                         * @returns {Object} Returns the new object.
                         */
                        function baseZipObject(props, values, assignFunc) {
                            var index = -1, length = props.length, valsLength = values.length, result = {};
                            while (++index < length) {
                                var value = index < valsLength ? values[index] : undefined;
                                assignFunc(result, props[index], value);
                            }
                            return result;
                        }
                        /**
                         * Casts `value` to an empty array if it's not an array like object.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {Array|Object} Returns the cast array-like object.
                         */
                        function castArrayLikeObject(value) {
                            return isArrayLikeObject(value) ? value : [];
                        }
                        /**
                         * Casts `value` to `identity` if it's not a function.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {Function} Returns cast function.
                         */
                        function castFunction(value) {
                            return typeof value == 'function' ? value : identity;
                        }
                        /**
                         * Casts `value` to a path array if it's not one.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @param {Object} [object] The object to query keys on.
                         * @returns {Array} Returns the cast property path array.
                         */
                        function castPath(value, object) {
                            if (isArray(value)) {
                                return value;
                            }
                            return isKey(value, object) ? [value] : stringToPath(toString(value));
                        }
                        /**
                         * A `baseRest` alias which can be replaced with `identity` by module
                         * replacement plugins.
                         *
                         * @private
                         * @type {Function}
                         * @param {Function} func The function to apply a rest parameter to.
                         * @returns {Function} Returns the new function.
                         */
                        var castRest = baseRest;
                        /**
                         * Casts `array` to a slice if it's needed.
                         *
                         * @private
                         * @param {Array} array The array to inspect.
                         * @param {number} start The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the cast slice.
                         */
                        function castSlice(array, start, end) {
                            var length = array.length;
                            end = end === undefined ? length : end;
                            return (!start && end >= length) ? array : baseSlice(array, start, end);
                        }
                        /**
                         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                         *
                         * @private
                         * @param {number|Object} id The timer id or timeout object of the timer to clear.
                         */
                        var clearTimeout = ctxClearTimeout || function (id) {
                            return root.clearTimeout(id);
                        };
                        /**
                         * Creates a clone of  `buffer`.
                         *
                         * @private
                         * @param {Buffer} buffer The buffer to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Buffer} Returns the cloned buffer.
                         */
                        function cloneBuffer(buffer, isDeep) {
                            if (isDeep) {
                                return buffer.slice();
                            }
                            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                            buffer.copy(result);
                            return result;
                        }
                        /**
                         * Creates a clone of `arrayBuffer`.
                         *
                         * @private
                         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                         * @returns {ArrayBuffer} Returns the cloned array buffer.
                         */
                        function cloneArrayBuffer(arrayBuffer) {
                            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                            return result;
                        }
                        /**
                         * Creates a clone of `dataView`.
                         *
                         * @private
                         * @param {Object} dataView The data view to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned data view.
                         */
                        function cloneDataView(dataView, isDeep) {
                            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                        }
                        /**
                         * Creates a clone of `regexp`.
                         *
                         * @private
                         * @param {Object} regexp The regexp to clone.
                         * @returns {Object} Returns the cloned regexp.
                         */
                        function cloneRegExp(regexp) {
                            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                            result.lastIndex = regexp.lastIndex;
                            return result;
                        }
                        /**
                         * Creates a clone of the `symbol` object.
                         *
                         * @private
                         * @param {Object} symbol The symbol object to clone.
                         * @returns {Object} Returns the cloned symbol object.
                         */
                        function cloneSymbol(symbol) {
                            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                        }
                        /**
                         * Creates a clone of `typedArray`.
                         *
                         * @private
                         * @param {Object} typedArray The typed array to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the cloned typed array.
                         */
                        function cloneTypedArray(typedArray, isDeep) {
                            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                        }
                        /**
                         * Compares values to sort them in ascending order.
                         *
                         * @private
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {number} Returns the sort order indicator for `value`.
                         */
                        function compareAscending(value, other) {
                            if (value !== other) {
                                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                                if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                    (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                    (valIsNull && othIsDefined && othIsReflexive) ||
                                    (!valIsDefined && othIsReflexive) ||
                                    !valIsReflexive) {
                                    return 1;
                                }
                                if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                    (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                    (othIsNull && valIsDefined && valIsReflexive) ||
                                    (!othIsDefined && valIsReflexive) ||
                                    !othIsReflexive) {
                                    return -1;
                                }
                            }
                            return 0;
                        }
                        /**
                         * Used by `_.orderBy` to compare multiple properties of a value to another
                         * and stable sort them.
                         *
                         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                         * specify an order of "desc" for descending or "asc" for ascending sort order
                         * of corresponding values.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {boolean[]|string[]} orders The order to sort by for each property.
                         * @returns {number} Returns the sort order indicator for `object`.
                         */
                        function compareMultiple(object, other, orders) {
                            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
                            while (++index < length) {
                                var result = compareAscending(objCriteria[index], othCriteria[index]);
                                if (result) {
                                    if (index >= ordersLength) {
                                        return result;
                                    }
                                    var order = orders[index];
                                    return result * (order == 'desc' ? -1 : 1);
                                }
                            }
                            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                            // that causes it, under certain circumstances, to provide the same value for
                            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                            // for more details.
                            //
                            // This also ensures a stable sort in V8 and other engines.
                            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                            return object.index - other.index;
                        }
                        /**
                         * Creates an array that is the composition of partially applied arguments,
                         * placeholders, and provided arguments into a single array of arguments.
                         *
                         * @private
                         * @param {Array} args The provided arguments.
                         * @param {Array} partials The arguments to prepend to those provided.
                         * @param {Array} holders The `partials` placeholder indexes.
                         * @params {boolean} [isCurried] Specify composing for a curried function.
                         * @returns {Array} Returns the new array of composed arguments.
                         */
                        function composeArgs(args, partials, holders, isCurried) {
                            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
                            while (++leftIndex < leftLength) {
                                result[leftIndex] = partials[leftIndex];
                            }
                            while (++argsIndex < holdersLength) {
                                if (isUncurried || argsIndex < argsLength) {
                                    result[holders[argsIndex]] = args[argsIndex];
                                }
                            }
                            while (rangeLength--) {
                                result[leftIndex++] = args[argsIndex++];
                            }
                            return result;
                        }
                        /**
                         * This function is like `composeArgs` except that the arguments composition
                         * is tailored for `_.partialRight`.
                         *
                         * @private
                         * @param {Array} args The provided arguments.
                         * @param {Array} partials The arguments to append to those provided.
                         * @param {Array} holders The `partials` placeholder indexes.
                         * @params {boolean} [isCurried] Specify composing for a curried function.
                         * @returns {Array} Returns the new array of composed arguments.
                         */
                        function composeArgsRight(args, partials, holders, isCurried) {
                            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
                            while (++argsIndex < rangeLength) {
                                result[argsIndex] = args[argsIndex];
                            }
                            var offset = argsIndex;
                            while (++rightIndex < rightLength) {
                                result[offset + rightIndex] = partials[rightIndex];
                            }
                            while (++holdersIndex < holdersLength) {
                                if (isUncurried || argsIndex < argsLength) {
                                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                                }
                            }
                            return result;
                        }
                        /**
                         * Copies the values of `source` to `array`.
                         *
                         * @private
                         * @param {Array} source The array to copy values from.
                         * @param {Array} [array=[]] The array to copy values to.
                         * @returns {Array} Returns `array`.
                         */
                        function copyArray(source, array) {
                            var index = -1, length = source.length;
                            array || (array = Array(length));
                            while (++index < length) {
                                array[index] = source[index];
                            }
                            return array;
                        }
                        /**
                         * Copies properties of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy properties from.
                         * @param {Array} props The property identifiers to copy.
                         * @param {Object} [object={}] The object to copy properties to.
                         * @param {Function} [customizer] The function to customize copied values.
                         * @returns {Object} Returns `object`.
                         */
                        function copyObject(source, props, object, customizer) {
                            var isNew = !object;
                            object || (object = {});
                            var index = -1, length = props.length;
                            while (++index < length) {
                                var key = props[index];
                                var newValue = customizer
                                    ? customizer(object[key], source[key], key, object, source)
                                    : undefined;
                                if (newValue === undefined) {
                                    newValue = source[key];
                                }
                                if (isNew) {
                                    baseAssignValue(object, key, newValue);
                                }
                                else {
                                    assignValue(object, key, newValue);
                                }
                            }
                            return object;
                        }
                        /**
                         * Copies own symbols of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy symbols from.
                         * @param {Object} [object={}] The object to copy symbols to.
                         * @returns {Object} Returns `object`.
                         */
                        function copySymbols(source, object) {
                            return copyObject(source, getSymbols(source), object);
                        }
                        /**
                         * Copies own and inherited symbols of `source` to `object`.
                         *
                         * @private
                         * @param {Object} source The object to copy symbols from.
                         * @param {Object} [object={}] The object to copy symbols to.
                         * @returns {Object} Returns `object`.
                         */
                        function copySymbolsIn(source, object) {
                            return copyObject(source, getSymbolsIn(source), object);
                        }
                        /**
                         * Creates a function like `_.groupBy`.
                         *
                         * @private
                         * @param {Function} setter The function to set accumulator values.
                         * @param {Function} [initializer] The accumulator object initializer.
                         * @returns {Function} Returns the new aggregator function.
                         */
                        function createAggregator(setter, initializer) {
                            return function (collection, iteratee) {
                                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                            };
                        }
                        /**
                         * Creates a function like `_.assign`.
                         *
                         * @private
                         * @param {Function} assigner The function to assign values.
                         * @returns {Function} Returns the new assigner function.
                         */
                        function createAssigner(assigner) {
                            return baseRest(function (object, sources) {
                                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                                customizer = (assigner.length > 3 && typeof customizer == 'function')
                                    ? (length--, customizer)
                                    : undefined;
                                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                    customizer = length < 3 ? undefined : customizer;
                                    length = 1;
                                }
                                object = Object(object);
                                while (++index < length) {
                                    var source = sources[index];
                                    if (source) {
                                        assigner(object, source, index, customizer);
                                    }
                                }
                                return object;
                            });
                        }
                        /**
                         * Creates a `baseEach` or `baseEachRight` function.
                         *
                         * @private
                         * @param {Function} eachFunc The function to iterate over a collection.
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new base function.
                         */
                        function createBaseEach(eachFunc, fromRight) {
                            return function (collection, iteratee) {
                                if (collection == null) {
                                    return collection;
                                }
                                if (!isArrayLike(collection)) {
                                    return eachFunc(collection, iteratee);
                                }
                                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                                while ((fromRight ? index-- : ++index < length)) {
                                    if (iteratee(iterable[index], index, iterable) === false) {
                                        break;
                                    }
                                }
                                return collection;
                            };
                        }
                        /**
                         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new base function.
                         */
                        function createBaseFor(fromRight) {
                            return function (object, iteratee, keysFunc) {
                                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                                while (length--) {
                                    var key = props[fromRight ? length : ++index];
                                    if (iteratee(iterable[key], key, iterable) === false) {
                                        break;
                                    }
                                }
                                return object;
                            };
                        }
                        /**
                         * Creates a function that wraps `func` to invoke it with the optional `this`
                         * binding of `thisArg`.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createBind(func, bitmask, thisArg) {
                            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                            function wrapper() {
                                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                                return fn.apply(isBind ? thisArg : this, arguments);
                            }
                            return wrapper;
                        }
                        /**
                         * Creates a function like `_.lowerFirst`.
                         *
                         * @private
                         * @param {string} methodName The name of the `String` case method to use.
                         * @returns {Function} Returns the new case function.
                         */
                        function createCaseFirst(methodName) {
                            return function (string) {
                                string = toString(string);
                                var strSymbols = hasUnicode(string)
                                    ? stringToArray(string)
                                    : undefined;
                                var chr = strSymbols
                                    ? strSymbols[0]
                                    : string.charAt(0);
                                var trailing = strSymbols
                                    ? castSlice(strSymbols, 1).join('')
                                    : string.slice(1);
                                return chr[methodName]() + trailing;
                            };
                        }
                        /**
                         * Creates a function like `_.camelCase`.
                         *
                         * @private
                         * @param {Function} callback The function to combine each word.
                         * @returns {Function} Returns the new compounder function.
                         */
                        function createCompounder(callback) {
                            return function (string) {
                                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                            };
                        }
                        /**
                         * Creates a function that produces an instance of `Ctor` regardless of
                         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                         *
                         * @private
                         * @param {Function} Ctor The constructor to wrap.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createCtor(Ctor) {
                            return function () {
                                // Use a `switch` statement to work with class constructors. See
                                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                                // for more details.
                                var args = arguments;
                                switch (args.length) {
                                    case 0: return new Ctor;
                                    case 1: return new Ctor(args[0]);
                                    case 2: return new Ctor(args[0], args[1]);
                                    case 3: return new Ctor(args[0], args[1], args[2]);
                                    case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                                    case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                    case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                    case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                                }
                                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                                // Mimic the constructor's `return` behavior.
                                // See https://es5.github.io/#x13.2.2 for more details.
                                return isObject(result) ? result : thisBinding;
                            };
                        }
                        /**
                         * Creates a function that wraps `func` to enable currying.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {number} arity The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createCurry(func, bitmask, arity) {
                            var Ctor = createCtor(func);
                            function wrapper() {
                                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                                while (index--) {
                                    args[index] = arguments[index];
                                }
                                var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                                    ? []
                                    : replaceHolders(args, placeholder);
                                length -= holders.length;
                                if (length < arity) {
                                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                                }
                                var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                                return apply(fn, this, args);
                            }
                            return wrapper;
                        }
                        /**
                         * Creates a `_.find` or `_.findLast` function.
                         *
                         * @private
                         * @param {Function} findIndexFunc The function to find the collection index.
                         * @returns {Function} Returns the new find function.
                         */
                        function createFind(findIndexFunc) {
                            return function (collection, predicate, fromIndex) {
                                var iterable = Object(collection);
                                if (!isArrayLike(collection)) {
                                    var iteratee = getIteratee(predicate, 3);
                                    collection = keys(collection);
                                    predicate = function (key) { return iteratee(iterable[key], key, iterable); };
                                }
                                var index = findIndexFunc(collection, predicate, fromIndex);
                                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                            };
                        }
                        /**
                         * Creates a `_.flow` or `_.flowRight` function.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new flow function.
                         */
                        function createFlow(fromRight) {
                            return flatRest(function (funcs) {
                                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                                if (fromRight) {
                                    funcs.reverse();
                                }
                                while (index--) {
                                    var func = funcs[index];
                                    if (typeof func != 'function') {
                                        throw new TypeError(FUNC_ERROR_TEXT);
                                    }
                                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                        var wrapper = new LodashWrapper([], true);
                                    }
                                }
                                index = wrapper ? index : length;
                                while (++index < length) {
                                    func = funcs[index];
                                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                                    if (data && isLaziable(data[0]) &&
                                        data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                        !data[4].length && data[9] == 1) {
                                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                    }
                                    else {
                                        wrapper = (func.length == 1 && isLaziable(func))
                                            ? wrapper[funcName]()
                                            : wrapper.thru(func);
                                    }
                                }
                                return function () {
                                    var args = arguments, value = args[0];
                                    if (wrapper && args.length == 1 && isArray(value)) {
                                        return wrapper.plant(value).value();
                                    }
                                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                                    while (++index < length) {
                                        result = funcs[index].call(this, result);
                                    }
                                    return result;
                                };
                            });
                        }
                        /**
                         * Creates a function that wraps `func` to invoke it with optional `this`
                         * binding of `thisArg`, partial application, and currying.
                         *
                         * @private
                         * @param {Function|string} func The function or method name to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to prepend to those provided to
                         *  the new function.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [partialsRight] The arguments to append to those provided
                         *  to the new function.
                         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
                            function wrapper() {
                                var length = arguments.length, args = Array(length), index = length;
                                while (index--) {
                                    args[index] = arguments[index];
                                }
                                if (isCurried) {
                                    var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                                }
                                if (partials) {
                                    args = composeArgs(args, partials, holders, isCurried);
                                }
                                if (partialsRight) {
                                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                                }
                                length -= holdersCount;
                                if (isCurried && length < arity) {
                                    var newHolders = replaceHolders(args, placeholder);
                                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                                }
                                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                                length = args.length;
                                if (argPos) {
                                    args = reorder(args, argPos);
                                }
                                else if (isFlip && length > 1) {
                                    args.reverse();
                                }
                                if (isAry && ary < length) {
                                    args.length = ary;
                                }
                                if (this && this !== root && this instanceof wrapper) {
                                    fn = Ctor || createCtor(fn);
                                }
                                return fn.apply(thisBinding, args);
                            }
                            return wrapper;
                        }
                        /**
                         * Creates a function like `_.invertBy`.
                         *
                         * @private
                         * @param {Function} setter The function to set accumulator values.
                         * @param {Function} toIteratee The function to resolve iteratees.
                         * @returns {Function} Returns the new inverter function.
                         */
                        function createInverter(setter, toIteratee) {
                            return function (object, iteratee) {
                                return baseInverter(object, setter, toIteratee(iteratee), {});
                            };
                        }
                        /**
                         * Creates a function that performs a mathematical operation on two values.
                         *
                         * @private
                         * @param {Function} operator The function to perform the operation.
                         * @param {number} [defaultValue] The value used for `undefined` arguments.
                         * @returns {Function} Returns the new mathematical operation function.
                         */
                        function createMathOperation(operator, defaultValue) {
                            return function (value, other) {
                                var result;
                                if (value === undefined && other === undefined) {
                                    return defaultValue;
                                }
                                if (value !== undefined) {
                                    result = value;
                                }
                                if (other !== undefined) {
                                    if (result === undefined) {
                                        return other;
                                    }
                                    if (typeof value == 'string' || typeof other == 'string') {
                                        value = baseToString(value);
                                        other = baseToString(other);
                                    }
                                    else {
                                        value = baseToNumber(value);
                                        other = baseToNumber(other);
                                    }
                                    result = operator(value, other);
                                }
                                return result;
                            };
                        }
                        /**
                         * Creates a function like `_.over`.
                         *
                         * @private
                         * @param {Function} arrayFunc The function to iterate over iteratees.
                         * @returns {Function} Returns the new over function.
                         */
                        function createOver(arrayFunc) {
                            return flatRest(function (iteratees) {
                                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                                return baseRest(function (args) {
                                    var thisArg = this;
                                    return arrayFunc(iteratees, function (iteratee) {
                                        return apply(iteratee, thisArg, args);
                                    });
                                });
                            });
                        }
                        /**
                         * Creates the padding for `string` based on `length`. The `chars` string
                         * is truncated if the number of characters exceeds `length`.
                         *
                         * @private
                         * @param {number} length The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padding for `string`.
                         */
                        function createPadding(length, chars) {
                            chars = chars === undefined ? ' ' : baseToString(chars);
                            var charsLength = chars.length;
                            if (charsLength < 2) {
                                return charsLength ? baseRepeat(chars, length) : chars;
                            }
                            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                            return hasUnicode(chars)
                                ? castSlice(stringToArray(result), 0, length).join('')
                                : result.slice(0, length);
                        }
                        /**
                         * Creates a function that wraps `func` to invoke it with the `this` binding
                         * of `thisArg` and `partials` prepended to the arguments it receives.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {*} thisArg The `this` binding of `func`.
                         * @param {Array} partials The arguments to prepend to those provided to
                         *  the new function.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createPartial(func, bitmask, thisArg, partials) {
                            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                            function wrapper() {
                                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                                while (++leftIndex < leftLength) {
                                    args[leftIndex] = partials[leftIndex];
                                }
                                while (argsLength--) {
                                    args[leftIndex++] = arguments[++argsIndex];
                                }
                                return apply(fn, isBind ? thisArg : this, args);
                            }
                            return wrapper;
                        }
                        /**
                         * Creates a `_.range` or `_.rangeRight` function.
                         *
                         * @private
                         * @param {boolean} [fromRight] Specify iterating from right to left.
                         * @returns {Function} Returns the new range function.
                         */
                        function createRange(fromRight) {
                            return function (start, end, step) {
                                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                    end = step = undefined;
                                }
                                // Ensure the sign of `-0` is preserved.
                                start = toFinite(start);
                                if (end === undefined) {
                                    end = start;
                                    start = 0;
                                }
                                else {
                                    end = toFinite(end);
                                }
                                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                                return baseRange(start, end, step, fromRight);
                            };
                        }
                        /**
                         * Creates a function that performs a relational operation on two values.
                         *
                         * @private
                         * @param {Function} operator The function to perform the operation.
                         * @returns {Function} Returns the new relational operation function.
                         */
                        function createRelationalOperation(operator) {
                            return function (value, other) {
                                if (!(typeof value == 'string' && typeof other == 'string')) {
                                    value = toNumber(value);
                                    other = toNumber(other);
                                }
                                return operator(value, other);
                            };
                        }
                        /**
                         * Creates a function that wraps `func` to continue currying.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @param {Function} wrapFunc The function to create the `func` wrapper.
                         * @param {*} placeholder The placeholder value.
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to prepend to those provided to
                         *  the new function.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
                            bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
                            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                            }
                            var newData = [
                                func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                                newHoldersRight, argPos, ary, arity
                            ];
                            var result = wrapFunc.apply(undefined, newData);
                            if (isLaziable(func)) {
                                setData(result, newData);
                            }
                            result.placeholder = placeholder;
                            return setWrapToString(result, func, bitmask);
                        }
                        /**
                         * Creates a function like `_.round`.
                         *
                         * @private
                         * @param {string} methodName The name of the `Math` method to use when rounding.
                         * @returns {Function} Returns the new round function.
                         */
                        function createRound(methodName) {
                            var func = Math[methodName];
                            return function (number, precision) {
                                number = toNumber(number);
                                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                                if (precision && nativeIsFinite(number)) {
                                    // Shift with exponential notation to avoid floating-point issues.
                                    // See [MDN](https://mdn.io/round#Examples) for more details.
                                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                                    pair = (toString(value) + 'e').split('e');
                                    return +(pair[0] + 'e' + (+pair[1] - precision));
                                }
                                return func(number);
                            };
                        }
                        /**
                         * Creates a set object of `values`.
                         *
                         * @private
                         * @param {Array} values The values to add to the set.
                         * @returns {Object} Returns the new set.
                         */
                        var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
                            return new Set(values);
                        };
                        /**
                         * Creates a `_.toPairs` or `_.toPairsIn` function.
                         *
                         * @private
                         * @param {Function} keysFunc The function to get the keys of a given object.
                         * @returns {Function} Returns the new pairs function.
                         */
                        function createToPairs(keysFunc) {
                            return function (object) {
                                var tag = getTag(object);
                                if (tag == mapTag) {
                                    return mapToArray(object);
                                }
                                if (tag == setTag) {
                                    return setToPairs(object);
                                }
                                return baseToPairs(object, keysFunc(object));
                            };
                        }
                        /**
                         * Creates a function that either curries or invokes `func` with optional
                         * `this` binding and partially applied arguments.
                         *
                         * @private
                         * @param {Function|string} func The function or method name to wrap.
                         * @param {number} bitmask The bitmask flags.
                         *    1 - `_.bind`
                         *    2 - `_.bindKey`
                         *    4 - `_.curry` or `_.curryRight` of a bound function
                         *    8 - `_.curry`
                         *   16 - `_.curryRight`
                         *   32 - `_.partial`
                         *   64 - `_.partialRight`
                         *  128 - `_.rearg`
                         *  256 - `_.ary`
                         *  512 - `_.flip`
                         * @param {*} [thisArg] The `this` binding of `func`.
                         * @param {Array} [partials] The arguments to be partially applied.
                         * @param {Array} [holders] The `partials` placeholder indexes.
                         * @param {Array} [argPos] The argument positions of the new function.
                         * @param {number} [ary] The arity cap of `func`.
                         * @param {number} [arity] The arity of `func`.
                         * @returns {Function} Returns the new wrapped function.
                         */
                        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                            if (!isBindKey && typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            var length = partials ? partials.length : 0;
                            if (!length) {
                                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                                partials = holders = undefined;
                            }
                            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                            arity = arity === undefined ? arity : toInteger(arity);
                            length -= holders ? holders.length : 0;
                            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                                var partialsRight = partials, holdersRight = holders;
                                partials = holders = undefined;
                            }
                            var data = isBindKey ? undefined : getData(func);
                            var newData = [
                                func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                                argPos, ary, arity
                            ];
                            if (data) {
                                mergeData(newData, data);
                            }
                            func = newData[0];
                            bitmask = newData[1];
                            thisArg = newData[2];
                            partials = newData[3];
                            holders = newData[4];
                            arity = newData[9] = newData[9] === undefined
                                ? (isBindKey ? 0 : func.length)
                                : nativeMax(newData[9] - length, 0);
                            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                            }
                            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                                var result = createBind(func, bitmask, thisArg);
                            }
                            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                                result = createCurry(func, bitmask, arity);
                            }
                            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                                result = createPartial(func, bitmask, thisArg, partials);
                            }
                            else {
                                result = createHybrid.apply(undefined, newData);
                            }
                            var setter = data ? baseSetData : setData;
                            return setWrapToString(setter(result, newData), func, bitmask);
                        }
                        /**
                         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                         * of source objects to the destination object for all destination properties
                         * that resolve to `undefined`.
                         *
                         * @private
                         * @param {*} objValue The destination value.
                         * @param {*} srcValue The source value.
                         * @param {string} key The key of the property to assign.
                         * @param {Object} object The parent object of `objValue`.
                         * @returns {*} Returns the value to assign.
                         */
                        function customDefaultsAssignIn(objValue, srcValue, key, object) {
                            if (objValue === undefined ||
                                (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                                return srcValue;
                            }
                            return objValue;
                        }
                        /**
                         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                         * objects into destination objects that are passed thru.
                         *
                         * @private
                         * @param {*} objValue The destination value.
                         * @param {*} srcValue The source value.
                         * @param {string} key The key of the property to merge.
                         * @param {Object} object The parent object of `objValue`.
                         * @param {Object} source The parent object of `srcValue`.
                         * @param {Object} [stack] Tracks traversed source values and their merged
                         *  counterparts.
                         * @returns {*} Returns the value to assign.
                         */
                        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                            if (isObject(objValue) && isObject(srcValue)) {
                                // Recursively merge objects and arrays (susceptible to call stack limits).
                                stack.set(srcValue, objValue);
                                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                                stack['delete'](srcValue);
                            }
                            return objValue;
                        }
                        /**
                         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                         * objects.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @param {string} key The key of the property to inspect.
                         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                         */
                        function customOmitClone(value) {
                            return isPlainObject(value) ? undefined : value;
                        }
                        /**
                         * A specialized version of `baseIsEqualDeep` for arrays with support for
                         * partial deep comparisons.
                         *
                         * @private
                         * @param {Array} array The array to compare.
                         * @param {Array} other The other array to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `array` and `other` objects.
                         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                         */
                        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
                            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                                return false;
                            }
                            // Check that cyclic values are equal.
                            var arrStacked = stack.get(array);
                            var othStacked = stack.get(other);
                            if (arrStacked && othStacked) {
                                return arrStacked == other && othStacked == array;
                            }
                            var index = -1, result = true, seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
                            stack.set(array, other);
                            stack.set(other, array);
                            // Ignore non-index properties.
                            while (++index < arrLength) {
                                var arrValue = array[index], othValue = other[index];
                                if (customizer) {
                                    var compared = isPartial
                                        ? customizer(othValue, arrValue, index, other, array, stack)
                                        : customizer(arrValue, othValue, index, array, other, stack);
                                }
                                if (compared !== undefined) {
                                    if (compared) {
                                        continue;
                                    }
                                    result = false;
                                    break;
                                }
                                // Recursively compare arrays (susceptible to call stack limits).
                                if (seen) {
                                    if (!arraySome(other, function (othValue, othIndex) {
                                        if (!cacheHas(seen, othIndex) &&
                                            (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                            return seen.push(othIndex);
                                        }
                                    })) {
                                        result = false;
                                        break;
                                    }
                                }
                                else if (!(arrValue === othValue ||
                                    equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                    result = false;
                                    break;
                                }
                            }
                            stack['delete'](array);
                            stack['delete'](other);
                            return result;
                        }
                        /**
                         * A specialized version of `baseIsEqualDeep` for comparing objects of
                         * the same `toStringTag`.
                         *
                         * **Note:** This function only supports comparing values with tags of
                         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {string} tag The `toStringTag` of the objects to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                            switch (tag) {
                                case dataViewTag:
                                    if ((object.byteLength != other.byteLength) ||
                                        (object.byteOffset != other.byteOffset)) {
                                        return false;
                                    }
                                    object = object.buffer;
                                    other = other.buffer;
                                case arrayBufferTag:
                                    if ((object.byteLength != other.byteLength) ||
                                        !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                        return false;
                                    }
                                    return true;
                                case boolTag:
                                case dateTag:
                                case numberTag:
                                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                                    // Invalid dates are coerced to `NaN`.
                                    return eq(+object, +other);
                                case errorTag:
                                    return object.name == other.name && object.message == other.message;
                                case regexpTag:
                                case stringTag:
                                    // Coerce regexes to strings and treat strings, primitives and objects,
                                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                    // for more details.
                                    return object == (other + '');
                                case mapTag:
                                    var convert = mapToArray;
                                case setTag:
                                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                    convert || (convert = setToArray);
                                    if (object.size != other.size && !isPartial) {
                                        return false;
                                    }
                                    // Assume cyclic values are equal.
                                    var stacked = stack.get(object);
                                    if (stacked) {
                                        return stacked == other;
                                    }
                                    bitmask |= COMPARE_UNORDERED_FLAG;
                                    // Recursively compare objects (susceptible to call stack limits).
                                    stack.set(object, other);
                                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                                    stack['delete'](object);
                                    return result;
                                case symbolTag:
                                    if (symbolValueOf) {
                                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                                    }
                            }
                            return false;
                        }
                        /**
                         * A specialized version of `baseIsEqualDeep` for objects with support for
                         * partial deep comparisons.
                         *
                         * @private
                         * @param {Object} object The object to compare.
                         * @param {Object} other The other object to compare.
                         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                         * @param {Function} customizer The function to customize comparisons.
                         * @param {Function} equalFunc The function to determine equivalents of values.
                         * @param {Object} stack Tracks traversed `object` and `other` objects.
                         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                         */
                        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
                            if (objLength != othLength && !isPartial) {
                                return false;
                            }
                            var index = objLength;
                            while (index--) {
                                var key = objProps[index];
                                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                    return false;
                                }
                            }
                            // Check that cyclic values are equal.
                            var objStacked = stack.get(object);
                            var othStacked = stack.get(other);
                            if (objStacked && othStacked) {
                                return objStacked == other && othStacked == object;
                            }
                            var result = true;
                            stack.set(object, other);
                            stack.set(other, object);
                            var skipCtor = isPartial;
                            while (++index < objLength) {
                                key = objProps[index];
                                var objValue = object[key], othValue = other[key];
                                if (customizer) {
                                    var compared = isPartial
                                        ? customizer(othValue, objValue, key, other, object, stack)
                                        : customizer(objValue, othValue, key, object, other, stack);
                                }
                                // Recursively compare objects (susceptible to call stack limits).
                                if (!(compared === undefined
                                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                                    : compared)) {
                                    result = false;
                                    break;
                                }
                                skipCtor || (skipCtor = key == 'constructor');
                            }
                            if (result && !skipCtor) {
                                var objCtor = object.constructor, othCtor = other.constructor;
                                // Non `Object` object instances with different constructors are not equal.
                                if (objCtor != othCtor &&
                                    ('constructor' in object && 'constructor' in other) &&
                                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                                        typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                                    result = false;
                                }
                            }
                            stack['delete'](object);
                            stack['delete'](other);
                            return result;
                        }
                        /**
                         * A specialized version of `baseRest` which flattens the rest array.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @returns {Function} Returns the new function.
                         */
                        function flatRest(func) {
                            return setToString(overRest(func, undefined, flatten), func + '');
                        }
                        /**
                         * Creates an array of own enumerable property names and symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function getAllKeys(object) {
                            return baseGetAllKeys(object, keys, getSymbols);
                        }
                        /**
                         * Creates an array of own and inherited enumerable property names and
                         * symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names and symbols.
                         */
                        function getAllKeysIn(object) {
                            return baseGetAllKeys(object, keysIn, getSymbolsIn);
                        }
                        /**
                         * Gets metadata for `func`.
                         *
                         * @private
                         * @param {Function} func The function to query.
                         * @returns {*} Returns the metadata for `func`.
                         */
                        var getData = !metaMap ? noop : function (func) {
                            return metaMap.get(func);
                        };
                        /**
                         * Gets the name of `func`.
                         *
                         * @private
                         * @param {Function} func The function to query.
                         * @returns {string} Returns the function name.
                         */
                        function getFuncName(func) {
                            var result = (func.name + ''), array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
                            while (length--) {
                                var data = array[length], otherFunc = data.func;
                                if (otherFunc == null || otherFunc == func) {
                                    return data.name;
                                }
                            }
                            return result;
                        }
                        /**
                         * Gets the argument placeholder value for `func`.
                         *
                         * @private
                         * @param {Function} func The function to inspect.
                         * @returns {*} Returns the placeholder value.
                         */
                        function getHolder(func) {
                            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                            return object.placeholder;
                        }
                        /**
                         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                         * this function returns the custom method, otherwise it returns `baseIteratee`.
                         * If arguments are provided, the chosen function is invoked with them and
                         * its result is returned.
                         *
                         * @private
                         * @param {*} [value] The value to convert to an iteratee.
                         * @param {number} [arity] The arity of the created iteratee.
                         * @returns {Function} Returns the chosen function or its result.
                         */
                        function getIteratee() {
                            var result = lodash.iteratee || iteratee;
                            result = result === iteratee ? baseIteratee : result;
                            return arguments.length ? result(arguments[0], arguments[1]) : result;
                        }
                        /**
                         * Gets the data for `map`.
                         *
                         * @private
                         * @param {Object} map The map to query.
                         * @param {string} key The reference key.
                         * @returns {*} Returns the map data.
                         */
                        function getMapData(map, key) {
                            var data = map.__data__;
                            return isKeyable(key)
                                ? data[typeof key == 'string' ? 'string' : 'hash']
                                : data.map;
                        }
                        /**
                         * Gets the property names, values, and compare flags of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the match data of `object`.
                         */
                        function getMatchData(object) {
                            var result = keys(object), length = result.length;
                            while (length--) {
                                var key = result[length], value = object[key];
                                result[length] = [key, value, isStrictComparable(value)];
                            }
                            return result;
                        }
                        /**
                         * Gets the native function at `key` of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {string} key The key of the method to get.
                         * @returns {*} Returns the function if it's native, else `undefined`.
                         */
                        function getNative(object, key) {
                            var value = getValue(object, key);
                            return baseIsNative(value) ? value : undefined;
                        }
                        /**
                         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the raw `toStringTag`.
                         */
                        function getRawTag(value) {
                            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
                            try {
                                value[symToStringTag] = undefined;
                                var unmasked = true;
                            }
                            catch (e) { }
                            var result = nativeObjectToString.call(value);
                            if (unmasked) {
                                if (isOwn) {
                                    value[symToStringTag] = tag;
                                }
                                else {
                                    delete value[symToStringTag];
                                }
                            }
                            return result;
                        }
                        /**
                         * Creates an array of the own enumerable symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of symbols.
                         */
                        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                            if (object == null) {
                                return [];
                            }
                            object = Object(object);
                            return arrayFilter(nativeGetSymbols(object), function (symbol) {
                                return propertyIsEnumerable.call(object, symbol);
                            });
                        };
                        /**
                         * Creates an array of the own and inherited enumerable symbols of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of symbols.
                         */
                        var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                            var result = [];
                            while (object) {
                                arrayPush(result, getSymbols(object));
                                object = getPrototype(object);
                            }
                            return result;
                        };
                        /**
                         * Gets the `toStringTag` of `value`.
                         *
                         * @private
                         * @param {*} value The value to query.
                         * @returns {string} Returns the `toStringTag`.
                         */
                        var getTag = baseGetTag;
                        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                            (Map && getTag(new Map) != mapTag) ||
                            (Promise && getTag(Promise.resolve()) != promiseTag) ||
                            (Set && getTag(new Set) != setTag) ||
                            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                            getTag = function (value) {
                                var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
                                if (ctorString) {
                                    switch (ctorString) {
                                        case dataViewCtorString: return dataViewTag;
                                        case mapCtorString: return mapTag;
                                        case promiseCtorString: return promiseTag;
                                        case setCtorString: return setTag;
                                        case weakMapCtorString: return weakMapTag;
                                    }
                                }
                                return result;
                            };
                        }
                        /**
                         * Gets the view, applying any `transforms` to the `start` and `end` positions.
                         *
                         * @private
                         * @param {number} start The start of the view.
                         * @param {number} end The end of the view.
                         * @param {Array} transforms The transformations to apply to the view.
                         * @returns {Object} Returns an object containing the `start` and `end`
                         *  positions of the view.
                         */
                        function getView(start, end, transforms) {
                            var index = -1, length = transforms.length;
                            while (++index < length) {
                                var data = transforms[index], size = data.size;
                                switch (data.type) {
                                    case 'drop':
                                        start += size;
                                        break;
                                    case 'dropRight':
                                        end -= size;
                                        break;
                                    case 'take':
                                        end = nativeMin(end, start + size);
                                        break;
                                    case 'takeRight':
                                        start = nativeMax(start, end - size);
                                        break;
                                }
                            }
                            return { 'start': start, 'end': end };
                        }
                        /**
                         * Extracts wrapper details from the `source` body comment.
                         *
                         * @private
                         * @param {string} source The source to inspect.
                         * @returns {Array} Returns the wrapper details.
                         */
                        function getWrapDetails(source) {
                            var match = source.match(reWrapDetails);
                            return match ? match[1].split(reSplitDetails) : [];
                        }
                        /**
                         * Checks if `path` exists on `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @param {Function} hasFunc The function to check properties.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         */
                        function hasPath(object, path, hasFunc) {
                            path = castPath(path, object);
                            var index = -1, length = path.length, result = false;
                            while (++index < length) {
                                var key = toKey(path[index]);
                                if (!(result = object != null && hasFunc(object, key))) {
                                    break;
                                }
                                object = object[key];
                            }
                            if (result || ++index != length) {
                                return result;
                            }
                            length = object == null ? 0 : object.length;
                            return !!length && isLength(length) && isIndex(key, length) &&
                                (isArray(object) || isArguments(object));
                        }
                        /**
                         * Initializes an array clone.
                         *
                         * @private
                         * @param {Array} array The array to clone.
                         * @returns {Array} Returns the initialized clone.
                         */
                        function initCloneArray(array) {
                            var length = array.length, result = new array.constructor(length);
                            // Add properties assigned by `RegExp#exec`.
                            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                                result.index = array.index;
                                result.input = array.input;
                            }
                            return result;
                        }
                        /**
                         * Initializes an object clone.
                         *
                         * @private
                         * @param {Object} object The object to clone.
                         * @returns {Object} Returns the initialized clone.
                         */
                        function initCloneObject(object) {
                            return (typeof object.constructor == 'function' && !isPrototype(object))
                                ? baseCreate(getPrototype(object))
                                : {};
                        }
                        /**
                         * Initializes an object clone based on its `toStringTag`.
                         *
                         * **Note:** This function only supports cloning values with tags of
                         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                         *
                         * @private
                         * @param {Object} object The object to clone.
                         * @param {string} tag The `toStringTag` of the object to clone.
                         * @param {boolean} [isDeep] Specify a deep clone.
                         * @returns {Object} Returns the initialized clone.
                         */
                        function initCloneByTag(object, tag, isDeep) {
                            var Ctor = object.constructor;
                            switch (tag) {
                                case arrayBufferTag:
                                    return cloneArrayBuffer(object);
                                case boolTag:
                                case dateTag:
                                    return new Ctor(+object);
                                case dataViewTag:
                                    return cloneDataView(object, isDeep);
                                case float32Tag:
                                case float64Tag:
                                case int8Tag:
                                case int16Tag:
                                case int32Tag:
                                case uint8Tag:
                                case uint8ClampedTag:
                                case uint16Tag:
                                case uint32Tag:
                                    return cloneTypedArray(object, isDeep);
                                case mapTag:
                                    return new Ctor;
                                case numberTag:
                                case stringTag:
                                    return new Ctor(object);
                                case regexpTag:
                                    return cloneRegExp(object);
                                case setTag:
                                    return new Ctor;
                                case symbolTag:
                                    return cloneSymbol(object);
                            }
                        }
                        /**
                         * Inserts wrapper `details` in a comment at the top of the `source` body.
                         *
                         * @private
                         * @param {string} source The source to modify.
                         * @returns {Array} details The details to insert.
                         * @returns {string} Returns the modified source.
                         */
                        function insertWrapDetails(source, details) {
                            var length = details.length;
                            if (!length) {
                                return source;
                            }
                            var lastIndex = length - 1;
                            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                            details = details.join(length > 2 ? ', ' : ' ');
                            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                        }
                        /**
                         * Checks if `value` is a flattenable `arguments` object or array.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                         */
                        function isFlattenable(value) {
                            return isArray(value) || isArguments(value) ||
                                !!(spreadableSymbol && value && value[spreadableSymbol]);
                        }
                        /**
                         * Checks if `value` is a valid array-like index.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                         */
                        function isIndex(value, length) {
                            var type = typeof value;
                            length = length == null ? MAX_SAFE_INTEGER : length;
                            return !!length &&
                                (type == 'number' ||
                                    (type != 'symbol' && reIsUint.test(value))) &&
                                (value > -1 && value % 1 == 0 && value < length);
                        }
                        /**
                         * Checks if the given arguments are from an iteratee call.
                         *
                         * @private
                         * @param {*} value The potential iteratee value argument.
                         * @param {*} index The potential iteratee index or key argument.
                         * @param {*} object The potential iteratee object argument.
                         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                         *  else `false`.
                         */
                        function isIterateeCall(value, index, object) {
                            if (!isObject(object)) {
                                return false;
                            }
                            var type = typeof index;
                            if (type == 'number'
                                ? (isArrayLike(object) && isIndex(index, object.length))
                                : (type == 'string' && index in object)) {
                                return eq(object[index], value);
                            }
                            return false;
                        }
                        /**
                         * Checks if `value` is a property name and not a property path.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @param {Object} [object] The object to query keys on.
                         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                         */
                        function isKey(value, object) {
                            if (isArray(value)) {
                                return false;
                            }
                            var type = typeof value;
                            if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                                value == null || isSymbol(value)) {
                                return true;
                            }
                            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                                (object != null && value in Object(object));
                        }
                        /**
                         * Checks if `value` is suitable for use as unique object key.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                         */
                        function isKeyable(value) {
                            var type = typeof value;
                            return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                                ? (value !== '__proto__')
                                : (value === null);
                        }
                        /**
                         * Checks if `func` has a lazy counterpart.
                         *
                         * @private
                         * @param {Function} func The function to check.
                         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                         *  else `false`.
                         */
                        function isLaziable(func) {
                            var funcName = getFuncName(func), other = lodash[funcName];
                            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                                return false;
                            }
                            if (func === other) {
                                return true;
                            }
                            var data = getData(other);
                            return !!data && func === data[0];
                        }
                        /**
                         * Checks if `func` has its source masked.
                         *
                         * @private
                         * @param {Function} func The function to check.
                         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                         */
                        function isMasked(func) {
                            return !!maskSrcKey && (maskSrcKey in func);
                        }
                        /**
                         * Checks if `func` is capable of being masked.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                         */
                        var isMaskable = coreJsData ? isFunction : stubFalse;
                        /**
                         * Checks if `value` is likely a prototype object.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                         */
                        function isPrototype(value) {
                            var Ctor = value && value.constructor, proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
                            return value === proto;
                        }
                        /**
                         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` if suitable for strict
                         *  equality comparisons, else `false`.
                         */
                        function isStrictComparable(value) {
                            return value === value && !isObject(value);
                        }
                        /**
                         * A specialized version of `matchesProperty` for source values suitable
                         * for strict equality comparisons, i.e. `===`.
                         *
                         * @private
                         * @param {string} key The key of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         */
                        function matchesStrictComparable(key, srcValue) {
                            return function (object) {
                                if (object == null) {
                                    return false;
                                }
                                return object[key] === srcValue &&
                                    (srcValue !== undefined || (key in Object(object)));
                            };
                        }
                        /**
                         * A specialized version of `_.memoize` which clears the memoized function's
                         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                         *
                         * @private
                         * @param {Function} func The function to have its output memoized.
                         * @returns {Function} Returns the new memoized function.
                         */
                        function memoizeCapped(func) {
                            var result = memoize(func, function (key) {
                                if (cache.size === MAX_MEMOIZE_SIZE) {
                                    cache.clear();
                                }
                                return key;
                            });
                            var cache = result.cache;
                            return result;
                        }
                        /**
                         * Merges the function metadata of `source` into `data`.
                         *
                         * Merging metadata reduces the number of wrappers used to invoke a function.
                         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                         * may be applied regardless of execution order. Methods like `_.ary` and
                         * `_.rearg` modify function arguments, making the order in which they are
                         * executed important, preventing the merging of metadata. However, we make
                         * an exception for a safe combined case where curried functions have `_.ary`
                         * and or `_.rearg` applied.
                         *
                         * @private
                         * @param {Array} data The destination metadata.
                         * @param {Array} source The source metadata.
                         * @returns {Array} Returns `data`.
                         */
                        function mergeData(data, source) {
                            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
                            var isCombo = ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                                ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                                ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
                            // Exit early if metadata can't be merged.
                            if (!(isCommon || isCombo)) {
                                return data;
                            }
                            // Use source `thisArg` if available.
                            if (srcBitmask & WRAP_BIND_FLAG) {
                                data[2] = source[2];
                                // Set when currying a bound function.
                                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                            }
                            // Compose partial arguments.
                            var value = source[3];
                            if (value) {
                                var partials = data[3];
                                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                            }
                            // Compose partial right arguments.
                            value = source[5];
                            if (value) {
                                partials = data[5];
                                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                            }
                            // Use source `argPos` if available.
                            value = source[7];
                            if (value) {
                                data[7] = value;
                            }
                            // Use source `ary` if it's smaller.
                            if (srcBitmask & WRAP_ARY_FLAG) {
                                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                            }
                            // Use source `arity` if one is not provided.
                            if (data[9] == null) {
                                data[9] = source[9];
                            }
                            // Use source `func` and merge bitmasks.
                            data[0] = source[0];
                            data[1] = newBitmask;
                            return data;
                        }
                        /**
                         * This function is like
                         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                         * except that it includes inherited enumerable properties.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         */
                        function nativeKeysIn(object) {
                            var result = [];
                            if (object != null) {
                                for (var key in Object(object)) {
                                    result.push(key);
                                }
                            }
                            return result;
                        }
                        /**
                         * Converts `value` to a string using `Object.prototype.toString`.
                         *
                         * @private
                         * @param {*} value The value to convert.
                         * @returns {string} Returns the converted string.
                         */
                        function objectToString(value) {
                            return nativeObjectToString.call(value);
                        }
                        /**
                         * A specialized version of `baseRest` which transforms the rest array.
                         *
                         * @private
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @param {Function} transform The rest array transform.
                         * @returns {Function} Returns the new function.
                         */
                        function overRest(func, start, transform) {
                            start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                            return function () {
                                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                                while (++index < length) {
                                    array[index] = args[start + index];
                                }
                                index = -1;
                                var otherArgs = Array(start + 1);
                                while (++index < start) {
                                    otherArgs[index] = args[index];
                                }
                                otherArgs[start] = transform(array);
                                return apply(func, this, otherArgs);
                            };
                        }
                        /**
                         * Gets the parent value at `path` of `object`.
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {Array} path The path to get the parent value of.
                         * @returns {*} Returns the parent value.
                         */
                        function parent(object, path) {
                            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                        }
                        /**
                         * Reorder `array` according to the specified indexes where the element at
                         * the first index is assigned as the first element, the element at
                         * the second index is assigned as the second element, and so on.
                         *
                         * @private
                         * @param {Array} array The array to reorder.
                         * @param {Array} indexes The arranged array indexes.
                         * @returns {Array} Returns `array`.
                         */
                        function reorder(array, indexes) {
                            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
                            while (length--) {
                                var index = indexes[length];
                                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                            }
                            return array;
                        }
                        /**
                         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                         *
                         * @private
                         * @param {Object} object The object to query.
                         * @param {string} key The key of the property to get.
                         * @returns {*} Returns the property value.
                         */
                        function safeGet(object, key) {
                            if (key === 'constructor' && typeof object[key] === 'function') {
                                return;
                            }
                            if (key == '__proto__') {
                                return;
                            }
                            return object[key];
                        }
                        /**
                         * Sets metadata for `func`.
                         *
                         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                         * period of time, it will trip its breaker and transition to an identity
                         * function to avoid garbage collection pauses in V8. See
                         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                         * for more details.
                         *
                         * @private
                         * @param {Function} func The function to associate metadata with.
                         * @param {*} data The metadata.
                         * @returns {Function} Returns `func`.
                         */
                        var setData = shortOut(baseSetData);
                        /**
                         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                         *
                         * @private
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @returns {number|Object} Returns the timer id or timeout object.
                         */
                        var setTimeout = ctxSetTimeout || function (func, wait) {
                            return root.setTimeout(func, wait);
                        };
                        /**
                         * Sets the `toString` method of `func` to return `string`.
                         *
                         * @private
                         * @param {Function} func The function to modify.
                         * @param {Function} string The `toString` result.
                         * @returns {Function} Returns `func`.
                         */
                        var setToString = shortOut(baseSetToString);
                        /**
                         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                         * with wrapper details in a comment at the top of the source body.
                         *
                         * @private
                         * @param {Function} wrapper The function to modify.
                         * @param {Function} reference The reference function.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @returns {Function} Returns `wrapper`.
                         */
                        function setWrapToString(wrapper, reference, bitmask) {
                            var source = (reference + '');
                            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                        }
                        /**
                         * Creates a function that'll short out and invoke `identity` instead
                         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                         * milliseconds.
                         *
                         * @private
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new shortable function.
                         */
                        function shortOut(func) {
                            var count = 0, lastCalled = 0;
                            return function () {
                                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                                lastCalled = stamp;
                                if (remaining > 0) {
                                    if (++count >= HOT_COUNT) {
                                        return arguments[0];
                                    }
                                }
                                else {
                                    count = 0;
                                }
                                return func.apply(undefined, arguments);
                            };
                        }
                        /**
                         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                         *
                         * @private
                         * @param {Array} array The array to shuffle.
                         * @param {number} [size=array.length] The size of `array`.
                         * @returns {Array} Returns `array`.
                         */
                        function shuffleSelf(array, size) {
                            var index = -1, length = array.length, lastIndex = length - 1;
                            size = size === undefined ? length : size;
                            while (++index < size) {
                                var rand = baseRandom(index, lastIndex), value = array[rand];
                                array[rand] = array[index];
                                array[index] = value;
                            }
                            array.length = size;
                            return array;
                        }
                        /**
                         * Converts `string` to a property path array.
                         *
                         * @private
                         * @param {string} string The string to convert.
                         * @returns {Array} Returns the property path array.
                         */
                        var stringToPath = memoizeCapped(function (string) {
                            var result = [];
                            if (string.charCodeAt(0) === 46 /* . */) {
                                result.push('');
                            }
                            string.replace(rePropName, function (match, number, quote, subString) {
                                result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                            });
                            return result;
                        });
                        /**
                         * Converts `value` to a string key if it's not a string or symbol.
                         *
                         * @private
                         * @param {*} value The value to inspect.
                         * @returns {string|symbol} Returns the key.
                         */
                        function toKey(value) {
                            if (typeof value == 'string' || isSymbol(value)) {
                                return value;
                            }
                            var result = (value + '');
                            return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                        }
                        /**
                         * Converts `func` to its source code.
                         *
                         * @private
                         * @param {Function} func The function to convert.
                         * @returns {string} Returns the source code.
                         */
                        function toSource(func) {
                            if (func != null) {
                                try {
                                    return funcToString.call(func);
                                }
                                catch (e) { }
                                try {
                                    return (func + '');
                                }
                                catch (e) { }
                            }
                            return '';
                        }
                        /**
                         * Updates wrapper `details` based on `bitmask` flags.
                         *
                         * @private
                         * @returns {Array} details The details to modify.
                         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                         * @returns {Array} Returns `details`.
                         */
                        function updateWrapDetails(details, bitmask) {
                            arrayEach(wrapFlags, function (pair) {
                                var value = '_.' + pair[0];
                                if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                                    details.push(value);
                                }
                            });
                            return details.sort();
                        }
                        /**
                         * Creates a clone of `wrapper`.
                         *
                         * @private
                         * @param {Object} wrapper The wrapper to clone.
                         * @returns {Object} Returns the cloned wrapper.
                         */
                        function wrapperClone(wrapper) {
                            if (wrapper instanceof LazyWrapper) {
                                return wrapper.clone();
                            }
                            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                            result.__actions__ = copyArray(wrapper.__actions__);
                            result.__index__ = wrapper.__index__;
                            result.__values__ = wrapper.__values__;
                            return result;
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates an array of elements split into groups the length of `size`.
                         * If `array` can't be split evenly, the final chunk will be the remaining
                         * elements.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to process.
                         * @param {number} [size=1] The length of each chunk
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the new array of chunks.
                         * @example
                         *
                         * _.chunk(['a', 'b', 'c', 'd'], 2);
                         * // => [['a', 'b'], ['c', 'd']]
                         *
                         * _.chunk(['a', 'b', 'c', 'd'], 3);
                         * // => [['a', 'b', 'c'], ['d']]
                         */
                        function chunk(array, size, guard) {
                            if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                                size = 1;
                            }
                            else {
                                size = nativeMax(toInteger(size), 0);
                            }
                            var length = array == null ? 0 : array.length;
                            if (!length || size < 1) {
                                return [];
                            }
                            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
                            while (index < length) {
                                result[resIndex++] = baseSlice(array, index, (index += size));
                            }
                            return result;
                        }
                        /**
                         * Creates an array with all falsey values removed. The values `false`, `null`,
                         * `0`, `""`, `undefined`, and `NaN` are falsey.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to compact.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.compact([0, 1, false, 2, '', 3]);
                         * // => [1, 2, 3]
                         */
                        function compact(array) {
                            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
                            while (++index < length) {
                                var value = array[index];
                                if (value) {
                                    result[resIndex++] = value;
                                }
                            }
                            return result;
                        }
                        /**
                         * Creates a new array concatenating `array` with any additional arrays
                         * and/or values.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to concatenate.
                         * @param {...*} [values] The values to concatenate.
                         * @returns {Array} Returns the new concatenated array.
                         * @example
                         *
                         * var array = [1];
                         * var other = _.concat(array, 2, [3], [[4]]);
                         *
                         * console.log(other);
                         * // => [1, 2, 3, [4]]
                         *
                         * console.log(array);
                         * // => [1]
                         */
                        function concat() {
                            var length = arguments.length;
                            if (!length) {
                                return [];
                            }
                            var args = Array(length - 1), array = arguments[0], index = length;
                            while (index--) {
                                args[index - 1] = arguments[index];
                            }
                            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                        }
                        /**
                         * Creates an array of `array` values not included in the other given arrays
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. The order and references of result values are
                         * determined by the first array.
                         *
                         * **Note:** Unlike `_.pullAll`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.without, _.xor
                         * @example
                         *
                         * _.difference([2, 1], [2, 3]);
                         * // => [1]
                         */
                        var difference = baseRest(function (array, values) {
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                                : [];
                        });
                        /**
                         * This method is like `_.difference` except that it accepts `iteratee` which
                         * is invoked for each element of `array` and `values` to generate the criterion
                         * by which they're compared. The order and references of result values are
                         * determined by the first array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                         * // => [{ 'x': 2 }]
                         */
                        var differenceBy = baseRest(function (array, values) {
                            var iteratee = last(values);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                                : [];
                        });
                        /**
                         * This method is like `_.difference` except that it accepts `comparator`
                         * which is invoked to compare elements of `array` to `values`. The order and
                         * references of result values are determined by the first array. The comparator
                         * is invoked with two arguments: (arrVal, othVal).
                         *
                         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...Array} [values] The values to exclude.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         *
                         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                         * // => [{ 'x': 2, 'y': 1 }]
                         */
                        var differenceWith = baseRest(function (array, values) {
                            var comparator = last(values);
                            if (isArrayLikeObject(comparator)) {
                                comparator = undefined;
                            }
                            return isArrayLikeObject(array)
                                ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                                : [];
                        });
                        /**
                         * Creates a slice of `array` with `n` elements dropped from the beginning.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to drop.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.drop([1, 2, 3]);
                         * // => [2, 3]
                         *
                         * _.drop([1, 2, 3], 2);
                         * // => [3]
                         *
                         * _.drop([1, 2, 3], 5);
                         * // => []
                         *
                         * _.drop([1, 2, 3], 0);
                         * // => [1, 2, 3]
                         */
                        function drop(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            return baseSlice(array, n < 0 ? 0 : n, length);
                        }
                        /**
                         * Creates a slice of `array` with `n` elements dropped from the end.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to drop.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.dropRight([1, 2, 3]);
                         * // => [1, 2]
                         *
                         * _.dropRight([1, 2, 3], 2);
                         * // => [1]
                         *
                         * _.dropRight([1, 2, 3], 5);
                         * // => []
                         *
                         * _.dropRight([1, 2, 3], 0);
                         * // => [1, 2, 3]
                         */
                        function dropRight(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            n = length - n;
                            return baseSlice(array, 0, n < 0 ? 0 : n);
                        }
                        /**
                         * Creates a slice of `array` excluding elements dropped from the end.
                         * Elements are dropped until `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.dropRightWhile(users, function(o) { return !o.active; });
                         * // => objects for ['barney']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.dropRightWhile(users, ['active', false]);
                         * // => objects for ['barney']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.dropRightWhile(users, 'active');
                         * // => objects for ['barney', 'fred', 'pebbles']
                         */
                        function dropRightWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), true, true)
                                : [];
                        }
                        /**
                         * Creates a slice of `array` excluding elements dropped from the beginning.
                         * Elements are dropped until `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.dropWhile(users, function(o) { return !o.active; });
                         * // => objects for ['pebbles']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.dropWhile(users, { 'user': 'barney', 'active': false });
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.dropWhile(users, ['active', false]);
                         * // => objects for ['pebbles']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.dropWhile(users, 'active');
                         * // => objects for ['barney', 'fred', 'pebbles']
                         */
                        function dropWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), true)
                                : [];
                        }
                        /**
                         * Fills elements of `array` with `value` from `start` up to, but not
                         * including, `end`.
                         *
                         * **Note:** This method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Array
                         * @param {Array} array The array to fill.
                         * @param {*} value The value to fill `array` with.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _.fill(array, 'a');
                         * console.log(array);
                         * // => ['a', 'a', 'a']
                         *
                         * _.fill(Array(3), 2);
                         * // => [2, 2, 2]
                         *
                         * _.fill([4, 6, 8, 10], '*', 1, 3);
                         * // => [4, '*', '*', 10]
                         */
                        function fill(array, value, start, end) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                                start = 0;
                                end = length;
                            }
                            return baseFill(array, value, start, end);
                        }
                        /**
                         * This method is like `_.find` except that it returns the index of the first
                         * element `predicate` returns truthy for instead of the element itself.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {number} Returns the index of the found element, else `-1`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.findIndex(users, function(o) { return o.user == 'barney'; });
                         * // => 0
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findIndex(users, { 'user': 'fred', 'active': false });
                         * // => 1
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findIndex(users, ['active', false]);
                         * // => 0
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findIndex(users, 'active');
                         * // => 2
                         */
                        function findIndex(array, predicate, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = fromIndex == null ? 0 : toInteger(fromIndex);
                            if (index < 0) {
                                index = nativeMax(length + index, 0);
                            }
                            return baseFindIndex(array, getIteratee(predicate, 3), index);
                        }
                        /**
                         * This method is like `_.findIndex` except that it iterates over elements
                         * of `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=array.length-1] The index to search from.
                         * @returns {number} Returns the index of the found element, else `-1`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                         * // => 2
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                         * // => 0
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findLastIndex(users, ['active', false]);
                         * // => 2
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findLastIndex(users, 'active');
                         * // => 0
                         */
                        function findLastIndex(array, predicate, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = length - 1;
                            if (fromIndex !== undefined) {
                                index = toInteger(fromIndex);
                                index = fromIndex < 0
                                    ? nativeMax(length + index, 0)
                                    : nativeMin(index, length - 1);
                            }
                            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                        }
                        /**
                         * Flattens `array` a single level deep.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * _.flatten([1, [2, [3, [4]], 5]]);
                         * // => [1, 2, [3, [4]], 5]
                         */
                        function flatten(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseFlatten(array, 1) : [];
                        }
                        /**
                         * Recursively flattens `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * _.flattenDeep([1, [2, [3, [4]], 5]]);
                         * // => [1, 2, 3, 4, 5]
                         */
                        function flattenDeep(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseFlatten(array, INFINITY) : [];
                        }
                        /**
                         * Recursively flatten `array` up to `depth` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.4.0
                         * @category Array
                         * @param {Array} array The array to flatten.
                         * @param {number} [depth=1] The maximum recursion depth.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * var array = [1, [2, [3, [4]], 5]];
                         *
                         * _.flattenDepth(array, 1);
                         * // => [1, 2, [3, [4]], 5]
                         *
                         * _.flattenDepth(array, 2);
                         * // => [1, 2, 3, [4], 5]
                         */
                        function flattenDepth(array, depth) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            depth = depth === undefined ? 1 : toInteger(depth);
                            return baseFlatten(array, depth);
                        }
                        /**
                         * The inverse of `_.toPairs`; this method returns an object composed
                         * from key-value `pairs`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} pairs The key-value pairs.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.fromPairs([['a', 1], ['b', 2]]);
                         * // => { 'a': 1, 'b': 2 }
                         */
                        function fromPairs(pairs) {
                            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
                            while (++index < length) {
                                var pair = pairs[index];
                                result[pair[0]] = pair[1];
                            }
                            return result;
                        }
                        /**
                         * Gets the first element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @alias first
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {*} Returns the first element of `array`.
                         * @example
                         *
                         * _.head([1, 2, 3]);
                         * // => 1
                         *
                         * _.head([]);
                         * // => undefined
                         */
                        function head(array) {
                            return (array && array.length) ? array[0] : undefined;
                        }
                        /**
                         * Gets the index at which the first occurrence of `value` is found in `array`
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. If `fromIndex` is negative, it's used as the
                         * offset from the end of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.indexOf([1, 2, 1, 2], 2);
                         * // => 1
                         *
                         * // Search from the `fromIndex`.
                         * _.indexOf([1, 2, 1, 2], 2, 2);
                         * // => 3
                         */
                        function indexOf(array, value, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = fromIndex == null ? 0 : toInteger(fromIndex);
                            if (index < 0) {
                                index = nativeMax(length + index, 0);
                            }
                            return baseIndexOf(array, value, index);
                        }
                        /**
                         * Gets all but the last element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.initial([1, 2, 3]);
                         * // => [1, 2]
                         */
                        function initial(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseSlice(array, 0, -1) : [];
                        }
                        /**
                         * Creates an array of unique values that are included in all given arrays
                         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons. The order and references of result values are
                         * determined by the first array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * _.intersection([2, 1], [2, 3]);
                         * // => [2]
                         */
                        var intersection = baseRest(function (arrays) {
                            var mapped = arrayMap(arrays, castArrayLikeObject);
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped)
                                : [];
                        });
                        /**
                         * This method is like `_.intersection` except that it accepts `iteratee`
                         * which is invoked for each element of each `arrays` to generate the criterion
                         * by which they're compared. The order and references of result values are
                         * determined by the first array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [2.1]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }]
                         */
                        var intersectionBy = baseRest(function (arrays) {
                            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                            if (iteratee === last(mapped)) {
                                iteratee = undefined;
                            }
                            else {
                                mapped.pop();
                            }
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped, getIteratee(iteratee, 2))
                                : [];
                        });
                        /**
                         * This method is like `_.intersection` except that it accepts `comparator`
                         * which is invoked to compare elements of `arrays`. The order and references
                         * of result values are determined by the first array. The comparator is
                         * invoked with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of intersecting values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.intersectionWith(objects, others, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }]
                         */
                        var intersectionWith = baseRest(function (arrays) {
                            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            if (comparator) {
                                mapped.pop();
                            }
                            return (mapped.length && mapped[0] === arrays[0])
                                ? baseIntersection(mapped, undefined, comparator)
                                : [];
                        });
                        /**
                         * Converts all elements in `array` into a string separated by `separator`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to convert.
                         * @param {string} [separator=','] The element separator.
                         * @returns {string} Returns the joined string.
                         * @example
                         *
                         * _.join(['a', 'b', 'c'], '~');
                         * // => 'a~b~c'
                         */
                        function join(array, separator) {
                            return array == null ? '' : nativeJoin.call(array, separator);
                        }
                        /**
                         * Gets the last element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {*} Returns the last element of `array`.
                         * @example
                         *
                         * _.last([1, 2, 3]);
                         * // => 3
                         */
                        function last(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? array[length - 1] : undefined;
                        }
                        /**
                         * This method is like `_.indexOf` except that it iterates over elements of
                         * `array` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=array.length-1] The index to search from.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.lastIndexOf([1, 2, 1, 2], 2);
                         * // => 3
                         *
                         * // Search from the `fromIndex`.
                         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                         * // => 1
                         */
                        function lastIndexOf(array, value, fromIndex) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return -1;
                            }
                            var index = length;
                            if (fromIndex !== undefined) {
                                index = toInteger(fromIndex);
                                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                            }
                            return value === value
                                ? strictLastIndexOf(array, value, index)
                                : baseFindIndex(array, baseIsNaN, index, true);
                        }
                        /**
                         * Gets the element at index `n` of `array`. If `n` is negative, the nth
                         * element from the end is returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.11.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=0] The index of the element to return.
                         * @returns {*} Returns the nth element of `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'd'];
                         *
                         * _.nth(array, 1);
                         * // => 'b'
                         *
                         * _.nth(array, -2);
                         * // => 'c';
                         */
                        function nth(array, n) {
                            return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                        }
                        /**
                         * Removes all given values from `array` using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                         * to remove elements from an array by predicate.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {...*} [values] The values to remove.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                         *
                         * _.pull(array, 'a', 'c');
                         * console.log(array);
                         * // => ['b', 'b']
                         */
                        var pull = baseRest(pullAll);
                        /**
                         * This method is like `_.pull` except that it accepts an array of values to remove.
                         *
                         * **Note:** Unlike `_.difference`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                         *
                         * _.pullAll(array, ['a', 'c']);
                         * console.log(array);
                         * // => ['b', 'b']
                         */
                        function pullAll(array, values) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values)
                                : array;
                        }
                        /**
                         * This method is like `_.pullAll` except that it accepts `iteratee` which is
                         * invoked for each element of `array` and `values` to generate the criterion
                         * by which they're compared. The iteratee is invoked with one argument: (value).
                         *
                         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                         *
                         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                         * console.log(array);
                         * // => [{ 'x': 2 }]
                         */
                        function pullAllBy(array, values, iteratee) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values, getIteratee(iteratee, 2))
                                : array;
                        }
                        /**
                         * This method is like `_.pullAll` except that it accepts `comparator` which
                         * is invoked to compare elements of `array` to `values`. The comparator is
                         * invoked with two arguments: (arrVal, othVal).
                         *
                         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Array} values The values to remove.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                         *
                         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                         * console.log(array);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                         */
                        function pullAllWith(array, values, comparator) {
                            return (array && array.length && values && values.length)
                                ? basePullAll(array, values, undefined, comparator)
                                : array;
                        }
                        /**
                         * Removes elements from `array` corresponding to `indexes` and returns an
                         * array of removed elements.
                         *
                         * **Note:** Unlike `_.at`, this method mutates `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                         * @returns {Array} Returns the new array of removed elements.
                         * @example
                         *
                         * var array = ['a', 'b', 'c', 'd'];
                         * var pulled = _.pullAt(array, [1, 3]);
                         *
                         * console.log(array);
                         * // => ['a', 'c']
                         *
                         * console.log(pulled);
                         * // => ['b', 'd']
                         */
                        var pullAt = flatRest(function (array, indexes) {
                            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
                            basePullAt(array, arrayMap(indexes, function (index) {
                                return isIndex(index, length) ? +index : index;
                            }).sort(compareAscending));
                            return result;
                        });
                        /**
                         * Removes all elements from `array` that `predicate` returns truthy for
                         * and returns an array of the removed elements. The predicate is invoked
                         * with three arguments: (value, index, array).
                         *
                         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                         * to pull elements from an array by value.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new array of removed elements.
                         * @example
                         *
                         * var array = [1, 2, 3, 4];
                         * var evens = _.remove(array, function(n) {
                         *   return n % 2 == 0;
                         * });
                         *
                         * console.log(array);
                         * // => [1, 3]
                         *
                         * console.log(evens);
                         * // => [2, 4]
                         */
                        function remove(array, predicate) {
                            var result = [];
                            if (!(array && array.length)) {
                                return result;
                            }
                            var index = -1, indexes = [], length = array.length;
                            predicate = getIteratee(predicate, 3);
                            while (++index < length) {
                                var value = array[index];
                                if (predicate(value, index, array)) {
                                    result.push(value);
                                    indexes.push(index);
                                }
                            }
                            basePullAt(array, indexes);
                            return result;
                        }
                        /**
                         * Reverses `array` so that the first element becomes the last, the second
                         * element becomes the second to last, and so on.
                         *
                         * **Note:** This method mutates `array` and is based on
                         * [`Array#reverse`](https://mdn.io/Array/reverse).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to modify.
                         * @returns {Array} Returns `array`.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _.reverse(array);
                         * // => [3, 2, 1]
                         *
                         * console.log(array);
                         * // => [3, 2, 1]
                         */
                        function reverse(array) {
                            return array == null ? array : nativeReverse.call(array);
                        }
                        /**
                         * Creates a slice of `array` from `start` up to, but not including, `end`.
                         *
                         * **Note:** This method is used instead of
                         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                         * returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to slice.
                         * @param {number} [start=0] The start position.
                         * @param {number} [end=array.length] The end position.
                         * @returns {Array} Returns the slice of `array`.
                         */
                        function slice(array, start, end) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                                start = 0;
                                end = length;
                            }
                            else {
                                start = start == null ? 0 : toInteger(start);
                                end = end === undefined ? length : toInteger(end);
                            }
                            return baseSlice(array, start, end);
                        }
                        /**
                         * Uses a binary search to determine the lowest index at which `value`
                         * should be inserted into `array` in order to maintain its sort order.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * _.sortedIndex([30, 50], 40);
                         * // => 1
                         */
                        function sortedIndex(array, value) {
                            return baseSortedIndex(array, value);
                        }
                        /**
                         * This method is like `_.sortedIndex` except that it accepts `iteratee`
                         * which is invoked for `value` and each element of `array` to compute their
                         * sort ranking. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * var objects = [{ 'x': 4 }, { 'x': 5 }];
                         *
                         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                         * // => 0
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                         * // => 0
                         */
                        function sortedIndexBy(array, value, iteratee) {
                            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                        }
                        /**
                         * This method is like `_.indexOf` except that it performs a binary
                         * search on a sorted `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                         * // => 1
                         */
                        function sortedIndexOf(array, value) {
                            var length = array == null ? 0 : array.length;
                            if (length) {
                                var index = baseSortedIndex(array, value);
                                if (index < length && eq(array[index], value)) {
                                    return index;
                                }
                            }
                            return -1;
                        }
                        /**
                         * This method is like `_.sortedIndex` except that it returns the highest
                         * index at which `value` should be inserted into `array` in order to
                         * maintain its sort order.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                         * // => 4
                         */
                        function sortedLastIndex(array, value) {
                            return baseSortedIndex(array, value, true);
                        }
                        /**
                         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                         * which is invoked for `value` and each element of `array` to compute their
                         * sort ranking. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The sorted array to inspect.
                         * @param {*} value The value to evaluate.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the index at which `value` should be inserted
                         *  into `array`.
                         * @example
                         *
                         * var objects = [{ 'x': 4 }, { 'x': 5 }];
                         *
                         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                         * // => 1
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                         * // => 1
                         */
                        function sortedLastIndexBy(array, value, iteratee) {
                            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                        }
                        /**
                         * This method is like `_.lastIndexOf` except that it performs a binary
                         * search on a sorted `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {*} value The value to search for.
                         * @returns {number} Returns the index of the matched value, else `-1`.
                         * @example
                         *
                         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                         * // => 3
                         */
                        function sortedLastIndexOf(array, value) {
                            var length = array == null ? 0 : array.length;
                            if (length) {
                                var index = baseSortedIndex(array, value, true) - 1;
                                if (eq(array[index], value)) {
                                    return index;
                                }
                            }
                            return -1;
                        }
                        /**
                         * This method is like `_.uniq` except that it's designed and optimized
                         * for sorted arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.sortedUniq([1, 1, 2]);
                         * // => [1, 2]
                         */
                        function sortedUniq(array) {
                            return (array && array.length)
                                ? baseSortedUniq(array)
                                : [];
                        }
                        /**
                         * This method is like `_.uniqBy` except that it's designed and optimized
                         * for sorted arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                         * // => [1.1, 2.3]
                         */
                        function sortedUniqBy(array, iteratee) {
                            return (array && array.length)
                                ? baseSortedUniq(array, getIteratee(iteratee, 2))
                                : [];
                        }
                        /**
                         * Gets all but the first element of `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.tail([1, 2, 3]);
                         * // => [2, 3]
                         */
                        function tail(array) {
                            var length = array == null ? 0 : array.length;
                            return length ? baseSlice(array, 1, length) : [];
                        }
                        /**
                         * Creates a slice of `array` with `n` elements taken from the beginning.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to take.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.take([1, 2, 3]);
                         * // => [1]
                         *
                         * _.take([1, 2, 3], 2);
                         * // => [1, 2]
                         *
                         * _.take([1, 2, 3], 5);
                         * // => [1, 2, 3]
                         *
                         * _.take([1, 2, 3], 0);
                         * // => []
                         */
                        function take(array, n, guard) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            return baseSlice(array, 0, n < 0 ? 0 : n);
                        }
                        /**
                         * Creates a slice of `array` with `n` elements taken from the end.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {number} [n=1] The number of elements to take.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * _.takeRight([1, 2, 3]);
                         * // => [3]
                         *
                         * _.takeRight([1, 2, 3], 2);
                         * // => [2, 3]
                         *
                         * _.takeRight([1, 2, 3], 5);
                         * // => [1, 2, 3]
                         *
                         * _.takeRight([1, 2, 3], 0);
                         * // => []
                         */
                        function takeRight(array, n, guard) {
                            var length = array == null ? 0 : array.length;
                            if (!length) {
                                return [];
                            }
                            n = (guard || n === undefined) ? 1 : toInteger(n);
                            n = length - n;
                            return baseSlice(array, n < 0 ? 0 : n, length);
                        }
                        /**
                         * Creates a slice of `array` with elements taken from the end. Elements are
                         * taken until `predicate` returns falsey. The predicate is invoked with
                         * three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': true },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': false }
                         * ];
                         *
                         * _.takeRightWhile(users, function(o) { return !o.active; });
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                         * // => objects for ['pebbles']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.takeRightWhile(users, ['active', false]);
                         * // => objects for ['fred', 'pebbles']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.takeRightWhile(users, 'active');
                         * // => []
                         */
                        function takeRightWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3), false, true)
                                : [];
                        }
                        /**
                         * Creates a slice of `array` with elements taken from the beginning. Elements
                         * are taken until `predicate` returns falsey. The predicate is invoked with
                         * three arguments: (value, index, array).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Array
                         * @param {Array} array The array to query.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the slice of `array`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'active': false },
                         *   { 'user': 'fred',    'active': false },
                         *   { 'user': 'pebbles', 'active': true }
                         * ];
                         *
                         * _.takeWhile(users, function(o) { return !o.active; });
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.takeWhile(users, { 'user': 'barney', 'active': false });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.takeWhile(users, ['active', false]);
                         * // => objects for ['barney', 'fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.takeWhile(users, 'active');
                         * // => []
                         */
                        function takeWhile(array, predicate) {
                            return (array && array.length)
                                ? baseWhile(array, getIteratee(predicate, 3))
                                : [];
                        }
                        /**
                         * Creates an array of unique values, in order, from all given arrays using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * _.union([2], [1, 2]);
                         * // => [2, 1]
                         */
                        var union = baseRest(function (arrays) {
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                        });
                        /**
                         * This method is like `_.union` except that it accepts `iteratee` which is
                         * invoked for each element of each `arrays` to generate the criterion by
                         * which uniqueness is computed. Result values are chosen from the first
                         * array in which the value occurs. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                         * // => [2.1, 1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }, { 'x': 2 }]
                         */
                        var unionBy = baseRest(function (arrays) {
                            var iteratee = last(arrays);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                        });
                        /**
                         * This method is like `_.union` except that it accepts `comparator` which
                         * is invoked to compare elements of `arrays`. Result values are chosen from
                         * the first array in which the value occurs. The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of combined values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.unionWith(objects, others, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                         */
                        var unionWith = baseRest(function (arrays) {
                            var comparator = last(arrays);
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                        });
                        /**
                         * Creates a duplicate-free version of an array, using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons, in which only the first occurrence of each element
                         * is kept. The order of result values is determined by the order they occur
                         * in the array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.uniq([2, 1, 2]);
                         * // => [2, 1]
                         */
                        function uniq(array) {
                            return (array && array.length) ? baseUniq(array) : [];
                        }
                        /**
                         * This method is like `_.uniq` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * uniqueness is computed. The order of result values is determined by the
                         * order they occur in the array. The iteratee is invoked with one argument:
                         * (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                         * // => [2.1, 1.2]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 1 }, { 'x': 2 }]
                         */
                        function uniqBy(array, iteratee) {
                            return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                        }
                        /**
                         * This method is like `_.uniq` except that it accepts `comparator` which
                         * is invoked to compare elements of `array`. The order of result values is
                         * determined by the order they occur in the array.The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new duplicate free array.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.uniqWith(objects, _.isEqual);
                         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                         */
                        function uniqWith(array, comparator) {
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                        }
                        /**
                         * This method is like `_.zip` except that it accepts an array of grouped
                         * elements and creates an array regrouping the elements to their pre-zip
                         * configuration.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.2.0
                         * @category Array
                         * @param {Array} array The array of grouped elements to process.
                         * @returns {Array} Returns the new array of regrouped elements.
                         * @example
                         *
                         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                         * // => [['a', 1, true], ['b', 2, false]]
                         *
                         * _.unzip(zipped);
                         * // => [['a', 'b'], [1, 2], [true, false]]
                         */
                        function unzip(array) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            var length = 0;
                            array = arrayFilter(array, function (group) {
                                if (isArrayLikeObject(group)) {
                                    length = nativeMax(group.length, length);
                                    return true;
                                }
                            });
                            return baseTimes(length, function (index) {
                                return arrayMap(array, baseProperty(index));
                            });
                        }
                        /**
                         * This method is like `_.unzip` except that it accepts `iteratee` to specify
                         * how regrouped values should be combined. The iteratee is invoked with the
                         * elements of each group: (...group).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Array
                         * @param {Array} array The array of grouped elements to process.
                         * @param {Function} [iteratee=_.identity] The function to combine
                         *  regrouped values.
                         * @returns {Array} Returns the new array of regrouped elements.
                         * @example
                         *
                         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                         * // => [[1, 10, 100], [2, 20, 200]]
                         *
                         * _.unzipWith(zipped, _.add);
                         * // => [3, 30, 300]
                         */
                        function unzipWith(array, iteratee) {
                            if (!(array && array.length)) {
                                return [];
                            }
                            var result = unzip(array);
                            if (iteratee == null) {
                                return result;
                            }
                            return arrayMap(result, function (group) {
                                return apply(iteratee, undefined, group);
                            });
                        }
                        /**
                         * Creates an array excluding all given values using
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * for equality comparisons.
                         *
                         * **Note:** Unlike `_.pull`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {Array} array The array to inspect.
                         * @param {...*} [values] The values to exclude.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.difference, _.xor
                         * @example
                         *
                         * _.without([2, 1, 2, 3], 1, 2);
                         * // => [3]
                         */
                        var without = baseRest(function (array, values) {
                            return isArrayLikeObject(array)
                                ? baseDifference(array, values)
                                : [];
                        });
                        /**
                         * Creates an array of unique values that is the
                         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                         * of the given arrays. The order of result values is determined by the order
                         * they occur in the arrays.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @returns {Array} Returns the new array of filtered values.
                         * @see _.difference, _.without
                         * @example
                         *
                         * _.xor([2, 1], [2, 3]);
                         * // => [1, 3]
                         */
                        var xor = baseRest(function (arrays) {
                            return baseXor(arrayFilter(arrays, isArrayLikeObject));
                        });
                        /**
                         * This method is like `_.xor` except that it accepts `iteratee` which is
                         * invoked for each element of each `arrays` to generate the criterion by
                         * which by which they're compared. The order of result values is determined
                         * by the order they occur in the arrays. The iteratee is invoked with one
                         * argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                         * // => [1.2, 3.4]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                         * // => [{ 'x': 2 }]
                         */
                        var xorBy = baseRest(function (arrays) {
                            var iteratee = last(arrays);
                            if (isArrayLikeObject(iteratee)) {
                                iteratee = undefined;
                            }
                            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                        });
                        /**
                         * This method is like `_.xor` except that it accepts `comparator` which is
                         * invoked to compare elements of `arrays`. The order of result values is
                         * determined by the order they occur in the arrays. The comparator is invoked
                         * with two arguments: (arrVal, othVal).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to inspect.
                         * @param {Function} [comparator] The comparator invoked per element.
                         * @returns {Array} Returns the new array of filtered values.
                         * @example
                         *
                         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                         *
                         * _.xorWith(objects, others, _.isEqual);
                         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                         */
                        var xorWith = baseRest(function (arrays) {
                            var comparator = last(arrays);
                            comparator = typeof comparator == 'function' ? comparator : undefined;
                            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                        });
                        /**
                         * Creates an array of grouped elements, the first of which contains the
                         * first elements of the given arrays, the second of which contains the
                         * second elements of the given arrays, and so on.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to process.
                         * @returns {Array} Returns the new array of grouped elements.
                         * @example
                         *
                         * _.zip(['a', 'b'], [1, 2], [true, false]);
                         * // => [['a', 1, true], ['b', 2, false]]
                         */
                        var zip = baseRest(unzip);
                        /**
                         * This method is like `_.fromPairs` except that it accepts two arrays,
                         * one of property identifiers and one of corresponding values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.4.0
                         * @category Array
                         * @param {Array} [props=[]] The property identifiers.
                         * @param {Array} [values=[]] The property values.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.zipObject(['a', 'b'], [1, 2]);
                         * // => { 'a': 1, 'b': 2 }
                         */
                        function zipObject(props, values) {
                            return baseZipObject(props || [], values || [], assignValue);
                        }
                        /**
                         * This method is like `_.zipObject` except that it supports property paths.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.1.0
                         * @category Array
                         * @param {Array} [props=[]] The property identifiers.
                         * @param {Array} [values=[]] The property values.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                         */
                        function zipObjectDeep(props, values) {
                            return baseZipObject(props || [], values || [], baseSet);
                        }
                        /**
                         * This method is like `_.zip` except that it accepts `iteratee` to specify
                         * how grouped values should be combined. The iteratee is invoked with the
                         * elements of each group: (...group).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Array
                         * @param {...Array} [arrays] The arrays to process.
                         * @param {Function} [iteratee=_.identity] The function to combine
                         *  grouped values.
                         * @returns {Array} Returns the new array of grouped elements.
                         * @example
                         *
                         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                         *   return a + b + c;
                         * });
                         * // => [111, 222]
                         */
                        var zipWith = baseRest(function (arrays) {
                            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
                            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                            return unzipWith(arrays, iteratee);
                        });
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                         * chain sequences enabled. The result of such sequences must be unwrapped
                         * with `_#value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.3.0
                         * @category Seq
                         * @param {*} value The value to wrap.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36 },
                         *   { 'user': 'fred',    'age': 40 },
                         *   { 'user': 'pebbles', 'age': 1 }
                         * ];
                         *
                         * var youngest = _
                         *   .chain(users)
                         *   .sortBy('age')
                         *   .map(function(o) {
                         *     return o.user + ' is ' + o.age;
                         *   })
                         *   .head()
                         *   .value();
                         * // => 'pebbles is 1'
                         */
                        function chain(value) {
                            var result = lodash(value);
                            result.__chain__ = true;
                            return result;
                        }
                        /**
                         * This method invokes `interceptor` and returns `value`. The interceptor
                         * is invoked with one argument; (value). The purpose of this method is to
                         * "tap into" a method chain sequence in order to modify intermediate results.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @param {*} value The value to provide to `interceptor`.
                         * @param {Function} interceptor The function to invoke.
                         * @returns {*} Returns `value`.
                         * @example
                         *
                         * _([1, 2, 3])
                         *  .tap(function(array) {
                         *    // Mutate input array.
                         *    array.pop();
                         *  })
                         *  .reverse()
                         *  .value();
                         * // => [2, 1]
                         */
                        function tap(value, interceptor) {
                            interceptor(value);
                            return value;
                        }
                        /**
                         * This method is like `_.tap` except that it returns the result of `interceptor`.
                         * The purpose of this method is to "pass thru" values replacing intermediate
                         * results in a method chain sequence.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Seq
                         * @param {*} value The value to provide to `interceptor`.
                         * @param {Function} interceptor The function to invoke.
                         * @returns {*} Returns the result of `interceptor`.
                         * @example
                         *
                         * _('  abc  ')
                         *  .chain()
                         *  .trim()
                         *  .thru(function(value) {
                         *    return [value];
                         *  })
                         *  .value();
                         * // => ['abc']
                         */
                        function thru(value, interceptor) {
                            return interceptor(value);
                        }
                        /**
                         * This method is the wrapper version of `_.at`.
                         *
                         * @name at
                         * @memberOf _
                         * @since 1.0.0
                         * @category Seq
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                         *
                         * _(object).at(['a[0].b.c', 'a[1]']).value();
                         * // => [3, 4]
                         */
                        var wrapperAt = flatRest(function (paths) {
                            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) { return baseAt(object, paths); };
                            if (length > 1 || this.__actions__.length ||
                                !(value instanceof LazyWrapper) || !isIndex(start)) {
                                return this.thru(interceptor);
                            }
                            value = value.slice(start, +start + (length ? 1 : 0));
                            value.__actions__.push({
                                'func': thru,
                                'args': [interceptor],
                                'thisArg': undefined
                            });
                            return new LodashWrapper(value, this.__chain__).thru(function (array) {
                                if (length && !array.length) {
                                    array.push(undefined);
                                }
                                return array;
                            });
                        });
                        /**
                         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                         *
                         * @name chain
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36 },
                         *   { 'user': 'fred',   'age': 40 }
                         * ];
                         *
                         * // A sequence without explicit chaining.
                         * _(users).head();
                         * // => { 'user': 'barney', 'age': 36 }
                         *
                         * // A sequence with explicit chaining.
                         * _(users)
                         *   .chain()
                         *   .head()
                         *   .pick('user')
                         *   .value();
                         * // => { 'user': 'barney' }
                         */
                        function wrapperChain() {
                            return chain(this);
                        }
                        /**
                         * Executes the chain sequence and returns the wrapped result.
                         *
                         * @name commit
                         * @memberOf _
                         * @since 3.2.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var array = [1, 2];
                         * var wrapped = _(array).push(3);
                         *
                         * console.log(array);
                         * // => [1, 2]
                         *
                         * wrapped = wrapped.commit();
                         * console.log(array);
                         * // => [1, 2, 3]
                         *
                         * wrapped.last();
                         * // => 3
                         *
                         * console.log(array);
                         * // => [1, 2, 3]
                         */
                        function wrapperCommit() {
                            return new LodashWrapper(this.value(), this.__chain__);
                        }
                        /**
                         * Gets the next value on a wrapped object following the
                         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                         *
                         * @name next
                         * @memberOf _
                         * @since 4.0.0
                         * @category Seq
                         * @returns {Object} Returns the next iterator value.
                         * @example
                         *
                         * var wrapped = _([1, 2]);
                         *
                         * wrapped.next();
                         * // => { 'done': false, 'value': 1 }
                         *
                         * wrapped.next();
                         * // => { 'done': false, 'value': 2 }
                         *
                         * wrapped.next();
                         * // => { 'done': true, 'value': undefined }
                         */
                        function wrapperNext() {
                            if (this.__values__ === undefined) {
                                this.__values__ = toArray(this.value());
                            }
                            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
                            return { 'done': done, 'value': value };
                        }
                        /**
                         * Enables the wrapper to be iterable.
                         *
                         * @name Symbol.iterator
                         * @memberOf _
                         * @since 4.0.0
                         * @category Seq
                         * @returns {Object} Returns the wrapper object.
                         * @example
                         *
                         * var wrapped = _([1, 2]);
                         *
                         * wrapped[Symbol.iterator]() === wrapped;
                         * // => true
                         *
                         * Array.from(wrapped);
                         * // => [1, 2]
                         */
                        function wrapperToIterator() {
                            return this;
                        }
                        /**
                         * Creates a clone of the chain sequence planting `value` as the wrapped value.
                         *
                         * @name plant
                         * @memberOf _
                         * @since 3.2.0
                         * @category Seq
                         * @param {*} value The value to plant.
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * var wrapped = _([1, 2]).map(square);
                         * var other = wrapped.plant([3, 4]);
                         *
                         * other.value();
                         * // => [9, 16]
                         *
                         * wrapped.value();
                         * // => [1, 4]
                         */
                        function wrapperPlant(value) {
                            var result, parent = this;
                            while (parent instanceof baseLodash) {
                                var clone = wrapperClone(parent);
                                clone.__index__ = 0;
                                clone.__values__ = undefined;
                                if (result) {
                                    previous.__wrapped__ = clone;
                                }
                                else {
                                    result = clone;
                                }
                                var previous = clone;
                                parent = parent.__wrapped__;
                            }
                            previous.__wrapped__ = value;
                            return result;
                        }
                        /**
                         * This method is the wrapper version of `_.reverse`.
                         *
                         * **Note:** This method mutates the wrapped array.
                         *
                         * @name reverse
                         * @memberOf _
                         * @since 0.1.0
                         * @category Seq
                         * @returns {Object} Returns the new `lodash` wrapper instance.
                         * @example
                         *
                         * var array = [1, 2, 3];
                         *
                         * _(array).reverse().value()
                         * // => [3, 2, 1]
                         *
                         * console.log(array);
                         * // => [3, 2, 1]
                         */
                        function wrapperReverse() {
                            var value = this.__wrapped__;
                            if (value instanceof LazyWrapper) {
                                var wrapped = value;
                                if (this.__actions__.length) {
                                    wrapped = new LazyWrapper(this);
                                }
                                wrapped = wrapped.reverse();
                                wrapped.__actions__.push({
                                    'func': thru,
                                    'args': [reverse],
                                    'thisArg': undefined
                                });
                                return new LodashWrapper(wrapped, this.__chain__);
                            }
                            return this.thru(reverse);
                        }
                        /**
                         * Executes the chain sequence to resolve the unwrapped value.
                         *
                         * @name value
                         * @memberOf _
                         * @since 0.1.0
                         * @alias toJSON, valueOf
                         * @category Seq
                         * @returns {*} Returns the resolved unwrapped value.
                         * @example
                         *
                         * _([1, 2, 3]).value();
                         * // => [1, 2, 3]
                         */
                        function wrapperValue() {
                            return baseWrapperValue(this.__wrapped__, this.__actions__);
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The corresponding value of
                         * each key is the number of times the key was returned by `iteratee`. The
                         * iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * _.countBy([6.1, 4.2, 6.3], Math.floor);
                         * // => { '4': 1, '6': 2 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.countBy(['one', 'two', 'three'], 'length');
                         * // => { '3': 2, '5': 1 }
                         */
                        var countBy = createAggregator(function (result, value, key) {
                            if (hasOwnProperty.call(result, key)) {
                                ++result[key];
                            }
                            else {
                                baseAssignValue(result, key, 1);
                            }
                        });
                        /**
                         * Checks if `predicate` returns truthy for **all** elements of `collection`.
                         * Iteration is stopped once `predicate` returns falsey. The predicate is
                         * invoked with three arguments: (value, index|key, collection).
                         *
                         * **Note:** This method returns `true` for
                         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                         * elements of empty collections.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {boolean} Returns `true` if all elements pass the predicate check,
                         *  else `false`.
                         * @example
                         *
                         * _.every([true, 1, null, 'yes'], Boolean);
                         * // => false
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': false },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.every(users, { 'user': 'barney', 'active': false });
                         * // => false
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.every(users, ['active', false]);
                         * // => true
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.every(users, 'active');
                         * // => false
                         */
                        function every(collection, predicate, guard) {
                            var func = isArray(collection) ? arrayEvery : baseEvery;
                            if (guard && isIterateeCall(collection, predicate, guard)) {
                                predicate = undefined;
                            }
                            return func(collection, getIteratee(predicate, 3));
                        }
                        /**
                         * Iterates over elements of `collection`, returning an array of all elements
                         * `predicate` returns truthy for. The predicate is invoked with three
                         * arguments: (value, index|key, collection).
                         *
                         * **Note:** Unlike `_.remove`, this method returns a new array.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         * @see _.reject
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': true },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * _.filter(users, function(o) { return !o.active; });
                         * // => objects for ['fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.filter(users, { 'age': 36, 'active': true });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.filter(users, ['active', false]);
                         * // => objects for ['fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.filter(users, 'active');
                         * // => objects for ['barney']
                         *
                         * // Combining several predicates using `_.overEvery` or `_.overSome`.
                         * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
                         * // => objects for ['fred', 'barney']
                         */
                        function filter(collection, predicate) {
                            var func = isArray(collection) ? arrayFilter : baseFilter;
                            return func(collection, getIteratee(predicate, 3));
                        }
                        /**
                         * Iterates over elements of `collection`, returning the first element
                         * `predicate` returns truthy for. The predicate is invoked with three
                         * arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @returns {*} Returns the matched element, else `undefined`.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36, 'active': true },
                         *   { 'user': 'fred',    'age': 40, 'active': false },
                         *   { 'user': 'pebbles', 'age': 1,  'active': true }
                         * ];
                         *
                         * _.find(users, function(o) { return o.age < 40; });
                         * // => object for 'barney'
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.find(users, { 'age': 1, 'active': true });
                         * // => object for 'pebbles'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.find(users, ['active', false]);
                         * // => object for 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.find(users, 'active');
                         * // => object for 'barney'
                         */
                        var find = createFind(findIndex);
                        /**
                         * This method is like `_.find` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param {number} [fromIndex=collection.length-1] The index to search from.
                         * @returns {*} Returns the matched element, else `undefined`.
                         * @example
                         *
                         * _.findLast([1, 2, 3, 4], function(n) {
                         *   return n % 2 == 1;
                         * });
                         * // => 3
                         */
                        var findLast = createFind(findLastIndex);
                        /**
                         * Creates a flattened array of values by running each element in `collection`
                         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                         * with three arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
                         *   return [n, n];
                         * }
                         *
                         * _.flatMap([1, 2], duplicate);
                         * // => [1, 1, 2, 2]
                         */
                        function flatMap(collection, iteratee) {
                            return baseFlatten(map(collection, iteratee), 1);
                        }
                        /**
                         * This method is like `_.flatMap` except that it recursively flattens the
                         * mapped results.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
                         *   return [[[n, n]]];
                         * }
                         *
                         * _.flatMapDeep([1, 2], duplicate);
                         * // => [1, 1, 2, 2]
                         */
                        function flatMapDeep(collection, iteratee) {
                            return baseFlatten(map(collection, iteratee), INFINITY);
                        }
                        /**
                         * This method is like `_.flatMap` except that it recursively flattens the
                         * mapped results up to `depth` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {number} [depth=1] The maximum recursion depth.
                         * @returns {Array} Returns the new flattened array.
                         * @example
                         *
                         * function duplicate(n) {
                         *   return [[[n, n]]];
                         * }
                         *
                         * _.flatMapDepth([1, 2], duplicate, 2);
                         * // => [[1, 1], [2, 2]]
                         */
                        function flatMapDepth(collection, iteratee, depth) {
                            depth = depth === undefined ? 1 : toInteger(depth);
                            return baseFlatten(map(collection, iteratee), depth);
                        }
                        /**
                         * Iterates over elements of `collection` and invokes `iteratee` for each element.
                         * The iteratee is invoked with three arguments: (value, index|key, collection).
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * **Note:** As with other "Collections" methods, objects with a "length"
                         * property are iterated like arrays. To avoid this behavior use `_.forIn`
                         * or `_.forOwn` for object iteration.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @alias each
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         * @see _.forEachRight
                         * @example
                         *
                         * _.forEach([1, 2], function(value) {
                         *   console.log(value);
                         * });
                         * // => Logs `1` then `2`.
                         *
                         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                         *   console.log(key);
                         * });
                         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                         */
                        function forEach(collection, iteratee) {
                            var func = isArray(collection) ? arrayEach : baseEach;
                            return func(collection, getIteratee(iteratee, 3));
                        }
                        /**
                         * This method is like `_.forEach` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @alias eachRight
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array|Object} Returns `collection`.
                         * @see _.forEach
                         * @example
                         *
                         * _.forEachRight([1, 2], function(value) {
                         *   console.log(value);
                         * });
                         * // => Logs `2` then `1`.
                         */
                        function forEachRight(collection, iteratee) {
                            var func = isArray(collection) ? arrayEachRight : baseEachRight;
                            return func(collection, getIteratee(iteratee, 3));
                        }
                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The order of grouped values
                         * is determined by the order they occur in `collection`. The corresponding
                         * value of each key is an array of elements responsible for generating the
                         * key. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                         * // => { '4': [4.2], '6': [6.1, 6.3] }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.groupBy(['one', 'two', 'three'], 'length');
                         * // => { '3': ['one', 'two'], '5': ['three'] }
                         */
                        var groupBy = createAggregator(function (result, value, key) {
                            if (hasOwnProperty.call(result, key)) {
                                result[key].push(value);
                            }
                            else {
                                baseAssignValue(result, key, [value]);
                            }
                        });
                        /**
                         * Checks if `value` is in `collection`. If `collection` is a string, it's
                         * checked for a substring of `value`, otherwise
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * is used for equality comparisons. If `fromIndex` is negative, it's used as
                         * the offset from the end of `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object|string} collection The collection to inspect.
                         * @param {*} value The value to search for.
                         * @param {number} [fromIndex=0] The index to search from.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                         * @returns {boolean} Returns `true` if `value` is found, else `false`.
                         * @example
                         *
                         * _.includes([1, 2, 3], 1);
                         * // => true
                         *
                         * _.includes([1, 2, 3], 1, 2);
                         * // => false
                         *
                         * _.includes({ 'a': 1, 'b': 2 }, 1);
                         * // => true
                         *
                         * _.includes('abcd', 'bc');
                         * // => true
                         */
                        function includes(collection, value, fromIndex, guard) {
                            collection = isArrayLike(collection) ? collection : values(collection);
                            fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
                            var length = collection.length;
                            if (fromIndex < 0) {
                                fromIndex = nativeMax(length + fromIndex, 0);
                            }
                            return isString(collection)
                                ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                                : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                        }
                        /**
                         * Invokes the method at `path` of each element in `collection`, returning
                         * an array of the results of each invoked method. Any additional arguments
                         * are provided to each invoked method. If `path` is a function, it's invoked
                         * for, and `this` bound to, each element in `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Array|Function|string} path The path of the method to invoke or
                         *  the function invoked per iteration.
                         * @param {...*} [args] The arguments to invoke each method with.
                         * @returns {Array} Returns the array of results.
                         * @example
                         *
                         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                         * // => [[1, 5, 7], [1, 2, 3]]
                         *
                         * _.invokeMap([123, 456], String.prototype.split, '');
                         * // => [['1', '2', '3'], ['4', '5', '6']]
                         */
                        var invokeMap = baseRest(function (collection, path, args) {
                            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
                            baseEach(collection, function (value) {
                                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                            });
                            return result;
                        });
                        /**
                         * Creates an object composed of keys generated from the results of running
                         * each element of `collection` thru `iteratee`. The corresponding value of
                         * each key is the last element responsible for generating the key. The
                         * iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                         * @returns {Object} Returns the composed aggregate object.
                         * @example
                         *
                         * var array = [
                         *   { 'dir': 'left', 'code': 97 },
                         *   { 'dir': 'right', 'code': 100 }
                         * ];
                         *
                         * _.keyBy(array, function(o) {
                         *   return String.fromCharCode(o.code);
                         * });
                         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                         *
                         * _.keyBy(array, 'dir');
                         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                         */
                        var keyBy = createAggregator(function (result, value, key) {
                            baseAssignValue(result, key, value);
                        });
                        /**
                         * Creates an array of values by running each element in `collection` thru
                         * `iteratee`. The iteratee is invoked with three arguments:
                         * (value, index|key, collection).
                         *
                         * Many lodash methods are guarded to work as iteratees for methods like
                         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                         *
                         * The guarded methods are:
                         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new mapped array.
                         * @example
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * _.map([4, 8], square);
                         * // => [16, 64]
                         *
                         * _.map({ 'a': 4, 'b': 8 }, square);
                         * // => [16, 64] (iteration order is not guaranteed)
                         *
                         * var users = [
                         *   { 'user': 'barney' },
                         *   { 'user': 'fred' }
                         * ];
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.map(users, 'user');
                         * // => ['barney', 'fred']
                         */
                        function map(collection, iteratee) {
                            var func = isArray(collection) ? arrayMap : baseMap;
                            return func(collection, getIteratee(iteratee, 3));
                        }
                        /**
                         * This method is like `_.sortBy` except that it allows specifying the sort
                         * orders of the iteratees to sort by. If `orders` is unspecified, all values
                         * are sorted in ascending order. Otherwise, specify an order of "desc" for
                         * descending or "asc" for ascending sort order of corresponding values.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                         *  The iteratees to sort by.
                         * @param {string[]} [orders] The sort orders of `iteratees`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                         * @returns {Array} Returns the new sorted array.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'fred',   'age': 48 },
                         *   { 'user': 'barney', 'age': 34 },
                         *   { 'user': 'fred',   'age': 40 },
                         *   { 'user': 'barney', 'age': 36 }
                         * ];
                         *
                         * // Sort by `user` in ascending order and by `age` in descending order.
                         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                         */
                        function orderBy(collection, iteratees, orders, guard) {
                            if (collection == null) {
                                return [];
                            }
                            if (!isArray(iteratees)) {
                                iteratees = iteratees == null ? [] : [iteratees];
                            }
                            orders = guard ? undefined : orders;
                            if (!isArray(orders)) {
                                orders = orders == null ? [] : [orders];
                            }
                            return baseOrderBy(collection, iteratees, orders);
                        }
                        /**
                         * Creates an array of elements split into two groups, the first of which
                         * contains elements `predicate` returns truthy for, the second of which
                         * contains elements `predicate` returns falsey for. The predicate is
                         * invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the array of grouped elements.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney',  'age': 36, 'active': false },
                         *   { 'user': 'fred',    'age': 40, 'active': true },
                         *   { 'user': 'pebbles', 'age': 1,  'active': false }
                         * ];
                         *
                         * _.partition(users, function(o) { return o.active; });
                         * // => objects for [['fred'], ['barney', 'pebbles']]
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.partition(users, { 'age': 1, 'active': false });
                         * // => objects for [['pebbles'], ['barney', 'fred']]
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.partition(users, ['active', false]);
                         * // => objects for [['barney', 'pebbles'], ['fred']]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.partition(users, 'active');
                         * // => objects for [['fred'], ['barney', 'pebbles']]
                         */
                        var partition = createAggregator(function (result, value, key) {
                            result[key ? 0 : 1].push(value);
                        }, function () { return [[], []]; });
                        /**
                         * Reduces `collection` to a value which is the accumulated result of running
                         * each element in `collection` thru `iteratee`, where each successive
                         * invocation is supplied the return value of the previous. If `accumulator`
                         * is not given, the first element of `collection` is used as the initial
                         * value. The iteratee is invoked with four arguments:
                         * (accumulator, value, index|key, collection).
                         *
                         * Many lodash methods are guarded to work as iteratees for methods like
                         * `_.reduce`, `_.reduceRight`, and `_.transform`.
                         *
                         * The guarded methods are:
                         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                         * and `sortBy`
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @returns {*} Returns the accumulated value.
                         * @see _.reduceRight
                         * @example
                         *
                         * _.reduce([1, 2], function(sum, n) {
                         *   return sum + n;
                         * }, 0);
                         * // => 3
                         *
                         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                         *   (result[value] || (result[value] = [])).push(key);
                         *   return result;
                         * }, {});
                         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                         */
                        function reduce(collection, iteratee, accumulator) {
                            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
                            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                        }
                        /**
                         * This method is like `_.reduce` except that it iterates over elements of
                         * `collection` from right to left.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The initial value.
                         * @returns {*} Returns the accumulated value.
                         * @see _.reduce
                         * @example
                         *
                         * var array = [[0, 1], [2, 3], [4, 5]];
                         *
                         * _.reduceRight(array, function(flattened, other) {
                         *   return flattened.concat(other);
                         * }, []);
                         * // => [4, 5, 2, 3, 0, 1]
                         */
                        function reduceRight(collection, iteratee, accumulator) {
                            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
                            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                        }
                        /**
                         * The opposite of `_.filter`; this method returns the elements of `collection`
                         * that `predicate` does **not** return truthy for.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the new filtered array.
                         * @see _.filter
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': false },
                         *   { 'user': 'fred',   'age': 40, 'active': true }
                         * ];
                         *
                         * _.reject(users, function(o) { return !o.active; });
                         * // => objects for ['fred']
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.reject(users, { 'age': 40, 'active': true });
                         * // => objects for ['barney']
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.reject(users, ['active', false]);
                         * // => objects for ['fred']
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.reject(users, 'active');
                         * // => objects for ['barney']
                         */
                        function reject(collection, predicate) {
                            var func = isArray(collection) ? arrayFilter : baseFilter;
                            return func(collection, negate(getIteratee(predicate, 3)));
                        }
                        /**
                         * Gets a random element from `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to sample.
                         * @returns {*} Returns the random element.
                         * @example
                         *
                         * _.sample([1, 2, 3, 4]);
                         * // => 2
                         */
                        function sample(collection) {
                            var func = isArray(collection) ? arraySample : baseSample;
                            return func(collection);
                        }
                        /**
                         * Gets `n` random elements at unique keys from `collection` up to the
                         * size of `collection`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to sample.
                         * @param {number} [n=1] The number of elements to sample.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the random elements.
                         * @example
                         *
                         * _.sampleSize([1, 2, 3], 2);
                         * // => [3, 1]
                         *
                         * _.sampleSize([1, 2, 3], 4);
                         * // => [2, 3, 1]
                         */
                        function sampleSize(collection, n, guard) {
                            if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                                n = 1;
                            }
                            else {
                                n = toInteger(n);
                            }
                            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                            return func(collection, n);
                        }
                        /**
                         * Creates an array of shuffled values, using a version of the
                         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to shuffle.
                         * @returns {Array} Returns the new shuffled array.
                         * @example
                         *
                         * _.shuffle([1, 2, 3, 4]);
                         * // => [4, 1, 3, 2]
                         */
                        function shuffle(collection) {
                            var func = isArray(collection) ? arrayShuffle : baseShuffle;
                            return func(collection);
                        }
                        /**
                         * Gets the size of `collection` by returning its length for array-like
                         * values or the number of own enumerable string keyed properties for objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object|string} collection The collection to inspect.
                         * @returns {number} Returns the collection size.
                         * @example
                         *
                         * _.size([1, 2, 3]);
                         * // => 3
                         *
                         * _.size({ 'a': 1, 'b': 2 });
                         * // => 2
                         *
                         * _.size('pebbles');
                         * // => 7
                         */
                        function size(collection) {
                            if (collection == null) {
                                return 0;
                            }
                            if (isArrayLike(collection)) {
                                return isString(collection) ? stringSize(collection) : collection.length;
                            }
                            var tag = getTag(collection);
                            if (tag == mapTag || tag == setTag) {
                                return collection.size;
                            }
                            return baseKeys(collection).length;
                        }
                        /**
                         * Checks if `predicate` returns truthy for **any** element of `collection`.
                         * Iteration is stopped once `predicate` returns truthy. The predicate is
                         * invoked with three arguments: (value, index|key, collection).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {boolean} Returns `true` if any element passes the predicate check,
                         *  else `false`.
                         * @example
                         *
                         * _.some([null, 0, 'yes', false], Boolean);
                         * // => true
                         *
                         * var users = [
                         *   { 'user': 'barney', 'active': true },
                         *   { 'user': 'fred',   'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.some(users, { 'user': 'barney', 'active': false });
                         * // => false
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.some(users, ['active', false]);
                         * // => true
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.some(users, 'active');
                         * // => true
                         */
                        function some(collection, predicate, guard) {
                            var func = isArray(collection) ? arraySome : baseSome;
                            if (guard && isIterateeCall(collection, predicate, guard)) {
                                predicate = undefined;
                            }
                            return func(collection, getIteratee(predicate, 3));
                        }
                        /**
                         * Creates an array of elements, sorted in ascending order by the results of
                         * running each element in a collection thru each iteratee. This method
                         * performs a stable sort, that is, it preserves the original sort order of
                         * equal elements. The iteratees are invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Collection
                         * @param {Array|Object} collection The collection to iterate over.
                         * @param {...(Function|Function[])} [iteratees=[_.identity]]
                         *  The iteratees to sort by.
                         * @returns {Array} Returns the new sorted array.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'fred',   'age': 48 },
                         *   { 'user': 'barney', 'age': 36 },
                         *   { 'user': 'fred',   'age': 30 },
                         *   { 'user': 'barney', 'age': 34 }
                         * ];
                         *
                         * _.sortBy(users, [function(o) { return o.user; }]);
                         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
                         *
                         * _.sortBy(users, ['user', 'age']);
                         * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
                         */
                        var sortBy = baseRest(function (collection, iteratees) {
                            if (collection == null) {
                                return [];
                            }
                            var length = iteratees.length;
                            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                                iteratees = [];
                            }
                            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                                iteratees = [iteratees[0]];
                            }
                            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                        });
                        /*------------------------------------------------------------------------*/
                        /**
                         * Gets the timestamp of the number of milliseconds that have elapsed since
                         * the Unix epoch (1 January 1970 00:00:00 UTC).
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Date
                         * @returns {number} Returns the timestamp.
                         * @example
                         *
                         * _.defer(function(stamp) {
                         *   console.log(_.now() - stamp);
                         * }, _.now());
                         * // => Logs the number of milliseconds it took for the deferred invocation.
                         */
                        var now = ctxNow || function () {
                            return root.Date.now();
                        };
                        /*------------------------------------------------------------------------*/
                        /**
                         * The opposite of `_.before`; this method creates a function that invokes
                         * `func` once it's called `n` or more times.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {number} n The number of calls before `func` is invoked.
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * var saves = ['profile', 'settings'];
                         *
                         * var done = _.after(saves.length, function() {
                         *   console.log('done saving!');
                         * });
                         *
                         * _.forEach(saves, function(type) {
                         *   asyncSave({ 'type': type, 'complete': done });
                         * });
                         * // => Logs 'done saving!' after the two async saves have completed.
                         */
                        function after(n, func) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            n = toInteger(n);
                            return function () {
                                if (--n < 1) {
                                    return func.apply(this, arguments);
                                }
                            };
                        }
                        /**
                         * Creates a function that invokes `func`, with up to `n` arguments,
                         * ignoring any additional arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to cap arguments for.
                         * @param {number} [n=func.length] The arity cap.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new capped function.
                         * @example
                         *
                         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                         * // => [6, 8, 10]
                         */
                        function ary(func, n, guard) {
                            n = guard ? undefined : n;
                            n = (func && n == null) ? func.length : n;
                            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                        }
                        /**
                         * Creates a function that invokes `func`, with the `this` binding and arguments
                         * of the created function, while it's called less than `n` times. Subsequent
                         * calls to the created function return the result of the last `func` invocation.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {number} n The number of calls at which `func` is no longer invoked.
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * jQuery(element).on('click', _.before(5, addContactToList));
                         * // => Allows adding up to 4 contacts to the list.
                         */
                        function before(n, func) {
                            var result;
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            n = toInteger(n);
                            return function () {
                                if (--n > 0) {
                                    result = func.apply(this, arguments);
                                }
                                if (n <= 1) {
                                    func = undefined;
                                }
                                return result;
                            };
                        }
                        /**
                         * Creates a function that invokes `func` with the `this` binding of `thisArg`
                         * and `partials` prepended to the arguments it receives.
                         *
                         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                         * may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                         * property of bound functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to bind.
                         * @param {*} thisArg The `this` binding of `func`.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new bound function.
                         * @example
                         *
                         * function greet(greeting, punctuation) {
                         *   return greeting + ' ' + this.user + punctuation;
                         * }
                         *
                         * var object = { 'user': 'fred' };
                         *
                         * var bound = _.bind(greet, object, 'hi');
                         * bound('!');
                         * // => 'hi fred!'
                         *
                         * // Bound with placeholders.
                         * var bound = _.bind(greet, object, _, '!');
                         * bound('hi');
                         * // => 'hi fred!'
                         */
                        var bind = baseRest(function (func, thisArg, partials) {
                            var bitmask = WRAP_BIND_FLAG;
                            if (partials.length) {
                                var holders = replaceHolders(partials, getHolder(bind));
                                bitmask |= WRAP_PARTIAL_FLAG;
                            }
                            return createWrap(func, bitmask, thisArg, partials, holders);
                        });
                        /**
                         * Creates a function that invokes the method at `object[key]` with `partials`
                         * prepended to the arguments it receives.
                         *
                         * This method differs from `_.bind` by allowing bound functions to reference
                         * methods that may be redefined or don't yet exist. See
                         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                         * for more details.
                         *
                         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.10.0
                         * @category Function
                         * @param {Object} object The object to invoke the method on.
                         * @param {string} key The key of the method.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new bound function.
                         * @example
                         *
                         * var object = {
                         *   'user': 'fred',
                         *   'greet': function(greeting, punctuation) {
                         *     return greeting + ' ' + this.user + punctuation;
                         *   }
                         * };
                         *
                         * var bound = _.bindKey(object, 'greet', 'hi');
                         * bound('!');
                         * // => 'hi fred!'
                         *
                         * object.greet = function(greeting, punctuation) {
                         *   return greeting + 'ya ' + this.user + punctuation;
                         * };
                         *
                         * bound('!');
                         * // => 'hiya fred!'
                         *
                         * // Bound with placeholders.
                         * var bound = _.bindKey(object, 'greet', _, '!');
                         * bound('hi');
                         * // => 'hiya fred!'
                         */
                        var bindKey = baseRest(function (object, key, partials) {
                            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                            if (partials.length) {
                                var holders = replaceHolders(partials, getHolder(bindKey));
                                bitmask |= WRAP_PARTIAL_FLAG;
                            }
                            return createWrap(key, bitmask, object, partials, holders);
                        });
                        /**
                         * Creates a function that accepts arguments of `func` and either invokes
                         * `func` returning its result, if at least `arity` number of arguments have
                         * been provided, or returns a function that accepts the remaining `func`
                         * arguments, and so on. The arity of `func` may be specified if `func.length`
                         * is not sufficient.
                         *
                         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                         * may be used as a placeholder for provided arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of curried functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Function
                         * @param {Function} func The function to curry.
                         * @param {number} [arity=func.length] The arity of `func`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new curried function.
                         * @example
                         *
                         * var abc = function(a, b, c) {
                         *   return [a, b, c];
                         * };
                         *
                         * var curried = _.curry(abc);
                         *
                         * curried(1)(2)(3);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2)(3);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2, 3);
                         * // => [1, 2, 3]
                         *
                         * // Curried with placeholders.
                         * curried(1)(_, 3)(2);
                         * // => [1, 2, 3]
                         */
                        function curry(func, arity, guard) {
                            arity = guard ? undefined : arity;
                            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                            result.placeholder = curry.placeholder;
                            return result;
                        }
                        /**
                         * This method is like `_.curry` except that arguments are applied to `func`
                         * in the manner of `_.partialRight` instead of `_.partial`.
                         *
                         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for provided arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of curried functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to curry.
                         * @param {number} [arity=func.length] The arity of `func`.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the new curried function.
                         * @example
                         *
                         * var abc = function(a, b, c) {
                         *   return [a, b, c];
                         * };
                         *
                         * var curried = _.curryRight(abc);
                         *
                         * curried(3)(2)(1);
                         * // => [1, 2, 3]
                         *
                         * curried(2, 3)(1);
                         * // => [1, 2, 3]
                         *
                         * curried(1, 2, 3);
                         * // => [1, 2, 3]
                         *
                         * // Curried with placeholders.
                         * curried(3)(1, _)(2);
                         * // => [1, 2, 3]
                         */
                        function curryRight(func, arity, guard) {
                            arity = guard ? undefined : arity;
                            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                            result.placeholder = curryRight.placeholder;
                            return result;
                        }
                        /**
                         * Creates a debounced function that delays invoking `func` until after `wait`
                         * milliseconds have elapsed since the last time the debounced function was
                         * invoked. The debounced function comes with a `cancel` method to cancel
                         * delayed `func` invocations and a `flush` method to immediately invoke them.
                         * Provide `options` to indicate whether `func` should be invoked on the
                         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                         * with the last arguments provided to the debounced function. Subsequent
                         * calls to the debounced function return the result of the last `func`
                         * invocation.
                         *
                         * **Note:** If `leading` and `trailing` options are `true`, `func` is
                         * invoked on the trailing edge of the timeout only if the debounced function
                         * is invoked more than once during the `wait` timeout.
                         *
                         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                         *
                         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                         * for details over the differences between `_.debounce` and `_.throttle`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to debounce.
                         * @param {number} [wait=0] The number of milliseconds to delay.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.leading=false]
                         *  Specify invoking on the leading edge of the timeout.
                         * @param {number} [options.maxWait]
                         *  The maximum time `func` is allowed to be delayed before it's invoked.
                         * @param {boolean} [options.trailing=true]
                         *  Specify invoking on the trailing edge of the timeout.
                         * @returns {Function} Returns the new debounced function.
                         * @example
                         *
                         * // Avoid costly calculations while the window size is in flux.
                         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                         *
                         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                         * jQuery(element).on('click', _.debounce(sendMail, 300, {
                         *   'leading': true,
                         *   'trailing': false
                         * }));
                         *
                         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                         * var source = new EventSource('/stream');
                         * jQuery(source).on('message', debounced);
                         *
                         * // Cancel the trailing debounced invocation.
                         * jQuery(window).on('popstate', debounced.cancel);
                         */
                        function debounce(func, wait, options) {
                            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            wait = toNumber(wait) || 0;
                            if (isObject(options)) {
                                leading = !!options.leading;
                                maxing = 'maxWait' in options;
                                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                                trailing = 'trailing' in options ? !!options.trailing : trailing;
                            }
                            function invokeFunc(time) {
                                var args = lastArgs, thisArg = lastThis;
                                lastArgs = lastThis = undefined;
                                lastInvokeTime = time;
                                result = func.apply(thisArg, args);
                                return result;
                            }
                            function leadingEdge(time) {
                                // Reset any `maxWait` timer.
                                lastInvokeTime = time;
                                // Start the timer for the trailing edge.
                                timerId = setTimeout(timerExpired, wait);
                                // Invoke the leading edge.
                                return leading ? invokeFunc(time) : result;
                            }
                            function remainingWait(time) {
                                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                                return maxing
                                    ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                                    : timeWaiting;
                            }
                            function shouldInvoke(time) {
                                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                                // Either this is the first call, activity has stopped and we're at the
                                // trailing edge, the system time has gone backwards and we're treating
                                // it as the trailing edge, or we've hit the `maxWait` limit.
                                return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                                    (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                            }
                            function timerExpired() {
                                var time = now();
                                if (shouldInvoke(time)) {
                                    return trailingEdge(time);
                                }
                                // Restart the timer.
                                timerId = setTimeout(timerExpired, remainingWait(time));
                            }
                            function trailingEdge(time) {
                                timerId = undefined;
                                // Only invoke if we have `lastArgs` which means `func` has been
                                // debounced at least once.
                                if (trailing && lastArgs) {
                                    return invokeFunc(time);
                                }
                                lastArgs = lastThis = undefined;
                                return result;
                            }
                            function cancel() {
                                if (timerId !== undefined) {
                                    clearTimeout(timerId);
                                }
                                lastInvokeTime = 0;
                                lastArgs = lastCallTime = lastThis = timerId = undefined;
                            }
                            function flush() {
                                return timerId === undefined ? result : trailingEdge(now());
                            }
                            function debounced() {
                                var time = now(), isInvoking = shouldInvoke(time);
                                lastArgs = arguments;
                                lastThis = this;
                                lastCallTime = time;
                                if (isInvoking) {
                                    if (timerId === undefined) {
                                        return leadingEdge(lastCallTime);
                                    }
                                    if (maxing) {
                                        // Handle invocations in a tight loop.
                                        clearTimeout(timerId);
                                        timerId = setTimeout(timerExpired, wait);
                                        return invokeFunc(lastCallTime);
                                    }
                                }
                                if (timerId === undefined) {
                                    timerId = setTimeout(timerExpired, wait);
                                }
                                return result;
                            }
                            debounced.cancel = cancel;
                            debounced.flush = flush;
                            return debounced;
                        }
                        /**
                         * Defers invoking the `func` until the current call stack has cleared. Any
                         * additional arguments are provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to defer.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {number} Returns the timer id.
                         * @example
                         *
                         * _.defer(function(text) {
                         *   console.log(text);
                         * }, 'deferred');
                         * // => Logs 'deferred' after one millisecond.
                         */
                        var defer = baseRest(function (func, args) {
                            return baseDelay(func, 1, args);
                        });
                        /**
                         * Invokes `func` after `wait` milliseconds. Any additional arguments are
                         * provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to delay.
                         * @param {number} wait The number of milliseconds to delay invocation.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {number} Returns the timer id.
                         * @example
                         *
                         * _.delay(function(text) {
                         *   console.log(text);
                         * }, 1000, 'later');
                         * // => Logs 'later' after one second.
                         */
                        var delay = baseRest(function (func, wait, args) {
                            return baseDelay(func, toNumber(wait) || 0, args);
                        });
                        /**
                         * Creates a function that invokes `func` with arguments reversed.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to flip arguments for.
                         * @returns {Function} Returns the new flipped function.
                         * @example
                         *
                         * var flipped = _.flip(function() {
                         *   return _.toArray(arguments);
                         * });
                         *
                         * flipped('a', 'b', 'c', 'd');
                         * // => ['d', 'c', 'b', 'a']
                         */
                        function flip(func) {
                            return createWrap(func, WRAP_FLIP_FLAG);
                        }
                        /**
                         * Creates a function that memoizes the result of `func`. If `resolver` is
                         * provided, it determines the cache key for storing the result based on the
                         * arguments provided to the memoized function. By default, the first argument
                         * provided to the memoized function is used as the map cache key. The `func`
                         * is invoked with the `this` binding of the memoized function.
                         *
                         * **Note:** The cache is exposed as the `cache` property on the memoized
                         * function. Its creation may be customized by replacing the `_.memoize.Cache`
                         * constructor with one whose instances implement the
                         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to have its output memoized.
                         * @param {Function} [resolver] The function to resolve the cache key.
                         * @returns {Function} Returns the new memoized function.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         * var other = { 'c': 3, 'd': 4 };
                         *
                         * var values = _.memoize(_.values);
                         * values(object);
                         * // => [1, 2]
                         *
                         * values(other);
                         * // => [3, 4]
                         *
                         * object.a = 2;
                         * values(object);
                         * // => [1, 2]
                         *
                         * // Modify the result cache.
                         * values.cache.set(object, ['a', 'b']);
                         * values(object);
                         * // => ['a', 'b']
                         *
                         * // Replace `_.memoize.Cache`.
                         * _.memoize.Cache = WeakMap;
                         */
                        function memoize(func, resolver) {
                            if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            var memoized = function () {
                                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                                if (cache.has(key)) {
                                    return cache.get(key);
                                }
                                var result = func.apply(this, args);
                                memoized.cache = cache.set(key, result) || cache;
                                return result;
                            };
                            memoized.cache = new (memoize.Cache || MapCache);
                            return memoized;
                        }
                        // Expose `MapCache`.
                        memoize.Cache = MapCache;
                        /**
                         * Creates a function that negates the result of the predicate `func`. The
                         * `func` predicate is invoked with the `this` binding and arguments of the
                         * created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} predicate The predicate to negate.
                         * @returns {Function} Returns the new negated function.
                         * @example
                         *
                         * function isEven(n) {
                         *   return n % 2 == 0;
                         * }
                         *
                         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                         * // => [1, 3, 5]
                         */
                        function negate(predicate) {
                            if (typeof predicate != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return function () {
                                var args = arguments;
                                switch (args.length) {
                                    case 0: return !predicate.call(this);
                                    case 1: return !predicate.call(this, args[0]);
                                    case 2: return !predicate.call(this, args[0], args[1]);
                                    case 3: return !predicate.call(this, args[0], args[1], args[2]);
                                }
                                return !predicate.apply(this, args);
                            };
                        }
                        /**
                         * Creates a function that is restricted to invoking `func` once. Repeat calls
                         * to the function return the value of the first invocation. The `func` is
                         * invoked with the `this` binding and arguments of the created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to restrict.
                         * @returns {Function} Returns the new restricted function.
                         * @example
                         *
                         * var initialize = _.once(createApplication);
                         * initialize();
                         * initialize();
                         * // => `createApplication` is invoked once
                         */
                        function once(func) {
                            return before(2, func);
                        }
                        /**
                         * Creates a function that invokes `func` with its arguments transformed.
                         *
                         * @static
                         * @since 4.0.0
                         * @memberOf _
                         * @category Function
                         * @param {Function} func The function to wrap.
                         * @param {...(Function|Function[])} [transforms=[_.identity]]
                         *  The argument transforms.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * function doubled(n) {
                         *   return n * 2;
                         * }
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * var func = _.overArgs(function(x, y) {
                         *   return [x, y];
                         * }, [square, doubled]);
                         *
                         * func(9, 3);
                         * // => [81, 6]
                         *
                         * func(10, 5);
                         * // => [100, 10]
                         */
                        var overArgs = castRest(function (func, transforms) {
                            transforms = (transforms.length == 1 && isArray(transforms[0]))
                                ? arrayMap(transforms[0], baseUnary(getIteratee()))
                                : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
                            var funcsLength = transforms.length;
                            return baseRest(function (args) {
                                var index = -1, length = nativeMin(args.length, funcsLength);
                                while (++index < length) {
                                    args[index] = transforms[index].call(this, args[index]);
                                }
                                return apply(func, this, args);
                            });
                        });
                        /**
                         * Creates a function that invokes `func` with `partials` prepended to the
                         * arguments it receives. This method is like `_.bind` except it does **not**
                         * alter the `this` binding.
                         *
                         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of partially
                         * applied functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.2.0
                         * @category Function
                         * @param {Function} func The function to partially apply arguments to.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new partially applied function.
                         * @example
                         *
                         * function greet(greeting, name) {
                         *   return greeting + ' ' + name;
                         * }
                         *
                         * var sayHelloTo = _.partial(greet, 'hello');
                         * sayHelloTo('fred');
                         * // => 'hello fred'
                         *
                         * // Partially applied with placeholders.
                         * var greetFred = _.partial(greet, _, 'fred');
                         * greetFred('hi');
                         * // => 'hi fred'
                         */
                        var partial = baseRest(function (func, partials) {
                            var holders = replaceHolders(partials, getHolder(partial));
                            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                        });
                        /**
                         * This method is like `_.partial` except that partially applied arguments
                         * are appended to the arguments it receives.
                         *
                         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                         * builds, may be used as a placeholder for partially applied arguments.
                         *
                         * **Note:** This method doesn't set the "length" property of partially
                         * applied functions.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Function
                         * @param {Function} func The function to partially apply arguments to.
                         * @param {...*} [partials] The arguments to be partially applied.
                         * @returns {Function} Returns the new partially applied function.
                         * @example
                         *
                         * function greet(greeting, name) {
                         *   return greeting + ' ' + name;
                         * }
                         *
                         * var greetFred = _.partialRight(greet, 'fred');
                         * greetFred('hi');
                         * // => 'hi fred'
                         *
                         * // Partially applied with placeholders.
                         * var sayHelloTo = _.partialRight(greet, 'hello', _);
                         * sayHelloTo('fred');
                         * // => 'hello fred'
                         */
                        var partialRight = baseRest(function (func, partials) {
                            var holders = replaceHolders(partials, getHolder(partialRight));
                            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                        });
                        /**
                         * Creates a function that invokes `func` with arguments arranged according
                         * to the specified `indexes` where the argument value at the first index is
                         * provided as the first argument, the argument value at the second index is
                         * provided as the second argument, and so on.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Function
                         * @param {Function} func The function to rearrange arguments for.
                         * @param {...(number|number[])} indexes The arranged argument indexes.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var rearged = _.rearg(function(a, b, c) {
                         *   return [a, b, c];
                         * }, [2, 0, 1]);
                         *
                         * rearged('b', 'c', 'a')
                         * // => ['a', 'b', 'c']
                         */
                        var rearg = flatRest(function (func, indexes) {
                            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                        });
                        /**
                         * Creates a function that invokes `func` with the `this` binding of the
                         * created function and arguments from `start` and beyond provided as
                         * an array.
                         *
                         * **Note:** This method is based on the
                         * [rest parameter](https://mdn.io/rest_parameters).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to apply a rest parameter to.
                         * @param {number} [start=func.length-1] The start position of the rest parameter.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var say = _.rest(function(what, names) {
                         *   return what + ' ' + _.initial(names).join(', ') +
                         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                         * });
                         *
                         * say('hello', 'fred', 'barney', 'pebbles');
                         * // => 'hello fred, barney, & pebbles'
                         */
                        function rest(func, start) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            start = start === undefined ? start : toInteger(start);
                            return baseRest(func, start);
                        }
                        /**
                         * Creates a function that invokes `func` with the `this` binding of the
                         * create function and an array of arguments much like
                         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                         *
                         * **Note:** This method is based on the
                         * [spread operator](https://mdn.io/spread_operator).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Function
                         * @param {Function} func The function to spread arguments over.
                         * @param {number} [start=0] The start position of the spread.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var say = _.spread(function(who, what) {
                         *   return who + ' says ' + what;
                         * });
                         *
                         * say(['fred', 'hello']);
                         * // => 'fred says hello'
                         *
                         * var numbers = Promise.all([
                         *   Promise.resolve(40),
                         *   Promise.resolve(36)
                         * ]);
                         *
                         * numbers.then(_.spread(function(x, y) {
                         *   return x + y;
                         * }));
                         * // => a Promise of 76
                         */
                        function spread(func, start) {
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            start = start == null ? 0 : nativeMax(toInteger(start), 0);
                            return baseRest(function (args) {
                                var array = args[start], otherArgs = castSlice(args, 0, start);
                                if (array) {
                                    arrayPush(otherArgs, array);
                                }
                                return apply(func, this, otherArgs);
                            });
                        }
                        /**
                         * Creates a throttled function that only invokes `func` at most once per
                         * every `wait` milliseconds. The throttled function comes with a `cancel`
                         * method to cancel delayed `func` invocations and a `flush` method to
                         * immediately invoke them. Provide `options` to indicate whether `func`
                         * should be invoked on the leading and/or trailing edge of the `wait`
                         * timeout. The `func` is invoked with the last arguments provided to the
                         * throttled function. Subsequent calls to the throttled function return the
                         * result of the last `func` invocation.
                         *
                         * **Note:** If `leading` and `trailing` options are `true`, `func` is
                         * invoked on the trailing edge of the timeout only if the throttled function
                         * is invoked more than once during the `wait` timeout.
                         *
                         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                         *
                         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                         * for details over the differences between `_.throttle` and `_.debounce`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {Function} func The function to throttle.
                         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.leading=true]
                         *  Specify invoking on the leading edge of the timeout.
                         * @param {boolean} [options.trailing=true]
                         *  Specify invoking on the trailing edge of the timeout.
                         * @returns {Function} Returns the new throttled function.
                         * @example
                         *
                         * // Avoid excessively updating the position while scrolling.
                         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                         *
                         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                         * jQuery(element).on('click', throttled);
                         *
                         * // Cancel the trailing throttled invocation.
                         * jQuery(window).on('popstate', throttled.cancel);
                         */
                        function throttle(func, wait, options) {
                            var leading = true, trailing = true;
                            if (typeof func != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            if (isObject(options)) {
                                leading = 'leading' in options ? !!options.leading : leading;
                                trailing = 'trailing' in options ? !!options.trailing : trailing;
                            }
                            return debounce(func, wait, {
                                'leading': leading,
                                'maxWait': wait,
                                'trailing': trailing
                            });
                        }
                        /**
                         * Creates a function that accepts up to one argument, ignoring any
                         * additional arguments.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Function
                         * @param {Function} func The function to cap arguments for.
                         * @returns {Function} Returns the new capped function.
                         * @example
                         *
                         * _.map(['6', '8', '10'], _.unary(parseInt));
                         * // => [6, 8, 10]
                         */
                        function unary(func) {
                            return ary(func, 1);
                        }
                        /**
                         * Creates a function that provides `value` to `wrapper` as its first
                         * argument. Any additional arguments provided to the function are appended
                         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                         * binding of the created function.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Function
                         * @param {*} value The value to wrap.
                         * @param {Function} [wrapper=identity] The wrapper function.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var p = _.wrap(_.escape, function(func, text) {
                         *   return '<p>' + func(text) + '</p>';
                         * });
                         *
                         * p('fred, barney, & pebbles');
                         * // => '<p>fred, barney, &amp; pebbles</p>'
                         */
                        function wrap(value, wrapper) {
                            return partial(castFunction(wrapper), value);
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Casts `value` as an array if it's not one.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.4.0
                         * @category Lang
                         * @param {*} value The value to inspect.
                         * @returns {Array} Returns the cast array.
                         * @example
                         *
                         * _.castArray(1);
                         * // => [1]
                         *
                         * _.castArray({ 'a': 1 });
                         * // => [{ 'a': 1 }]
                         *
                         * _.castArray('abc');
                         * // => ['abc']
                         *
                         * _.castArray(null);
                         * // => [null]
                         *
                         * _.castArray(undefined);
                         * // => [undefined]
                         *
                         * _.castArray();
                         * // => []
                         *
                         * var array = [1, 2, 3];
                         * console.log(_.castArray(array) === array);
                         * // => true
                         */
                        function castArray() {
                            if (!arguments.length) {
                                return [];
                            }
                            var value = arguments[0];
                            return isArray(value) ? value : [value];
                        }
                        /**
                         * Creates a shallow clone of `value`.
                         *
                         * **Note:** This method is loosely based on the
                         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                         * and supports cloning arrays, array buffers, booleans, date objects, maps,
                         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                         * arrays. The own enumerable properties of `arguments` objects are cloned
                         * as plain objects. An empty object is returned for uncloneable values such
                         * as error objects, functions, DOM nodes, and WeakMaps.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to clone.
                         * @returns {*} Returns the cloned value.
                         * @see _.cloneDeep
                         * @example
                         *
                         * var objects = [{ 'a': 1 }, { 'b': 2 }];
                         *
                         * var shallow = _.clone(objects);
                         * console.log(shallow[0] === objects[0]);
                         * // => true
                         */
                        function clone(value) {
                            return baseClone(value, CLONE_SYMBOLS_FLAG);
                        }
                        /**
                         * This method is like `_.clone` except that it accepts `customizer` which
                         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                         * cloning is handled by the method instead. The `customizer` is invoked with
                         * up to four arguments; (value [, index|key, object, stack]).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to clone.
                         * @param {Function} [customizer] The function to customize cloning.
                         * @returns {*} Returns the cloned value.
                         * @see _.cloneDeepWith
                         * @example
                         *
                         * function customizer(value) {
                         *   if (_.isElement(value)) {
                         *     return value.cloneNode(false);
                         *   }
                         * }
                         *
                         * var el = _.cloneWith(document.body, customizer);
                         *
                         * console.log(el === document.body);
                         * // => false
                         * console.log(el.nodeName);
                         * // => 'BODY'
                         * console.log(el.childNodes.length);
                         * // => 0
                         */
                        function cloneWith(value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                        }
                        /**
                         * This method is like `_.clone` except that it recursively clones `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Lang
                         * @param {*} value The value to recursively clone.
                         * @returns {*} Returns the deep cloned value.
                         * @see _.clone
                         * @example
                         *
                         * var objects = [{ 'a': 1 }, { 'b': 2 }];
                         *
                         * var deep = _.cloneDeep(objects);
                         * console.log(deep[0] === objects[0]);
                         * // => false
                         */
                        function cloneDeep(value) {
                            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                        }
                        /**
                         * This method is like `_.cloneWith` except that it recursively clones `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to recursively clone.
                         * @param {Function} [customizer] The function to customize cloning.
                         * @returns {*} Returns the deep cloned value.
                         * @see _.cloneWith
                         * @example
                         *
                         * function customizer(value) {
                         *   if (_.isElement(value)) {
                         *     return value.cloneNode(true);
                         *   }
                         * }
                         *
                         * var el = _.cloneDeepWith(document.body, customizer);
                         *
                         * console.log(el === document.body);
                         * // => false
                         * console.log(el.nodeName);
                         * // => 'BODY'
                         * console.log(el.childNodes.length);
                         * // => 20
                         */
                        function cloneDeepWith(value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                        }
                        /**
                         * Checks if `object` conforms to `source` by invoking the predicate
                         * properties of `source` with the corresponding property values of `object`.
                         *
                         * **Note:** This method is equivalent to `_.conforms` when `source` is
                         * partially applied.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.14.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         *
                         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                         * // => true
                         *
                         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                         * // => false
                         */
                        function conformsTo(object, source) {
                            return source == null || baseConformsTo(object, source, keys(source));
                        }
                        /**
                         * Performs a
                         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                         * comparison between two values to determine if they are equivalent.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         * var other = { 'a': 1 };
                         *
                         * _.eq(object, object);
                         * // => true
                         *
                         * _.eq(object, other);
                         * // => false
                         *
                         * _.eq('a', 'a');
                         * // => true
                         *
                         * _.eq('a', Object('a'));
                         * // => false
                         *
                         * _.eq(NaN, NaN);
                         * // => true
                         */
                        function eq(value, other) {
                            return value === other || (value !== value && other !== other);
                        }
                        /**
                         * Checks if `value` is greater than `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than `other`,
                         *  else `false`.
                         * @see _.lt
                         * @example
                         *
                         * _.gt(3, 1);
                         * // => true
                         *
                         * _.gt(3, 3);
                         * // => false
                         *
                         * _.gt(1, 3);
                         * // => false
                         */
                        var gt = createRelationalOperation(baseGt);
                        /**
                         * Checks if `value` is greater than or equal to `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is greater than or equal to
                         *  `other`, else `false`.
                         * @see _.lte
                         * @example
                         *
                         * _.gte(3, 1);
                         * // => true
                         *
                         * _.gte(3, 3);
                         * // => true
                         *
                         * _.gte(1, 3);
                         * // => false
                         */
                        var gte = createRelationalOperation(function (value, other) {
                            return value >= other;
                        });
                        /**
                         * Checks if `value` is likely an `arguments` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                         *  else `false`.
                         * @example
                         *
                         * _.isArguments(function() { return arguments; }());
                         * // => true
                         *
                         * _.isArguments([1, 2, 3]);
                         * // => false
                         */
                        var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
                            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                                !propertyIsEnumerable.call(value, 'callee');
                        };
                        /**
                         * Checks if `value` is classified as an `Array` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                         * @example
                         *
                         * _.isArray([1, 2, 3]);
                         * // => true
                         *
                         * _.isArray(document.body.children);
                         * // => false
                         *
                         * _.isArray('abc');
                         * // => false
                         *
                         * _.isArray(_.noop);
                         * // => false
                         */
                        var isArray = Array.isArray;
                        /**
                         * Checks if `value` is classified as an `ArrayBuffer` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                         * @example
                         *
                         * _.isArrayBuffer(new ArrayBuffer(2));
                         * // => true
                         *
                         * _.isArrayBuffer(new Array(2));
                         * // => false
                         */
                        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
                        /**
                         * Checks if `value` is array-like. A value is considered array-like if it's
                         * not a function and has a `value.length` that's an integer greater than or
                         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                         * @example
                         *
                         * _.isArrayLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isArrayLike(document.body.children);
                         * // => true
                         *
                         * _.isArrayLike('abc');
                         * // => true
                         *
                         * _.isArrayLike(_.noop);
                         * // => false
                         */
                        function isArrayLike(value) {
                            return value != null && isLength(value.length) && !isFunction(value);
                        }
                        /**
                         * This method is like `_.isArrayLike` except that it also checks if `value`
                         * is an object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an array-like object,
                         *  else `false`.
                         * @example
                         *
                         * _.isArrayLikeObject([1, 2, 3]);
                         * // => true
                         *
                         * _.isArrayLikeObject(document.body.children);
                         * // => true
                         *
                         * _.isArrayLikeObject('abc');
                         * // => false
                         *
                         * _.isArrayLikeObject(_.noop);
                         * // => false
                         */
                        function isArrayLikeObject(value) {
                            return isObjectLike(value) && isArrayLike(value);
                        }
                        /**
                         * Checks if `value` is classified as a boolean primitive or object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                         * @example
                         *
                         * _.isBoolean(false);
                         * // => true
                         *
                         * _.isBoolean(null);
                         * // => false
                         */
                        function isBoolean(value) {
                            return value === true || value === false ||
                                (isObjectLike(value) && baseGetTag(value) == boolTag);
                        }
                        /**
                         * Checks if `value` is a buffer.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                         * @example
                         *
                         * _.isBuffer(new Buffer(2));
                         * // => true
                         *
                         * _.isBuffer(new Uint8Array(2));
                         * // => false
                         */
                        var isBuffer = nativeIsBuffer || stubFalse;
                        /**
                         * Checks if `value` is classified as a `Date` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                         * @example
                         *
                         * _.isDate(new Date);
                         * // => true
                         *
                         * _.isDate('Mon April 23 2012');
                         * // => false
                         */
                        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
                        /**
                         * Checks if `value` is likely a DOM element.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                         * @example
                         *
                         * _.isElement(document.body);
                         * // => true
                         *
                         * _.isElement('<body>');
                         * // => false
                         */
                        function isElement(value) {
                            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                        }
                        /**
                         * Checks if `value` is an empty object, collection, map, or set.
                         *
                         * Objects are considered empty if they have no own enumerable string keyed
                         * properties.
                         *
                         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                         * jQuery-like collections are considered empty if they have a `length` of `0`.
                         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                         * @example
                         *
                         * _.isEmpty(null);
                         * // => true
                         *
                         * _.isEmpty(true);
                         * // => true
                         *
                         * _.isEmpty(1);
                         * // => true
                         *
                         * _.isEmpty([1, 2, 3]);
                         * // => false
                         *
                         * _.isEmpty({ 'a': 1 });
                         * // => false
                         */
                        function isEmpty(value) {
                            if (value == null) {
                                return true;
                            }
                            if (isArrayLike(value) &&
                                (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                                    isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                                return !value.length;
                            }
                            var tag = getTag(value);
                            if (tag == mapTag || tag == setTag) {
                                return !value.size;
                            }
                            if (isPrototype(value)) {
                                return !baseKeys(value).length;
                            }
                            for (var key in value) {
                                if (hasOwnProperty.call(value, key)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        /**
                         * Performs a deep comparison between two values to determine if they are
                         * equivalent.
                         *
                         * **Note:** This method supports comparing arrays, array buffers, booleans,
                         * date objects, error objects, maps, numbers, `Object` objects, regexes,
                         * sets, strings, symbols, and typed arrays. `Object` objects are compared
                         * by their own, not inherited, enumerable properties. Functions and DOM
                         * nodes are compared by strict equality, i.e. `===`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         * var other = { 'a': 1 };
                         *
                         * _.isEqual(object, other);
                         * // => true
                         *
                         * object === other;
                         * // => false
                         */
                        function isEqual(value, other) {
                            return baseIsEqual(value, other);
                        }
                        /**
                         * This method is like `_.isEqual` except that it accepts `customizer` which
                         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                         * are handled by the method instead. The `customizer` is invoked with up to
                         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                         * @example
                         *
                         * function isGreeting(value) {
                         *   return /^h(?:i|ello)$/.test(value);
                         * }
                         *
                         * function customizer(objValue, othValue) {
                         *   if (isGreeting(objValue) && isGreeting(othValue)) {
                         *     return true;
                         *   }
                         * }
                         *
                         * var array = ['hello', 'goodbye'];
                         * var other = ['hi', 'goodbye'];
                         *
                         * _.isEqualWith(array, other, customizer);
                         * // => true
                         */
                        function isEqualWith(value, other, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            var result = customizer ? customizer(value, other) : undefined;
                            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                        }
                        /**
                         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                         * `SyntaxError`, `TypeError`, or `URIError` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                         * @example
                         *
                         * _.isError(new Error);
                         * // => true
                         *
                         * _.isError(Error);
                         * // => false
                         */
                        function isError(value) {
                            if (!isObjectLike(value)) {
                                return false;
                            }
                            var tag = baseGetTag(value);
                            return tag == errorTag || tag == domExcTag ||
                                (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                        }
                        /**
                         * Checks if `value` is a finite primitive number.
                         *
                         * **Note:** This method is based on
                         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                         * @example
                         *
                         * _.isFinite(3);
                         * // => true
                         *
                         * _.isFinite(Number.MIN_VALUE);
                         * // => true
                         *
                         * _.isFinite(Infinity);
                         * // => false
                         *
                         * _.isFinite('3');
                         * // => false
                         */
                        function isFinite(value) {
                            return typeof value == 'number' && nativeIsFinite(value);
                        }
                        /**
                         * Checks if `value` is classified as a `Function` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                         * @example
                         *
                         * _.isFunction(_);
                         * // => true
                         *
                         * _.isFunction(/abc/);
                         * // => false
                         */
                        function isFunction(value) {
                            if (!isObject(value)) {
                                return false;
                            }
                            // The use of `Object#toString` avoids issues with the `typeof` operator
                            // in Safari 9 which returns 'object' for typed arrays and other constructors.
                            var tag = baseGetTag(value);
                            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                        }
                        /**
                         * Checks if `value` is an integer.
                         *
                         * **Note:** This method is based on
                         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                         * @example
                         *
                         * _.isInteger(3);
                         * // => true
                         *
                         * _.isInteger(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isInteger(Infinity);
                         * // => false
                         *
                         * _.isInteger('3');
                         * // => false
                         */
                        function isInteger(value) {
                            return typeof value == 'number' && value == toInteger(value);
                        }
                        /**
                         * Checks if `value` is a valid array-like length.
                         *
                         * **Note:** This method is loosely based on
                         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                         * @example
                         *
                         * _.isLength(3);
                         * // => true
                         *
                         * _.isLength(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isLength(Infinity);
                         * // => false
                         *
                         * _.isLength('3');
                         * // => false
                         */
                        function isLength(value) {
                            return typeof value == 'number' &&
                                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                        }
                        /**
                         * Checks if `value` is the
                         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                         * @example
                         *
                         * _.isObject({});
                         * // => true
                         *
                         * _.isObject([1, 2, 3]);
                         * // => true
                         *
                         * _.isObject(_.noop);
                         * // => true
                         *
                         * _.isObject(null);
                         * // => false
                         */
                        function isObject(value) {
                            var type = typeof value;
                            return value != null && (type == 'object' || type == 'function');
                        }
                        /**
                         * Checks if `value` is object-like. A value is object-like if it's not `null`
                         * and has a `typeof` result of "object".
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                         * @example
                         *
                         * _.isObjectLike({});
                         * // => true
                         *
                         * _.isObjectLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isObjectLike(_.noop);
                         * // => false
                         *
                         * _.isObjectLike(null);
                         * // => false
                         */
                        function isObjectLike(value) {
                            return value != null && typeof value == 'object';
                        }
                        /**
                         * Checks if `value` is classified as a `Map` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                         * @example
                         *
                         * _.isMap(new Map);
                         * // => true
                         *
                         * _.isMap(new WeakMap);
                         * // => false
                         */
                        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
                        /**
                         * Performs a partial deep comparison between `object` and `source` to
                         * determine if `object` contains equivalent property values.
                         *
                         * **Note:** This method is equivalent to `_.matches` when `source` is
                         * partially applied.
                         *
                         * Partial comparisons will match empty array and empty object `source`
                         * values against any array or object value, respectively. See `_.isEqual`
                         * for a list of supported value comparisons.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2 };
                         *
                         * _.isMatch(object, { 'b': 2 });
                         * // => true
                         *
                         * _.isMatch(object, { 'b': 1 });
                         * // => false
                         */
                        function isMatch(object, source) {
                            return object === source || baseIsMatch(object, source, getMatchData(source));
                        }
                        /**
                         * This method is like `_.isMatch` except that it accepts `customizer` which
                         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                         * are handled by the method instead. The `customizer` is invoked with five
                         * arguments: (objValue, srcValue, index|key, object, source).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {Object} object The object to inspect.
                         * @param {Object} source The object of property values to match.
                         * @param {Function} [customizer] The function to customize comparisons.
                         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                         * @example
                         *
                         * function isGreeting(value) {
                         *   return /^h(?:i|ello)$/.test(value);
                         * }
                         *
                         * function customizer(objValue, srcValue) {
                         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                         *     return true;
                         *   }
                         * }
                         *
                         * var object = { 'greeting': 'hello' };
                         * var source = { 'greeting': 'hi' };
                         *
                         * _.isMatchWith(object, source, customizer);
                         * // => true
                         */
                        function isMatchWith(object, source, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return baseIsMatch(object, source, getMatchData(source), customizer);
                        }
                        /**
                         * Checks if `value` is `NaN`.
                         *
                         * **Note:** This method is based on
                         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                         * `undefined` and other non-number values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                         * @example
                         *
                         * _.isNaN(NaN);
                         * // => true
                         *
                         * _.isNaN(new Number(NaN));
                         * // => true
                         *
                         * isNaN(undefined);
                         * // => true
                         *
                         * _.isNaN(undefined);
                         * // => false
                         */
                        function isNaN(value) {
                            // An `NaN` primitive is the only value that is not equal to itself.
                            // Perform the `toStringTag` check first to avoid errors with some
                            // ActiveX objects in IE.
                            return isNumber(value) && value != +value;
                        }
                        /**
                         * Checks if `value` is a pristine native function.
                         *
                         * **Note:** This method can't reliably detect native functions in the presence
                         * of the core-js package because core-js circumvents this kind of detection.
                         * Despite multiple requests, the core-js maintainer has made it clear: any
                         * attempt to fix the detection will be obstructed. As a result, we're left
                         * with little choice but to throw an error. Unfortunately, this also affects
                         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                         * which rely on core-js.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a native function,
                         *  else `false`.
                         * @example
                         *
                         * _.isNative(Array.prototype.push);
                         * // => true
                         *
                         * _.isNative(_);
                         * // => false
                         */
                        function isNative(value) {
                            if (isMaskable(value)) {
                                throw new Error(CORE_ERROR_TEXT);
                            }
                            return baseIsNative(value);
                        }
                        /**
                         * Checks if `value` is `null`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                         * @example
                         *
                         * _.isNull(null);
                         * // => true
                         *
                         * _.isNull(void 0);
                         * // => false
                         */
                        function isNull(value) {
                            return value === null;
                        }
                        /**
                         * Checks if `value` is `null` or `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                         * @example
                         *
                         * _.isNil(null);
                         * // => true
                         *
                         * _.isNil(void 0);
                         * // => true
                         *
                         * _.isNil(NaN);
                         * // => false
                         */
                        function isNil(value) {
                            return value == null;
                        }
                        /**
                         * Checks if `value` is classified as a `Number` primitive or object.
                         *
                         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                         * classified as numbers, use the `_.isFinite` method.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                         * @example
                         *
                         * _.isNumber(3);
                         * // => true
                         *
                         * _.isNumber(Number.MIN_VALUE);
                         * // => true
                         *
                         * _.isNumber(Infinity);
                         * // => true
                         *
                         * _.isNumber('3');
                         * // => false
                         */
                        function isNumber(value) {
                            return typeof value == 'number' ||
                                (isObjectLike(value) && baseGetTag(value) == numberTag);
                        }
                        /**
                         * Checks if `value` is a plain object, that is, an object created by the
                         * `Object` constructor or one with a `[[Prototype]]` of `null`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.8.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         * }
                         *
                         * _.isPlainObject(new Foo);
                         * // => false
                         *
                         * _.isPlainObject([1, 2, 3]);
                         * // => false
                         *
                         * _.isPlainObject({ 'x': 0, 'y': 0 });
                         * // => true
                         *
                         * _.isPlainObject(Object.create(null));
                         * // => true
                         */
                        function isPlainObject(value) {
                            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                                return false;
                            }
                            var proto = getPrototype(value);
                            if (proto === null) {
                                return true;
                            }
                            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                            return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                                funcToString.call(Ctor) == objectCtorString;
                        }
                        /**
                         * Checks if `value` is classified as a `RegExp` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.1.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                         * @example
                         *
                         * _.isRegExp(/abc/);
                         * // => true
                         *
                         * _.isRegExp('/abc/');
                         * // => false
                         */
                        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
                        /**
                         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                         * double precision number which isn't the result of a rounded unsafe integer.
                         *
                         * **Note:** This method is based on
                         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                         * @example
                         *
                         * _.isSafeInteger(3);
                         * // => true
                         *
                         * _.isSafeInteger(Number.MIN_VALUE);
                         * // => false
                         *
                         * _.isSafeInteger(Infinity);
                         * // => false
                         *
                         * _.isSafeInteger('3');
                         * // => false
                         */
                        function isSafeInteger(value) {
                            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                        }
                        /**
                         * Checks if `value` is classified as a `Set` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                         * @example
                         *
                         * _.isSet(new Set);
                         * // => true
                         *
                         * _.isSet(new WeakSet);
                         * // => false
                         */
                        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
                        /**
                         * Checks if `value` is classified as a `String` primitive or object.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                         * @example
                         *
                         * _.isString('abc');
                         * // => true
                         *
                         * _.isString(1);
                         * // => false
                         */
                        function isString(value) {
                            return typeof value == 'string' ||
                                (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                        }
                        /**
                         * Checks if `value` is classified as a `Symbol` primitive or object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                         * @example
                         *
                         * _.isSymbol(Symbol.iterator);
                         * // => true
                         *
                         * _.isSymbol('abc');
                         * // => false
                         */
                        function isSymbol(value) {
                            return typeof value == 'symbol' ||
                                (isObjectLike(value) && baseGetTag(value) == symbolTag);
                        }
                        /**
                         * Checks if `value` is classified as a typed array.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                         * @example
                         *
                         * _.isTypedArray(new Uint8Array);
                         * // => true
                         *
                         * _.isTypedArray([]);
                         * // => false
                         */
                        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
                        /**
                         * Checks if `value` is `undefined`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                         * @example
                         *
                         * _.isUndefined(void 0);
                         * // => true
                         *
                         * _.isUndefined(null);
                         * // => false
                         */
                        function isUndefined(value) {
                            return value === undefined;
                        }
                        /**
                         * Checks if `value` is classified as a `WeakMap` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                         * @example
                         *
                         * _.isWeakMap(new WeakMap);
                         * // => true
                         *
                         * _.isWeakMap(new Map);
                         * // => false
                         */
                        function isWeakMap(value) {
                            return isObjectLike(value) && getTag(value) == weakMapTag;
                        }
                        /**
                         * Checks if `value` is classified as a `WeakSet` object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.3.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                         * @example
                         *
                         * _.isWeakSet(new WeakSet);
                         * // => true
                         *
                         * _.isWeakSet(new Set);
                         * // => false
                         */
                        function isWeakSet(value) {
                            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                        }
                        /**
                         * Checks if `value` is less than `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than `other`,
                         *  else `false`.
                         * @see _.gt
                         * @example
                         *
                         * _.lt(1, 3);
                         * // => true
                         *
                         * _.lt(3, 3);
                         * // => false
                         *
                         * _.lt(3, 1);
                         * // => false
                         */
                        var lt = createRelationalOperation(baseLt);
                        /**
                         * Checks if `value` is less than or equal to `other`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.9.0
                         * @category Lang
                         * @param {*} value The value to compare.
                         * @param {*} other The other value to compare.
                         * @returns {boolean} Returns `true` if `value` is less than or equal to
                         *  `other`, else `false`.
                         * @see _.gte
                         * @example
                         *
                         * _.lte(1, 3);
                         * // => true
                         *
                         * _.lte(3, 3);
                         * // => true
                         *
                         * _.lte(3, 1);
                         * // => false
                         */
                        var lte = createRelationalOperation(function (value, other) {
                            return value <= other;
                        });
                        /**
                         * Converts `value` to an array.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {Array} Returns the converted array.
                         * @example
                         *
                         * _.toArray({ 'a': 1, 'b': 2 });
                         * // => [1, 2]
                         *
                         * _.toArray('abc');
                         * // => ['a', 'b', 'c']
                         *
                         * _.toArray(1);
                         * // => []
                         *
                         * _.toArray(null);
                         * // => []
                         */
                        function toArray(value) {
                            if (!value) {
                                return [];
                            }
                            if (isArrayLike(value)) {
                                return isString(value) ? stringToArray(value) : copyArray(value);
                            }
                            if (symIterator && value[symIterator]) {
                                return iteratorToArray(value[symIterator]());
                            }
                            var tag = getTag(value), func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
                            return func(value);
                        }
                        /**
                         * Converts `value` to a finite number.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.12.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted number.
                         * @example
                         *
                         * _.toFinite(3.2);
                         * // => 3.2
                         *
                         * _.toFinite(Number.MIN_VALUE);
                         * // => 5e-324
                         *
                         * _.toFinite(Infinity);
                         * // => 1.7976931348623157e+308
                         *
                         * _.toFinite('3.2');
                         * // => 3.2
                         */
                        function toFinite(value) {
                            if (!value) {
                                return value === 0 ? value : 0;
                            }
                            value = toNumber(value);
                            if (value === INFINITY || value === -INFINITY) {
                                var sign = (value < 0 ? -1 : 1);
                                return sign * MAX_INTEGER;
                            }
                            return value === value ? value : 0;
                        }
                        /**
                         * Converts `value` to an integer.
                         *
                         * **Note:** This method is loosely based on
                         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toInteger(3.2);
                         * // => 3
                         *
                         * _.toInteger(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toInteger(Infinity);
                         * // => 1.7976931348623157e+308
                         *
                         * _.toInteger('3.2');
                         * // => 3
                         */
                        function toInteger(value) {
                            var result = toFinite(value), remainder = result % 1;
                            return result === result ? (remainder ? result - remainder : result) : 0;
                        }
                        /**
                         * Converts `value` to an integer suitable for use as the length of an
                         * array-like object.
                         *
                         * **Note:** This method is based on
                         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toLength(3.2);
                         * // => 3
                         *
                         * _.toLength(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toLength(Infinity);
                         * // => 4294967295
                         *
                         * _.toLength('3.2');
                         * // => 3
                         */
                        function toLength(value) {
                            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                        }
                        /**
                         * Converts `value` to a number.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to process.
                         * @returns {number} Returns the number.
                         * @example
                         *
                         * _.toNumber(3.2);
                         * // => 3.2
                         *
                         * _.toNumber(Number.MIN_VALUE);
                         * // => 5e-324
                         *
                         * _.toNumber(Infinity);
                         * // => Infinity
                         *
                         * _.toNumber('3.2');
                         * // => 3.2
                         */
                        function toNumber(value) {
                            if (typeof value == 'number') {
                                return value;
                            }
                            if (isSymbol(value)) {
                                return NAN;
                            }
                            if (isObject(value)) {
                                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                                value = isObject(other) ? (other + '') : other;
                            }
                            if (typeof value != 'string') {
                                return value === 0 ? value : +value;
                            }
                            value = baseTrim(value);
                            var isBinary = reIsBinary.test(value);
                            return (isBinary || reIsOctal.test(value))
                                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                                : (reIsBadHex.test(value) ? NAN : +value);
                        }
                        /**
                         * Converts `value` to a plain object flattening inherited enumerable string
                         * keyed properties of `value` to own properties of the plain object.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {Object} Returns the converted plain object.
                         * @example
                         *
                         * function Foo() {
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.assign({ 'a': 1 }, new Foo);
                         * // => { 'a': 1, 'b': 2 }
                         *
                         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                         * // => { 'a': 1, 'b': 2, 'c': 3 }
                         */
                        function toPlainObject(value) {
                            return copyObject(value, keysIn(value));
                        }
                        /**
                         * Converts `value` to a safe integer. A safe integer can be compared and
                         * represented correctly.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.toSafeInteger(3.2);
                         * // => 3
                         *
                         * _.toSafeInteger(Number.MIN_VALUE);
                         * // => 0
                         *
                         * _.toSafeInteger(Infinity);
                         * // => 9007199254740991
                         *
                         * _.toSafeInteger('3.2');
                         * // => 3
                         */
                        function toSafeInteger(value) {
                            return value
                                ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                                : (value === 0 ? value : 0);
                        }
                        /**
                         * Converts `value` to a string. An empty string is returned for `null`
                         * and `undefined` values. The sign of `-0` is preserved.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.toString(null);
                         * // => ''
                         *
                         * _.toString(-0);
                         * // => '-0'
                         *
                         * _.toString([1, 2, 3]);
                         * // => '1,2,3'
                         */
                        function toString(value) {
                            return value == null ? '' : baseToString(value);
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Assigns own enumerable string keyed properties of source objects to the
                         * destination object. Source objects are applied from left to right.
                         * Subsequent sources overwrite property assignments of previous sources.
                         *
                         * **Note:** This method mutates `object` and is loosely based on
                         * [`Object.assign`](https://mdn.io/Object/assign).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.10.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.assignIn
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         * }
                         *
                         * function Bar() {
                         *   this.c = 3;
                         * }
                         *
                         * Foo.prototype.b = 2;
                         * Bar.prototype.d = 4;
                         *
                         * _.assign({ 'a': 0 }, new Foo, new Bar);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        var assign = createAssigner(function (object, source) {
                            if (isPrototype(source) || isArrayLike(source)) {
                                copyObject(source, keys(source), object);
                                return;
                            }
                            for (var key in source) {
                                if (hasOwnProperty.call(source, key)) {
                                    assignValue(object, key, source[key]);
                                }
                            }
                        });
                        /**
                         * This method is like `_.assign` except that it iterates over own and
                         * inherited source properties.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias extend
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.assign
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         * }
                         *
                         * function Bar() {
                         *   this.c = 3;
                         * }
                         *
                         * Foo.prototype.b = 2;
                         * Bar.prototype.d = 4;
                         *
                         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                         */
                        var assignIn = createAssigner(function (object, source) {
                            copyObject(source, keysIn(source), object);
                        });
                        /**
                         * This method is like `_.assignIn` except that it accepts `customizer`
                         * which is invoked to produce the assigned values. If `customizer` returns
                         * `undefined`, assignment is handled by the method instead. The `customizer`
                         * is invoked with five arguments: (objValue, srcValue, key, object, source).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias extendWith
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @see _.assignWith
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
                         *   return _.isUndefined(objValue) ? srcValue : objValue;
                         * }
                         *
                         * var defaults = _.partialRight(_.assignInWith, customizer);
                         *
                         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                            copyObject(source, keysIn(source), object, customizer);
                        });
                        /**
                         * This method is like `_.assign` except that it accepts `customizer`
                         * which is invoked to produce the assigned values. If `customizer` returns
                         * `undefined`, assignment is handled by the method instead. The `customizer`
                         * is invoked with five arguments: (objValue, srcValue, key, object, source).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @see _.assignInWith
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
                         *   return _.isUndefined(objValue) ? srcValue : objValue;
                         * }
                         *
                         * var defaults = _.partialRight(_.assignWith, customizer);
                         *
                         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                            copyObject(source, keys(source), object, customizer);
                        });
                        /**
                         * Creates an array of values corresponding to `paths` of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Array} Returns the picked values.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                         *
                         * _.at(object, ['a[0].b.c', 'a[1]']);
                         * // => [3, 4]
                         */
                        var at = flatRest(baseAt);
                        /**
                         * Creates an object that inherits from the `prototype` object. If a
                         * `properties` object is given, its own enumerable string keyed properties
                         * are assigned to the created object.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.3.0
                         * @category Object
                         * @param {Object} prototype The object to inherit from.
                         * @param {Object} [properties] The properties to assign to the object.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * function Shape() {
                         *   this.x = 0;
                         *   this.y = 0;
                         * }
                         *
                         * function Circle() {
                         *   Shape.call(this);
                         * }
                         *
                         * Circle.prototype = _.create(Shape.prototype, {
                         *   'constructor': Circle
                         * });
                         *
                         * var circle = new Circle;
                         * circle instanceof Circle;
                         * // => true
                         *
                         * circle instanceof Shape;
                         * // => true
                         */
                        function create(prototype, properties) {
                            var result = baseCreate(prototype);
                            return properties == null ? result : baseAssign(result, properties);
                        }
                        /**
                         * Assigns own and inherited enumerable string keyed properties of source
                         * objects to the destination object for all destination properties that
                         * resolve to `undefined`. Source objects are applied from left to right.
                         * Once a property is set, additional values of the same property are ignored.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.defaultsDeep
                         * @example
                         *
                         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                         * // => { 'a': 1, 'b': 2 }
                         */
                        var defaults = baseRest(function (object, sources) {
                            object = Object(object);
                            var index = -1;
                            var length = sources.length;
                            var guard = length > 2 ? sources[2] : undefined;
                            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                length = 1;
                            }
                            while (++index < length) {
                                var source = sources[index];
                                var props = keysIn(source);
                                var propsIndex = -1;
                                var propsLength = props.length;
                                while (++propsIndex < propsLength) {
                                    var key = props[propsIndex];
                                    var value = object[key];
                                    if (value === undefined ||
                                        (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                                        object[key] = source[key];
                                    }
                                }
                            }
                            return object;
                        });
                        /**
                         * This method is like `_.defaults` except that it recursively assigns
                         * default properties.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @see _.defaults
                         * @example
                         *
                         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                         * // => { 'a': { 'b': 2, 'c': 3 } }
                         */
                        var defaultsDeep = baseRest(function (args) {
                            args.push(undefined, customDefaultsMerge);
                            return apply(mergeWith, undefined, args);
                        });
                        /**
                         * This method is like `_.find` except that it returns the key of the first
                         * element `predicate` returns truthy for instead of the element itself.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {string|undefined} Returns the key of the matched element,
                         *  else `undefined`.
                         * @example
                         *
                         * var users = {
                         *   'barney':  { 'age': 36, 'active': true },
                         *   'fred':    { 'age': 40, 'active': false },
                         *   'pebbles': { 'age': 1,  'active': true }
                         * };
                         *
                         * _.findKey(users, function(o) { return o.age < 40; });
                         * // => 'barney' (iteration order is not guaranteed)
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findKey(users, { 'age': 1, 'active': true });
                         * // => 'pebbles'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findKey(users, ['active', false]);
                         * // => 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findKey(users, 'active');
                         * // => 'barney'
                         */
                        function findKey(object, predicate) {
                            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                        }
                        /**
                         * This method is like `_.findKey` except that it iterates over elements of
                         * a collection in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @param {Function} [predicate=_.identity] The function invoked per iteration.
                         * @returns {string|undefined} Returns the key of the matched element,
                         *  else `undefined`.
                         * @example
                         *
                         * var users = {
                         *   'barney':  { 'age': 36, 'active': true },
                         *   'fred':    { 'age': 40, 'active': false },
                         *   'pebbles': { 'age': 1,  'active': true }
                         * };
                         *
                         * _.findLastKey(users, function(o) { return o.age < 40; });
                         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.findLastKey(users, { 'age': 36, 'active': true });
                         * // => 'barney'
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.findLastKey(users, ['active', false]);
                         * // => 'fred'
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.findLastKey(users, 'active');
                         * // => 'pebbles'
                         */
                        function findLastKey(object, predicate) {
                            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                        }
                        /**
                         * Iterates over own and inherited enumerable string keyed properties of an
                         * object and invokes `iteratee` for each property. The iteratee is invoked
                         * with three arguments: (value, key, object). Iteratee functions may exit
                         * iteration early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forInRight
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forIn(new Foo, function(value, key) {
                         *   console.log(key);
                         * });
                         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                         */
                        function forIn(object, iteratee) {
                            return object == null
                                ? object
                                : baseFor(object, getIteratee(iteratee, 3), keysIn);
                        }
                        /**
                         * This method is like `_.forIn` except that it iterates over properties of
                         * `object` in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forIn
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forInRight(new Foo, function(value, key) {
                         *   console.log(key);
                         * });
                         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                         */
                        function forInRight(object, iteratee) {
                            return object == null
                                ? object
                                : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                        }
                        /**
                         * Iterates over own enumerable string keyed properties of an object and
                         * invokes `iteratee` for each property. The iteratee is invoked with three
                         * arguments: (value, key, object). Iteratee functions may exit iteration
                         * early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forOwnRight
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forOwn(new Foo, function(value, key) {
                         *   console.log(key);
                         * });
                         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                         */
                        function forOwn(object, iteratee) {
                            return object && baseForOwn(object, getIteratee(iteratee, 3));
                        }
                        /**
                         * This method is like `_.forOwn` except that it iterates over properties of
                         * `object` in the opposite order.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.0.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns `object`.
                         * @see _.forOwn
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.forOwnRight(new Foo, function(value, key) {
                         *   console.log(key);
                         * });
                         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                         */
                        function forOwnRight(object, iteratee) {
                            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                        }
                        /**
                         * Creates an array of function property names from own enumerable properties
                         * of `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @returns {Array} Returns the function names.
                         * @see _.functionsIn
                         * @example
                         *
                         * function Foo() {
                         *   this.a = _.constant('a');
                         *   this.b = _.constant('b');
                         * }
                         *
                         * Foo.prototype.c = _.constant('c');
                         *
                         * _.functions(new Foo);
                         * // => ['a', 'b']
                         */
                        function functions(object) {
                            return object == null ? [] : baseFunctions(object, keys(object));
                        }
                        /**
                         * Creates an array of function property names from own and inherited
                         * enumerable properties of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to inspect.
                         * @returns {Array} Returns the function names.
                         * @see _.functions
                         * @example
                         *
                         * function Foo() {
                         *   this.a = _.constant('a');
                         *   this.b = _.constant('b');
                         * }
                         *
                         * Foo.prototype.c = _.constant('c');
                         *
                         * _.functionsIn(new Foo);
                         * // => ['a', 'b', 'c']
                         */
                        function functionsIn(object) {
                            return object == null ? [] : baseFunctions(object, keysIn(object));
                        }
                        /**
                         * Gets the value at `path` of `object`. If the resolved value is
                         * `undefined`, the `defaultValue` is returned in its place.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to get.
                         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.get(object, 'a[0].b.c');
                         * // => 3
                         *
                         * _.get(object, ['a', '0', 'b', 'c']);
                         * // => 3
                         *
                         * _.get(object, 'a.b.c', 'default');
                         * // => 'default'
                         */
                        function get(object, path, defaultValue) {
                            var result = object == null ? undefined : baseGet(object, path);
                            return result === undefined ? defaultValue : result;
                        }
                        /**
                         * Checks if `path` is a direct property of `object`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         * @example
                         *
                         * var object = { 'a': { 'b': 2 } };
                         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                         *
                         * _.has(object, 'a');
                         * // => true
                         *
                         * _.has(object, 'a.b');
                         * // => true
                         *
                         * _.has(object, ['a', 'b']);
                         * // => true
                         *
                         * _.has(other, 'a');
                         * // => false
                         */
                        function has(object, path) {
                            return object != null && hasPath(object, path, baseHas);
                        }
                        /**
                         * Checks if `path` is a direct or inherited property of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path to check.
                         * @returns {boolean} Returns `true` if `path` exists, else `false`.
                         * @example
                         *
                         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                         *
                         * _.hasIn(object, 'a');
                         * // => true
                         *
                         * _.hasIn(object, 'a.b');
                         * // => true
                         *
                         * _.hasIn(object, ['a', 'b']);
                         * // => true
                         *
                         * _.hasIn(object, 'b');
                         * // => false
                         */
                        function hasIn(object, path) {
                            return object != null && hasPath(object, path, baseHasIn);
                        }
                        /**
                         * Creates an object composed of the inverted keys and values of `object`.
                         * If `object` contains duplicate values, subsequent values overwrite
                         * property assignments of previous values.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.7.0
                         * @category Object
                         * @param {Object} object The object to invert.
                         * @returns {Object} Returns the new inverted object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2, 'c': 1 };
                         *
                         * _.invert(object);
                         * // => { '1': 'c', '2': 'b' }
                         */
                        var invert = createInverter(function (result, value, key) {
                            if (value != null &&
                                typeof value.toString != 'function') {
                                value = nativeObjectToString.call(value);
                            }
                            result[value] = key;
                        }, constant(identity));
                        /**
                         * This method is like `_.invert` except that the inverted object is generated
                         * from the results of running each element of `object` thru `iteratee`. The
                         * corresponding inverted value of each inverted key is an array of keys
                         * responsible for generating the inverted value. The iteratee is invoked
                         * with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.1.0
                         * @category Object
                         * @param {Object} object The object to invert.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {Object} Returns the new inverted object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': 2, 'c': 1 };
                         *
                         * _.invertBy(object);
                         * // => { '1': ['a', 'c'], '2': ['b'] }
                         *
                         * _.invertBy(object, function(value) {
                         *   return 'group' + value;
                         * });
                         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                         */
                        var invertBy = createInverter(function (result, value, key) {
                            if (value != null &&
                                typeof value.toString != 'function') {
                                value = nativeObjectToString.call(value);
                            }
                            if (hasOwnProperty.call(result, value)) {
                                result[value].push(key);
                            }
                            else {
                                result[value] = [key];
                            }
                        }, getIteratee);
                        /**
                         * Invokes the method at `path` of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {*} Returns the result of the invoked method.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                         *
                         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                         * // => [2, 3]
                         */
                        var invoke = baseRest(baseInvoke);
                        /**
                         * Creates an array of the own enumerable property names of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects. See the
                         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                         * for more details.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.keys(new Foo);
                         * // => ['a', 'b'] (iteration order is not guaranteed)
                         *
                         * _.keys('hi');
                         * // => ['0', '1']
                         */
                        function keys(object) {
                            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                        }
                        /**
                         * Creates an array of the own and inherited enumerable property names of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property names.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.keysIn(new Foo);
                         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                         */
                        function keysIn(object) {
                            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                        }
                        /**
                         * The opposite of `_.mapValues`; this method creates an object with the
                         * same values as `object` and keys generated by running each own enumerable
                         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                         * with three arguments: (value, key, object).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.8.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns the new mapped object.
                         * @see _.mapValues
                         * @example
                         *
                         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                         *   return key + value;
                         * });
                         * // => { 'a1': 1, 'b2': 2 }
                         */
                        function mapKeys(object, iteratee) {
                            var result = {};
                            iteratee = getIteratee(iteratee, 3);
                            baseForOwn(object, function (value, key, object) {
                                baseAssignValue(result, iteratee(value, key, object), value);
                            });
                            return result;
                        }
                        /**
                         * Creates an object with the same keys as `object` and values generated
                         * by running each own enumerable string keyed property of `object` thru
                         * `iteratee`. The iteratee is invoked with three arguments:
                         * (value, key, object).
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Object} Returns the new mapped object.
                         * @see _.mapKeys
                         * @example
                         *
                         * var users = {
                         *   'fred':    { 'user': 'fred',    'age': 40 },
                         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                         * };
                         *
                         * _.mapValues(users, function(o) { return o.age; });
                         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.mapValues(users, 'age');
                         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                         */
                        function mapValues(object, iteratee) {
                            var result = {};
                            iteratee = getIteratee(iteratee, 3);
                            baseForOwn(object, function (value, key, object) {
                                baseAssignValue(result, key, iteratee(value, key, object));
                            });
                            return result;
                        }
                        /**
                         * This method is like `_.assign` except that it recursively merges own and
                         * inherited enumerable string keyed properties of source objects into the
                         * destination object. Source properties that resolve to `undefined` are
                         * skipped if a destination value exists. Array and plain object properties
                         * are merged recursively. Other objects and value types are overridden by
                         * assignment. Source objects are applied from left to right. Subsequent
                         * sources overwrite property assignments of previous sources.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.5.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} [sources] The source objects.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {
                         *   'a': [{ 'b': 2 }, { 'd': 4 }]
                         * };
                         *
                         * var other = {
                         *   'a': [{ 'c': 3 }, { 'e': 5 }]
                         * };
                         *
                         * _.merge(object, other);
                         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                         */
                        var merge = createAssigner(function (object, source, srcIndex) {
                            baseMerge(object, source, srcIndex);
                        });
                        /**
                         * This method is like `_.merge` except that it accepts `customizer` which
                         * is invoked to produce the merged values of the destination and source
                         * properties. If `customizer` returns `undefined`, merging is handled by the
                         * method instead. The `customizer` is invoked with six arguments:
                         * (objValue, srcValue, key, object, source, stack).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The destination object.
                         * @param {...Object} sources The source objects.
                         * @param {Function} customizer The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * function customizer(objValue, srcValue) {
                         *   if (_.isArray(objValue)) {
                         *     return objValue.concat(srcValue);
                         *   }
                         * }
                         *
                         * var object = { 'a': [1], 'b': [2] };
                         * var other = { 'a': [3], 'b': [4] };
                         *
                         * _.mergeWith(object, other, customizer);
                         * // => { 'a': [1, 3], 'b': [2, 4] }
                         */
                        var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                            baseMerge(object, source, srcIndex, customizer);
                        });
                        /**
                         * The opposite of `_.pick`; this method creates an object composed of the
                         * own and inherited enumerable property paths of `object` that are not omitted.
                         *
                         * **Note:** This method is considerably slower than `_.pick`.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {...(string|string[])} [paths] The property paths to omit.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.omit(object, ['a', 'c']);
                         * // => { 'b': '2' }
                         */
                        var omit = flatRest(function (object, paths) {
                            var result = {};
                            if (object == null) {
                                return result;
                            }
                            var isDeep = false;
                            paths = arrayMap(paths, function (path) {
                                path = castPath(path, object);
                                isDeep || (isDeep = path.length > 1);
                                return path;
                            });
                            copyObject(object, getAllKeysIn(object), result);
                            if (isDeep) {
                                result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                            }
                            var length = paths.length;
                            while (length--) {
                                baseUnset(result, paths[length]);
                            }
                            return result;
                        });
                        /**
                         * The opposite of `_.pickBy`; this method creates an object composed of
                         * the own and inherited enumerable string keyed properties of `object` that
                         * `predicate` doesn't return truthy for. The predicate is invoked with two
                         * arguments: (value, key).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {Function} [predicate=_.identity] The function invoked per property.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.omitBy(object, _.isNumber);
                         * // => { 'b': '2' }
                         */
                        function omitBy(object, predicate) {
                            return pickBy(object, negate(getIteratee(predicate)));
                        }
                        /**
                         * Creates an object composed of the picked `object` properties.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {...(string|string[])} [paths] The property paths to pick.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.pick(object, ['a', 'c']);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        var pick = flatRest(function (object, paths) {
                            return object == null ? {} : basePick(object, paths);
                        });
                        /**
                         * Creates an object composed of the `object` properties `predicate` returns
                         * truthy for. The predicate is invoked with two arguments: (value, key).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The source object.
                         * @param {Function} [predicate=_.identity] The function invoked per property.
                         * @returns {Object} Returns the new object.
                         * @example
                         *
                         * var object = { 'a': 1, 'b': '2', 'c': 3 };
                         *
                         * _.pickBy(object, _.isNumber);
                         * // => { 'a': 1, 'c': 3 }
                         */
                        function pickBy(object, predicate) {
                            if (object == null) {
                                return {};
                            }
                            var props = arrayMap(getAllKeysIn(object), function (prop) {
                                return [prop];
                            });
                            predicate = getIteratee(predicate);
                            return basePickBy(object, props, function (value, path) {
                                return predicate(value, path[0]);
                            });
                        }
                        /**
                         * This method is like `_.get` except that if the resolved value is a
                         * function it's invoked with the `this` binding of its parent object and
                         * its result is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @param {Array|string} path The path of the property to resolve.
                         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                         *
                         * _.result(object, 'a[0].b.c1');
                         * // => 3
                         *
                         * _.result(object, 'a[0].b.c2');
                         * // => 4
                         *
                         * _.result(object, 'a[0].b.c3', 'default');
                         * // => 'default'
                         *
                         * _.result(object, 'a[0].b.c3', _.constant('default'));
                         * // => 'default'
                         */
                        function result(object, path, defaultValue) {
                            path = castPath(path, object);
                            var index = -1, length = path.length;
                            // Ensure the loop is entered when path is empty.
                            if (!length) {
                                length = 1;
                                object = undefined;
                            }
                            while (++index < length) {
                                var value = object == null ? undefined : object[toKey(path[index])];
                                if (value === undefined) {
                                    index = length;
                                    value = defaultValue;
                                }
                                object = isFunction(value) ? value.call(object) : value;
                            }
                            return object;
                        }
                        /**
                         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                         * it's created. Arrays are created for missing index properties while objects
                         * are created for all other missing properties. Use `_.setWith` to customize
                         * `path` creation.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.set(object, 'a[0].b.c', 4);
                         * console.log(object.a[0].b.c);
                         * // => 4
                         *
                         * _.set(object, ['x', '0', 'y', 'z'], 5);
                         * console.log(object.x[0].y.z);
                         * // => 5
                         */
                        function set(object, path, value) {
                            return object == null ? object : baseSet(object, path, value);
                        }
                        /**
                         * This method is like `_.set` except that it accepts `customizer` which is
                         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                         * path creation is handled by the method instead. The `customizer` is invoked
                         * with three arguments: (nsValue, key, nsObject).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {*} value The value to set.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {};
                         *
                         * _.setWith(object, '[0][1]', 'a', Object);
                         * // => { '0': { '1': 'a' } }
                         */
                        function setWith(object, path, value, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return object == null ? object : baseSet(object, path, value, customizer);
                        }
                        /**
                         * Creates an array of own enumerable string keyed-value pairs for `object`
                         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                         * entries are returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias entries
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the key-value pairs.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.toPairs(new Foo);
                         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                         */
                        var toPairs = createToPairs(keys);
                        /**
                         * Creates an array of own and inherited enumerable string keyed-value pairs
                         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                         * or set, its entries are returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @alias entriesIn
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the key-value pairs.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.toPairsIn(new Foo);
                         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                         */
                        var toPairsIn = createToPairs(keysIn);
                        /**
                         * An alternative to `_.reduce`; this method transforms `object` to a new
                         * `accumulator` object which is the result of running each of its own
                         * enumerable string keyed properties thru `iteratee`, with each invocation
                         * potentially mutating the `accumulator` object. If `accumulator` is not
                         * provided, a new object with the same `[[Prototype]]` will be used. The
                         * iteratee is invoked with four arguments: (accumulator, value, key, object).
                         * Iteratee functions may exit iteration early by explicitly returning `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.3.0
                         * @category Object
                         * @param {Object} object The object to iterate over.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @param {*} [accumulator] The custom accumulator value.
                         * @returns {*} Returns the accumulated value.
                         * @example
                         *
                         * _.transform([2, 3, 4], function(result, n) {
                         *   result.push(n *= n);
                         *   return n % 2 == 0;
                         * }, []);
                         * // => [4, 9]
                         *
                         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                         *   (result[value] || (result[value] = [])).push(key);
                         * }, {});
                         * // => { '1': ['a', 'c'], '2': ['b'] }
                         */
                        function transform(object, iteratee, accumulator) {
                            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
                            iteratee = getIteratee(iteratee, 4);
                            if (accumulator == null) {
                                var Ctor = object && object.constructor;
                                if (isArrLike) {
                                    accumulator = isArr ? new Ctor : [];
                                }
                                else if (isObject(object)) {
                                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                                }
                                else {
                                    accumulator = {};
                                }
                            }
                            (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                                return iteratee(accumulator, value, index, object);
                            });
                            return accumulator;
                        }
                        /**
                         * Removes the property at `path` of `object`.
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to unset.
                         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                         * _.unset(object, 'a[0].b.c');
                         * // => true
                         *
                         * console.log(object);
                         * // => { 'a': [{ 'b': {} }] };
                         *
                         * _.unset(object, ['a', '0', 'b', 'c']);
                         * // => true
                         *
                         * console.log(object);
                         * // => { 'a': [{ 'b': {} }] };
                         */
                        function unset(object, path) {
                            return object == null ? true : baseUnset(object, path);
                        }
                        /**
                         * This method is like `_.set` except that accepts `updater` to produce the
                         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                         * is invoked with one argument: (value).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {Function} updater The function to produce the updated value.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                         *
                         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                         * console.log(object.a[0].b.c);
                         * // => 9
                         *
                         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                         * console.log(object.x[0].y.z);
                         * // => 0
                         */
                        function update(object, path, updater) {
                            return object == null ? object : baseUpdate(object, path, castFunction(updater));
                        }
                        /**
                         * This method is like `_.update` except that it accepts `customizer` which is
                         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                         * path creation is handled by the method instead. The `customizer` is invoked
                         * with three arguments: (nsValue, key, nsObject).
                         *
                         * **Note:** This method mutates `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.6.0
                         * @category Object
                         * @param {Object} object The object to modify.
                         * @param {Array|string} path The path of the property to set.
                         * @param {Function} updater The function to produce the updated value.
                         * @param {Function} [customizer] The function to customize assigned values.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var object = {};
                         *
                         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                         * // => { '0': { '1': 'a' } }
                         */
                        function updateWith(object, path, updater, customizer) {
                            customizer = typeof customizer == 'function' ? customizer : undefined;
                            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                        }
                        /**
                         * Creates an array of the own enumerable string keyed property values of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property values.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.values(new Foo);
                         * // => [1, 2] (iteration order is not guaranteed)
                         *
                         * _.values('hi');
                         * // => ['h', 'i']
                         */
                        function values(object) {
                            return object == null ? [] : baseValues(object, keys(object));
                        }
                        /**
                         * Creates an array of the own and inherited enumerable string keyed property
                         * values of `object`.
                         *
                         * **Note:** Non-object values are coerced to objects.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Object
                         * @param {Object} object The object to query.
                         * @returns {Array} Returns the array of property values.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         *   this.b = 2;
                         * }
                         *
                         * Foo.prototype.c = 3;
                         *
                         * _.valuesIn(new Foo);
                         * // => [1, 2, 3] (iteration order is not guaranteed)
                         */
                        function valuesIn(object) {
                            return object == null ? [] : baseValues(object, keysIn(object));
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Clamps `number` within the inclusive `lower` and `upper` bounds.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Number
                         * @param {number} number The number to clamp.
                         * @param {number} [lower] The lower bound.
                         * @param {number} upper The upper bound.
                         * @returns {number} Returns the clamped number.
                         * @example
                         *
                         * _.clamp(-10, -5, 5);
                         * // => -5
                         *
                         * _.clamp(10, -5, 5);
                         * // => 5
                         */
                        function clamp(number, lower, upper) {
                            if (upper === undefined) {
                                upper = lower;
                                lower = undefined;
                            }
                            if (upper !== undefined) {
                                upper = toNumber(upper);
                                upper = upper === upper ? upper : 0;
                            }
                            if (lower !== undefined) {
                                lower = toNumber(lower);
                                lower = lower === lower ? lower : 0;
                            }
                            return baseClamp(toNumber(number), lower, upper);
                        }
                        /**
                         * Checks if `n` is between `start` and up to, but not including, `end`. If
                         * `end` is not specified, it's set to `start` with `start` then set to `0`.
                         * If `start` is greater than `end` the params are swapped to support
                         * negative ranges.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.3.0
                         * @category Number
                         * @param {number} number The number to check.
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                         * @see _.range, _.rangeRight
                         * @example
                         *
                         * _.inRange(3, 2, 4);
                         * // => true
                         *
                         * _.inRange(4, 8);
                         * // => true
                         *
                         * _.inRange(4, 2);
                         * // => false
                         *
                         * _.inRange(2, 2);
                         * // => false
                         *
                         * _.inRange(1.2, 2);
                         * // => true
                         *
                         * _.inRange(5.2, 4);
                         * // => false
                         *
                         * _.inRange(-3, -2, -6);
                         * // => true
                         */
                        function inRange(number, start, end) {
                            start = toFinite(start);
                            if (end === undefined) {
                                end = start;
                                start = 0;
                            }
                            else {
                                end = toFinite(end);
                            }
                            number = toNumber(number);
                            return baseInRange(number, start, end);
                        }
                        /**
                         * Produces a random number between the inclusive `lower` and `upper` bounds.
                         * If only one argument is provided a number between `0` and the given number
                         * is returned. If `floating` is `true`, or either `lower` or `upper` are
                         * floats, a floating-point number is returned instead of an integer.
                         *
                         * **Note:** JavaScript follows the IEEE-754 standard for resolving
                         * floating-point values which can produce unexpected results.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.7.0
                         * @category Number
                         * @param {number} [lower=0] The lower bound.
                         * @param {number} [upper=1] The upper bound.
                         * @param {boolean} [floating] Specify returning a floating-point number.
                         * @returns {number} Returns the random number.
                         * @example
                         *
                         * _.random(0, 5);
                         * // => an integer between 0 and 5
                         *
                         * _.random(5);
                         * // => also an integer between 0 and 5
                         *
                         * _.random(5, true);
                         * // => a floating-point number between 0 and 5
                         *
                         * _.random(1.2, 5.2);
                         * // => a floating-point number between 1.2 and 5.2
                         */
                        function random(lower, upper, floating) {
                            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                                upper = floating = undefined;
                            }
                            if (floating === undefined) {
                                if (typeof upper == 'boolean') {
                                    floating = upper;
                                    upper = undefined;
                                }
                                else if (typeof lower == 'boolean') {
                                    floating = lower;
                                    lower = undefined;
                                }
                            }
                            if (lower === undefined && upper === undefined) {
                                lower = 0;
                                upper = 1;
                            }
                            else {
                                lower = toFinite(lower);
                                if (upper === undefined) {
                                    upper = lower;
                                    lower = 0;
                                }
                                else {
                                    upper = toFinite(upper);
                                }
                            }
                            if (lower > upper) {
                                var temp = lower;
                                lower = upper;
                                upper = temp;
                            }
                            if (floating || lower % 1 || upper % 1) {
                                var rand = nativeRandom();
                                return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                            }
                            return baseRandom(lower, upper);
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the camel cased string.
                         * @example
                         *
                         * _.camelCase('Foo Bar');
                         * // => 'fooBar'
                         *
                         * _.camelCase('--foo-bar--');
                         * // => 'fooBar'
                         *
                         * _.camelCase('__FOO_BAR__');
                         * // => 'fooBar'
                         */
                        var camelCase = createCompounder(function (result, word, index) {
                            word = word.toLowerCase();
                            return result + (index ? capitalize(word) : word);
                        });
                        /**
                         * Converts the first character of `string` to upper case and the remaining
                         * to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to capitalize.
                         * @returns {string} Returns the capitalized string.
                         * @example
                         *
                         * _.capitalize('FRED');
                         * // => 'Fred'
                         */
                        function capitalize(string) {
                            return upperFirst(toString(string).toLowerCase());
                        }
                        /**
                         * Deburrs `string` by converting
                         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                         * letters to basic Latin letters and removing
                         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to deburr.
                         * @returns {string} Returns the deburred string.
                         * @example
                         *
                         * _.deburr('déjà vu');
                         * // => 'deja vu'
                         */
                        function deburr(string) {
                            string = toString(string);
                            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                        }
                        /**
                         * Checks if `string` ends with the given target string.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {string} [target] The string to search for.
                         * @param {number} [position=string.length] The position to search up to.
                         * @returns {boolean} Returns `true` if `string` ends with `target`,
                         *  else `false`.
                         * @example
                         *
                         * _.endsWith('abc', 'c');
                         * // => true
                         *
                         * _.endsWith('abc', 'b');
                         * // => false
                         *
                         * _.endsWith('abc', 'b', 2);
                         * // => true
                         */
                        function endsWith(string, target, position) {
                            string = toString(string);
                            target = baseToString(target);
                            var length = string.length;
                            position = position === undefined
                                ? length
                                : baseClamp(toInteger(position), 0, length);
                            var end = position;
                            position -= target.length;
                            return position >= 0 && string.slice(position, end) == target;
                        }
                        /**
                         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                         * corresponding HTML entities.
                         *
                         * **Note:** No other characters are escaped. To escape additional
                         * characters use a third-party library like [_he_](https://mths.be/he).
                         *
                         * Though the ">" character is escaped for symmetry, characters like
                         * ">" and "/" don't need escaping in HTML and have no special meaning
                         * unless they're part of a tag or unquoted attribute value. See
                         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                         * (under "semi-related fun fact") for more details.
                         *
                         * When working with HTML you should always
                         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                         * XSS vectors.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category String
                         * @param {string} [string=''] The string to escape.
                         * @returns {string} Returns the escaped string.
                         * @example
                         *
                         * _.escape('fred, barney, & pebbles');
                         * // => 'fred, barney, &amp; pebbles'
                         */
                        function escape(string) {
                            string = toString(string);
                            return (string && reHasUnescapedHtml.test(string))
                                ? string.replace(reUnescapedHtml, escapeHtmlChar)
                                : string;
                        }
                        /**
                         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to escape.
                         * @returns {string} Returns the escaped string.
                         * @example
                         *
                         * _.escapeRegExp('[lodash](https://lodash.com/)');
                         * // => '\[lodash\]\(https://lodash\.com/\)'
                         */
                        function escapeRegExp(string) {
                            string = toString(string);
                            return (string && reHasRegExpChar.test(string))
                                ? string.replace(reRegExpChar, '\\$&')
                                : string;
                        }
                        /**
                         * Converts `string` to
                         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the kebab cased string.
                         * @example
                         *
                         * _.kebabCase('Foo Bar');
                         * // => 'foo-bar'
                         *
                         * _.kebabCase('fooBar');
                         * // => 'foo-bar'
                         *
                         * _.kebabCase('__FOO_BAR__');
                         * // => 'foo-bar'
                         */
                        var kebabCase = createCompounder(function (result, word, index) {
                            return result + (index ? '-' : '') + word.toLowerCase();
                        });
                        /**
                         * Converts `string`, as space separated words, to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the lower cased string.
                         * @example
                         *
                         * _.lowerCase('--Foo-Bar--');
                         * // => 'foo bar'
                         *
                         * _.lowerCase('fooBar');
                         * // => 'foo bar'
                         *
                         * _.lowerCase('__FOO_BAR__');
                         * // => 'foo bar'
                         */
                        var lowerCase = createCompounder(function (result, word, index) {
                            return result + (index ? ' ' : '') + word.toLowerCase();
                        });
                        /**
                         * Converts the first character of `string` to lower case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.lowerFirst('Fred');
                         * // => 'fred'
                         *
                         * _.lowerFirst('FRED');
                         * // => 'fRED'
                         */
                        var lowerFirst = createCaseFirst('toLowerCase');
                        /**
                         * Pads `string` on the left and right sides if it's shorter than `length`.
                         * Padding characters are truncated if they can't be evenly divided by `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.pad('abc', 8);
                         * // => '  abc   '
                         *
                         * _.pad('abc', 8, '_-');
                         * // => '_-abc_-_'
                         *
                         * _.pad('abc', 3);
                         * // => 'abc'
                         */
                        function pad(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);
                            var strLength = length ? stringSize(string) : 0;
                            if (!length || strLength >= length) {
                                return string;
                            }
                            var mid = (length - strLength) / 2;
                            return (createPadding(nativeFloor(mid), chars) +
                                string +
                                createPadding(nativeCeil(mid), chars));
                        }
                        /**
                         * Pads `string` on the right side if it's shorter than `length`. Padding
                         * characters are truncated if they exceed `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.padEnd('abc', 6);
                         * // => 'abc   '
                         *
                         * _.padEnd('abc', 6, '_-');
                         * // => 'abc_-_'
                         *
                         * _.padEnd('abc', 3);
                         * // => 'abc'
                         */
                        function padEnd(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);
                            var strLength = length ? stringSize(string) : 0;
                            return (length && strLength < length)
                                ? (string + createPadding(length - strLength, chars))
                                : string;
                        }
                        /**
                         * Pads `string` on the left side if it's shorter than `length`. Padding
                         * characters are truncated if they exceed `length`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to pad.
                         * @param {number} [length=0] The padding length.
                         * @param {string} [chars=' '] The string used as padding.
                         * @returns {string} Returns the padded string.
                         * @example
                         *
                         * _.padStart('abc', 6);
                         * // => '   abc'
                         *
                         * _.padStart('abc', 6, '_-');
                         * // => '_-_abc'
                         *
                         * _.padStart('abc', 3);
                         * // => 'abc'
                         */
                        function padStart(string, length, chars) {
                            string = toString(string);
                            length = toInteger(length);
                            var strLength = length ? stringSize(string) : 0;
                            return (length && strLength < length)
                                ? (createPadding(length - strLength, chars) + string)
                                : string;
                        }
                        /**
                         * Converts `string` to an integer of the specified radix. If `radix` is
                         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                         * hexadecimal, in which case a `radix` of `16` is used.
                         *
                         * **Note:** This method aligns with the
                         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                         *
                         * @static
                         * @memberOf _
                         * @since 1.1.0
                         * @category String
                         * @param {string} string The string to convert.
                         * @param {number} [radix=10] The radix to interpret `value` by.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {number} Returns the converted integer.
                         * @example
                         *
                         * _.parseInt('08');
                         * // => 8
                         *
                         * _.map(['6', '08', '10'], _.parseInt);
                         * // => [6, 8, 10]
                         */
                        function parseInt(string, radix, guard) {
                            if (guard || radix == null) {
                                radix = 0;
                            }
                            else if (radix) {
                                radix = +radix;
                            }
                            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                        }
                        /**
                         * Repeats the given string `n` times.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to repeat.
                         * @param {number} [n=1] The number of times to repeat the string.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the repeated string.
                         * @example
                         *
                         * _.repeat('*', 3);
                         * // => '***'
                         *
                         * _.repeat('abc', 2);
                         * // => 'abcabc'
                         *
                         * _.repeat('abc', 0);
                         * // => ''
                         */
                        function repeat(string, n, guard) {
                            if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                                n = 1;
                            }
                            else {
                                n = toInteger(n);
                            }
                            return baseRepeat(toString(string), n);
                        }
                        /**
                         * Replaces matches for `pattern` in `string` with `replacement`.
                         *
                         * **Note:** This method is based on
                         * [`String#replace`](https://mdn.io/String/replace).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to modify.
                         * @param {RegExp|string} pattern The pattern to replace.
                         * @param {Function|string} replacement The match replacement.
                         * @returns {string} Returns the modified string.
                         * @example
                         *
                         * _.replace('Hi Fred', 'Fred', 'Barney');
                         * // => 'Hi Barney'
                         */
                        function replace() {
                            var args = arguments, string = toString(args[0]);
                            return args.length < 3 ? string : string.replace(args[1], args[2]);
                        }
                        /**
                         * Converts `string` to
                         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the snake cased string.
                         * @example
                         *
                         * _.snakeCase('Foo Bar');
                         * // => 'foo_bar'
                         *
                         * _.snakeCase('fooBar');
                         * // => 'foo_bar'
                         *
                         * _.snakeCase('--FOO-BAR--');
                         * // => 'foo_bar'
                         */
                        var snakeCase = createCompounder(function (result, word, index) {
                            return result + (index ? '_' : '') + word.toLowerCase();
                        });
                        /**
                         * Splits `string` by `separator`.
                         *
                         * **Note:** This method is based on
                         * [`String#split`](https://mdn.io/String/split).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to split.
                         * @param {RegExp|string} separator The separator pattern to split by.
                         * @param {number} [limit] The length to truncate results to.
                         * @returns {Array} Returns the string segments.
                         * @example
                         *
                         * _.split('a-b-c', '-', 2);
                         * // => ['a', 'b']
                         */
                        function split(string, separator, limit) {
                            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                                separator = limit = undefined;
                            }
                            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                            if (!limit) {
                                return [];
                            }
                            string = toString(string);
                            if (string && (typeof separator == 'string' ||
                                (separator != null && !isRegExp(separator)))) {
                                separator = baseToString(separator);
                                if (!separator && hasUnicode(string)) {
                                    return castSlice(stringToArray(string), 0, limit);
                                }
                            }
                            return string.split(separator, limit);
                        }
                        /**
                         * Converts `string` to
                         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                         *
                         * @static
                         * @memberOf _
                         * @since 3.1.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the start cased string.
                         * @example
                         *
                         * _.startCase('--foo-bar--');
                         * // => 'Foo Bar'
                         *
                         * _.startCase('fooBar');
                         * // => 'Foo Bar'
                         *
                         * _.startCase('__FOO_BAR__');
                         * // => 'FOO BAR'
                         */
                        var startCase = createCompounder(function (result, word, index) {
                            return result + (index ? ' ' : '') + upperFirst(word);
                        });
                        /**
                         * Checks if `string` starts with the given target string.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {string} [target] The string to search for.
                         * @param {number} [position=0] The position to search from.
                         * @returns {boolean} Returns `true` if `string` starts with `target`,
                         *  else `false`.
                         * @example
                         *
                         * _.startsWith('abc', 'a');
                         * // => true
                         *
                         * _.startsWith('abc', 'b');
                         * // => false
                         *
                         * _.startsWith('abc', 'b', 1);
                         * // => true
                         */
                        function startsWith(string, target, position) {
                            string = toString(string);
                            position = position == null
                                ? 0
                                : baseClamp(toInteger(position), 0, string.length);
                            target = baseToString(target);
                            return string.slice(position, position + target.length) == target;
                        }
                        /**
                         * Creates a compiled template function that can interpolate data properties
                         * in "interpolate" delimiters, HTML-escape interpolated data properties in
                         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                         * properties may be accessed as free variables in the template. If a setting
                         * object is given, it takes precedence over `_.templateSettings` values.
                         *
                         * **Note:** In the development build `_.template` utilizes
                         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                         * for easier debugging.
                         *
                         * For more information on precompiling templates see
                         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                         *
                         * For more information on Chrome extension sandboxes see
                         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category String
                         * @param {string} [string=''] The template string.
                         * @param {Object} [options={}] The options object.
                         * @param {RegExp} [options.escape=_.templateSettings.escape]
                         *  The HTML "escape" delimiter.
                         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                         *  The "evaluate" delimiter.
                         * @param {Object} [options.imports=_.templateSettings.imports]
                         *  An object to import into the template as free variables.
                         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                         *  The "interpolate" delimiter.
                         * @param {string} [options.sourceURL='lodash.templateSources[n]']
                         *  The sourceURL of the compiled template.
                         * @param {string} [options.variable='obj']
                         *  The data object variable name.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Function} Returns the compiled template function.
                         * @example
                         *
                         * // Use the "interpolate" delimiter to create a compiled template.
                         * var compiled = _.template('hello <%= user %>!');
                         * compiled({ 'user': 'fred' });
                         * // => 'hello fred!'
                         *
                         * // Use the HTML "escape" delimiter to escape data property values.
                         * var compiled = _.template('<b><%- value %></b>');
                         * compiled({ 'value': '<script>' });
                         * // => '<b>&lt;script&gt;</b>'
                         *
                         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                         * compiled({ 'users': ['fred', 'barney'] });
                         * // => '<li>fred</li><li>barney</li>'
                         *
                         * // Use the internal `print` function in "evaluate" delimiters.
                         * var compiled = _.template('<% print("hello " + user); %>!');
                         * compiled({ 'user': 'barney' });
                         * // => 'hello barney!'
                         *
                         * // Use the ES template literal delimiter as an "interpolate" delimiter.
                         * // Disable support by replacing the "interpolate" delimiter.
                         * var compiled = _.template('hello ${ user }!');
                         * compiled({ 'user': 'pebbles' });
                         * // => 'hello pebbles!'
                         *
                         * // Use backslashes to treat delimiters as plain text.
                         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                         * compiled({ 'value': 'ignored' });
                         * // => '<%- value %>'
                         *
                         * // Use the `imports` option to import `jQuery` as `jq`.
                         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                         * compiled({ 'users': ['fred', 'barney'] });
                         * // => '<li>fred</li><li>barney</li>'
                         *
                         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                         * compiled(data);
                         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                         *
                         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                         * compiled.source;
                         * // => function(data) {
                         * //   var __t, __p = '';
                         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                         * //   return __p;
                         * // }
                         *
                         * // Use custom template delimiters.
                         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                         * var compiled = _.template('hello {{ user }}!');
                         * compiled({ 'user': 'mustache' });
                         * // => 'hello mustache!'
                         *
                         * // Use the `source` property to inline compiled templates for meaningful
                         * // line numbers in error messages and stack traces.
                         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                         *   var JST = {\
                         *     "main": ' + _.template(mainText).source + '\
                         *   };\
                         * ');
                         */
                        function template(string, options, guard) {
                            // Based on John Resig's `tmpl` implementation
                            // (http://ejohn.org/blog/javascript-micro-templating/)
                            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                            var settings = lodash.templateSettings;
                            if (guard && isIterateeCall(string, options, guard)) {
                                options = undefined;
                            }
                            string = toString(string);
                            options = assignInWith({}, options, settings, customDefaultsAssignIn);
                            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
                            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
                            // Compile the regexp to match each delimiter.
                            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' +
                                interpolate.source + '|' +
                                (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                                (options.evaluate || reNoMatch).source + '|$', 'g');
                            // Use a sourceURL for easier debugging.
                            // The sourceURL gets injected into the source that's eval-ed, so be careful
                            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                            // and escape the comment, thus injecting code that gets evaled.
                            var sourceURL = '//# sourceURL=' +
                                (hasOwnProperty.call(options, 'sourceURL')
                                    ? (options.sourceURL + '').replace(/\s/g, ' ')
                                    : ('lodash.templateSources[' + (++templateCounter) + ']')) + '\n';
                            string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                                interpolateValue || (interpolateValue = esTemplateValue);
                                // Escape characters that can't be included in string literals.
                                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                                // Replace delimiters with snippets.
                                if (escapeValue) {
                                    isEscaping = true;
                                    source += "' +\n__e(" + escapeValue + ") +\n'";
                                }
                                if (evaluateValue) {
                                    isEvaluating = true;
                                    source += "';\n" + evaluateValue + ";\n__p += '";
                                }
                                if (interpolateValue) {
                                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                                }
                                index = offset + match.length;
                                // The JS engine embedded in Adobe products needs `match` returned in
                                // order to produce the correct `offset` value.
                                return match;
                            });
                            source += "';\n";
                            // If `variable` is not specified wrap a with-statement around the generated
                            // code to add the data object to the top of the scope chain.
                            var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                            if (!variable) {
                                source = 'with (obj) {\n' + source + '\n}\n';
                            }
                            // Throw an error if a forbidden character was found in `variable`, to prevent
                            // potential command injection attacks.
                            else if (reForbiddenIdentifierChars.test(variable)) {
                                throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                            }
                            // Cleanup code by stripping empty strings.
                            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                                .replace(reEmptyStringMiddle, '$1')
                                .replace(reEmptyStringTrailing, '$1;');
                            // Frame code as the function body.
                            source = 'function(' + (variable || 'obj') + ') {\n' +
                                (variable
                                    ? ''
                                    : 'obj || (obj = {});\n') +
                                "var __t, __p = ''" +
                                (isEscaping
                                    ? ', __e = _.escape'
                                    : '') +
                                (isEvaluating
                                    ? ', __j = Array.prototype.join;\n' +
                                        "function print() { __p += __j.call(arguments, '') }\n"
                                    : ';\n') +
                                source +
                                'return __p\n}';
                            var result = attempt(function () {
                                return Function(importsKeys, sourceURL + 'return ' + source)
                                    .apply(undefined, importsValues);
                            });
                            // Provide the compiled function's source by its `toString` method or
                            // the `source` property as a convenience for inlining compiled templates.
                            result.source = source;
                            if (isError(result)) {
                                throw result;
                            }
                            return result;
                        }
                        /**
                         * Converts `string`, as a whole, to lower case just like
                         * [String#toLowerCase](https://mdn.io/toLowerCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the lower cased string.
                         * @example
                         *
                         * _.toLower('--Foo-Bar--');
                         * // => '--foo-bar--'
                         *
                         * _.toLower('fooBar');
                         * // => 'foobar'
                         *
                         * _.toLower('__FOO_BAR__');
                         * // => '__foo_bar__'
                         */
                        function toLower(value) {
                            return toString(value).toLowerCase();
                        }
                        /**
                         * Converts `string`, as a whole, to upper case just like
                         * [String#toUpperCase](https://mdn.io/toUpperCase).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the upper cased string.
                         * @example
                         *
                         * _.toUpper('--foo-bar--');
                         * // => '--FOO-BAR--'
                         *
                         * _.toUpper('fooBar');
                         * // => 'FOOBAR'
                         *
                         * _.toUpper('__foo_bar__');
                         * // => '__FOO_BAR__'
                         */
                        function toUpper(value) {
                            return toString(value).toUpperCase();
                        }
                        /**
                         * Removes leading and trailing whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trim('  abc  ');
                         * // => 'abc'
                         *
                         * _.trim('-_-abc-_-', '_-');
                         * // => 'abc'
                         *
                         * _.map(['  foo  ', '  bar  '], _.trim);
                         * // => ['foo', 'bar']
                         */
                        function trim(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return baseTrim(string);
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
                            return castSlice(strSymbols, start, end).join('');
                        }
                        /**
                         * Removes trailing whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trimEnd('  abc  ');
                         * // => '  abc'
                         *
                         * _.trimEnd('-_-abc-_-', '_-');
                         * // => '-_-abc'
                         */
                        function trimEnd(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return string.slice(0, trimmedEndIndex(string) + 1);
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
                            return castSlice(strSymbols, 0, end).join('');
                        }
                        /**
                         * Removes leading whitespace or specified characters from `string`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to trim.
                         * @param {string} [chars=whitespace] The characters to trim.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {string} Returns the trimmed string.
                         * @example
                         *
                         * _.trimStart('  abc  ');
                         * // => 'abc  '
                         *
                         * _.trimStart('-_-abc-_-', '_-');
                         * // => 'abc-_-'
                         */
                        function trimStart(string, chars, guard) {
                            string = toString(string);
                            if (string && (guard || chars === undefined)) {
                                return string.replace(reTrimStart, '');
                            }
                            if (!string || !(chars = baseToString(chars))) {
                                return string;
                            }
                            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
                            return castSlice(strSymbols, start).join('');
                        }
                        /**
                         * Truncates `string` if it's longer than the given maximum string length.
                         * The last characters of the truncated string are replaced with the omission
                         * string which defaults to "...".
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to truncate.
                         * @param {Object} [options={}] The options object.
                         * @param {number} [options.length=30] The maximum string length.
                         * @param {string} [options.omission='...'] The string to indicate text is omitted.
                         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                         * @returns {string} Returns the truncated string.
                         * @example
                         *
                         * _.truncate('hi-diddly-ho there, neighborino');
                         * // => 'hi-diddly-ho there, neighbo...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
                         *   'length': 24,
                         *   'separator': ' '
                         * });
                         * // => 'hi-diddly-ho there,...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
                         *   'length': 24,
                         *   'separator': /,? +/
                         * });
                         * // => 'hi-diddly-ho there...'
                         *
                         * _.truncate('hi-diddly-ho there, neighborino', {
                         *   'omission': ' [...]'
                         * });
                         * // => 'hi-diddly-ho there, neig [...]'
                         */
                        function truncate(string, options) {
                            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
                            if (isObject(options)) {
                                var separator = 'separator' in options ? options.separator : separator;
                                length = 'length' in options ? toInteger(options.length) : length;
                                omission = 'omission' in options ? baseToString(options.omission) : omission;
                            }
                            string = toString(string);
                            var strLength = string.length;
                            if (hasUnicode(string)) {
                                var strSymbols = stringToArray(string);
                                strLength = strSymbols.length;
                            }
                            if (length >= strLength) {
                                return string;
                            }
                            var end = length - stringSize(omission);
                            if (end < 1) {
                                return omission;
                            }
                            var result = strSymbols
                                ? castSlice(strSymbols, 0, end).join('')
                                : string.slice(0, end);
                            if (separator === undefined) {
                                return result + omission;
                            }
                            if (strSymbols) {
                                end += (result.length - end);
                            }
                            if (isRegExp(separator)) {
                                if (string.slice(end).search(separator)) {
                                    var match, substring = result;
                                    if (!separator.global) {
                                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                                    }
                                    separator.lastIndex = 0;
                                    while ((match = separator.exec(substring))) {
                                        var newEnd = match.index;
                                    }
                                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                                }
                            }
                            else if (string.indexOf(baseToString(separator), end) != end) {
                                var index = result.lastIndexOf(separator);
                                if (index > -1) {
                                    result = result.slice(0, index);
                                }
                            }
                            return result + omission;
                        }
                        /**
                         * The inverse of `_.escape`; this method converts the HTML entities
                         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                         * their corresponding characters.
                         *
                         * **Note:** No other HTML entities are unescaped. To unescape additional
                         * HTML entities use a third-party library like [_he_](https://mths.be/he).
                         *
                         * @static
                         * @memberOf _
                         * @since 0.6.0
                         * @category String
                         * @param {string} [string=''] The string to unescape.
                         * @returns {string} Returns the unescaped string.
                         * @example
                         *
                         * _.unescape('fred, barney, &amp; pebbles');
                         * // => 'fred, barney, & pebbles'
                         */
                        function unescape(string) {
                            string = toString(string);
                            return (string && reHasEscapedHtml.test(string))
                                ? string.replace(reEscapedHtml, unescapeHtmlChar)
                                : string;
                        }
                        /**
                         * Converts `string`, as space separated words, to upper case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the upper cased string.
                         * @example
                         *
                         * _.upperCase('--foo-bar');
                         * // => 'FOO BAR'
                         *
                         * _.upperCase('fooBar');
                         * // => 'FOO BAR'
                         *
                         * _.upperCase('__foo_bar__');
                         * // => 'FOO BAR'
                         */
                        var upperCase = createCompounder(function (result, word, index) {
                            return result + (index ? ' ' : '') + word.toUpperCase();
                        });
                        /**
                         * Converts the first character of `string` to upper case.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category String
                         * @param {string} [string=''] The string to convert.
                         * @returns {string} Returns the converted string.
                         * @example
                         *
                         * _.upperFirst('fred');
                         * // => 'Fred'
                         *
                         * _.upperFirst('FRED');
                         * // => 'FRED'
                         */
                        var upperFirst = createCaseFirst('toUpperCase');
                        /**
                         * Splits `string` into an array of its words.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category String
                         * @param {string} [string=''] The string to inspect.
                         * @param {RegExp|string} [pattern] The pattern to match words.
                         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                         * @returns {Array} Returns the words of `string`.
                         * @example
                         *
                         * _.words('fred, barney, & pebbles');
                         * // => ['fred', 'barney', 'pebbles']
                         *
                         * _.words('fred, barney, & pebbles', /[^, ]+/g);
                         * // => ['fred', 'barney', '&', 'pebbles']
                         */
                        function words(string, pattern, guard) {
                            string = toString(string);
                            pattern = guard ? undefined : pattern;
                            if (pattern === undefined) {
                                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                            }
                            return string.match(pattern) || [];
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Attempts to invoke `func`, returning either the result or the caught error
                         * object. Any additional arguments are provided to `func` when it's invoked.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Function} func The function to attempt.
                         * @param {...*} [args] The arguments to invoke `func` with.
                         * @returns {*} Returns the `func` result or error object.
                         * @example
                         *
                         * // Avoid throwing errors for invalid selectors.
                         * var elements = _.attempt(function(selector) {
                         *   return document.querySelectorAll(selector);
                         * }, '>_>');
                         *
                         * if (_.isError(elements)) {
                         *   elements = [];
                         * }
                         */
                        var attempt = baseRest(function (func, args) {
                            try {
                                return apply(func, undefined, args);
                            }
                            catch (e) {
                                return isError(e) ? e : new Error(e);
                            }
                        });
                        /**
                         * Binds methods of an object to the object itself, overwriting the existing
                         * method.
                         *
                         * **Note:** This method doesn't set the "length" property of bound functions.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {Object} object The object to bind and assign the bound methods to.
                         * @param {...(string|string[])} methodNames The object method names to bind.
                         * @returns {Object} Returns `object`.
                         * @example
                         *
                         * var view = {
                         *   'label': 'docs',
                         *   'click': function() {
                         *     console.log('clicked ' + this.label);
                         *   }
                         * };
                         *
                         * _.bindAll(view, ['click']);
                         * jQuery(element).on('click', view.click);
                         * // => Logs 'clicked docs' when clicked.
                         */
                        var bindAll = flatRest(function (object, methodNames) {
                            arrayEach(methodNames, function (key) {
                                key = toKey(key);
                                baseAssignValue(object, key, bind(object[key], object));
                            });
                            return object;
                        });
                        /**
                         * Creates a function that iterates over `pairs` and invokes the corresponding
                         * function of the first predicate to return truthy. The predicate-function
                         * pairs are invoked with the `this` binding and arguments of the created
                         * function.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {Array} pairs The predicate-function pairs.
                         * @returns {Function} Returns the new composite function.
                         * @example
                         *
                         * var func = _.cond([
                         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                         *   [_.stubTrue,                      _.constant('no match')]
                         * ]);
                         *
                         * func({ 'a': 1, 'b': 2 });
                         * // => 'matches A'
                         *
                         * func({ 'a': 0, 'b': 1 });
                         * // => 'matches B'
                         *
                         * func({ 'a': '1', 'b': '2' });
                         * // => 'no match'
                         */
                        function cond(pairs) {
                            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
                            pairs = !length ? [] : arrayMap(pairs, function (pair) {
                                if (typeof pair[1] != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                return [toIteratee(pair[0]), pair[1]];
                            });
                            return baseRest(function (args) {
                                var index = -1;
                                while (++index < length) {
                                    var pair = pairs[index];
                                    if (apply(pair[0], this, args)) {
                                        return apply(pair[1], this, args);
                                    }
                                }
                            });
                        }
                        /**
                         * Creates a function that invokes the predicate properties of `source` with
                         * the corresponding property values of a given object, returning `true` if
                         * all predicates return truthy, else `false`.
                         *
                         * **Note:** The created function is equivalent to `_.conformsTo` with
                         * `source` partially applied.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {Object} source The object of property predicates to conform to.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 2, 'b': 1 },
                         *   { 'a': 1, 'b': 2 }
                         * ];
                         *
                         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                         * // => [{ 'a': 1, 'b': 2 }]
                         */
                        function conforms(source) {
                            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                        }
                        /**
                         * Creates a function that returns `value`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Util
                         * @param {*} value The value to return from the new function.
                         * @returns {Function} Returns the new constant function.
                         * @example
                         *
                         * var objects = _.times(2, _.constant({ 'a': 1 }));
                         *
                         * console.log(objects);
                         * // => [{ 'a': 1 }, { 'a': 1 }]
                         *
                         * console.log(objects[0] === objects[1]);
                         * // => true
                         */
                        function constant(value) {
                            return function () {
                                return value;
                            };
                        }
                        /**
                         * Checks `value` to determine whether a default value should be returned in
                         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                         * or `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.14.0
                         * @category Util
                         * @param {*} value The value to check.
                         * @param {*} defaultValue The default value.
                         * @returns {*} Returns the resolved value.
                         * @example
                         *
                         * _.defaultTo(1, 10);
                         * // => 1
                         *
                         * _.defaultTo(undefined, 10);
                         * // => 10
                         */
                        function defaultTo(value, defaultValue) {
                            return (value == null || value !== value) ? defaultValue : value;
                        }
                        /**
                         * Creates a function that returns the result of invoking the given functions
                         * with the `this` binding of the created function, where each successive
                         * invocation is supplied the return value of the previous.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [funcs] The functions to invoke.
                         * @returns {Function} Returns the new composite function.
                         * @see _.flowRight
                         * @example
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * var addSquare = _.flow([_.add, square]);
                         * addSquare(1, 2);
                         * // => 9
                         */
                        var flow = createFlow();
                        /**
                         * This method is like `_.flow` except that it creates a function that
                         * invokes the given functions from right to left.
                         *
                         * @static
                         * @since 3.0.0
                         * @memberOf _
                         * @category Util
                         * @param {...(Function|Function[])} [funcs] The functions to invoke.
                         * @returns {Function} Returns the new composite function.
                         * @see _.flow
                         * @example
                         *
                         * function square(n) {
                         *   return n * n;
                         * }
                         *
                         * var addSquare = _.flowRight([square, _.add]);
                         * addSquare(1, 2);
                         * // => 9
                         */
                        var flowRight = createFlow(true);
                        /**
                         * This method returns the first argument it receives.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {*} value Any value.
                         * @returns {*} Returns `value`.
                         * @example
                         *
                         * var object = { 'a': 1 };
                         *
                         * console.log(_.identity(object) === object);
                         * // => true
                         */
                        function identity(value) {
                            return value;
                        }
                        /**
                         * Creates a function that invokes `func` with the arguments of the created
                         * function. If `func` is a property name, the created function returns the
                         * property value for a given element. If `func` is an array or object, the
                         * created function returns `true` for elements that contain the equivalent
                         * source properties, otherwise it returns `false`.
                         *
                         * @static
                         * @since 4.0.0
                         * @memberOf _
                         * @category Util
                         * @param {*} [func=_.identity] The value to convert to a callback.
                         * @returns {Function} Returns the callback.
                         * @example
                         *
                         * var users = [
                         *   { 'user': 'barney', 'age': 36, 'active': true },
                         *   { 'user': 'fred',   'age': 40, 'active': false }
                         * ];
                         *
                         * // The `_.matches` iteratee shorthand.
                         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                         *
                         * // The `_.matchesProperty` iteratee shorthand.
                         * _.filter(users, _.iteratee(['user', 'fred']));
                         * // => [{ 'user': 'fred', 'age': 40 }]
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.map(users, _.iteratee('user'));
                         * // => ['barney', 'fred']
                         *
                         * // Create custom iteratee shorthands.
                         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                         *     return func.test(string);
                         *   };
                         * });
                         *
                         * _.filter(['abc', 'def'], /ef/);
                         * // => ['def']
                         */
                        function iteratee(func) {
                            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                        }
                        /**
                         * Creates a function that performs a partial deep comparison between a given
                         * object and `source`, returning `true` if the given object has equivalent
                         * property values, else `false`.
                         *
                         * **Note:** The created function is equivalent to `_.isMatch` with `source`
                         * partially applied.
                         *
                         * Partial comparisons will match empty array and empty object `source`
                         * values against any array or object value, respectively. See `_.isEqual`
                         * for a list of supported value comparisons.
                         *
                         * **Note:** Multiple values can be checked by combining several matchers
                         * using `_.overSome`
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Object} source The object of property values to match.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 1, 'b': 2, 'c': 3 },
                         *   { 'a': 4, 'b': 5, 'c': 6 }
                         * ];
                         *
                         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                         *
                         * // Checking for several possible values
                         * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
                         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                         */
                        function matches(source) {
                            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                        }
                        /**
                         * Creates a function that performs a partial deep comparison between the
                         * value at `path` of a given object to `srcValue`, returning `true` if the
                         * object value is equivalent, else `false`.
                         *
                         * **Note:** Partial comparisons will match empty array and empty object
                         * `srcValue` values against any array or object value, respectively. See
                         * `_.isEqual` for a list of supported value comparisons.
                         *
                         * **Note:** Multiple values can be checked by combining several matchers
                         * using `_.overSome`
                         *
                         * @static
                         * @memberOf _
                         * @since 3.2.0
                         * @category Util
                         * @param {Array|string} path The path of the property to get.
                         * @param {*} srcValue The value to match.
                         * @returns {Function} Returns the new spec function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': 1, 'b': 2, 'c': 3 },
                         *   { 'a': 4, 'b': 5, 'c': 6 }
                         * ];
                         *
                         * _.find(objects, _.matchesProperty('a', 4));
                         * // => { 'a': 4, 'b': 5, 'c': 6 }
                         *
                         * // Checking for several possible values
                         * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
                         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
                         */
                        function matchesProperty(path, srcValue) {
                            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                        }
                        /**
                         * Creates a function that invokes the method at `path` of a given object.
                         * Any additional arguments are provided to the invoked method.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Util
                         * @param {Array|string} path The path of the method to invoke.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {Function} Returns the new invoker function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': { 'b': _.constant(2) } },
                         *   { 'a': { 'b': _.constant(1) } }
                         * ];
                         *
                         * _.map(objects, _.method('a.b'));
                         * // => [2, 1]
                         *
                         * _.map(objects, _.method(['a', 'b']));
                         * // => [2, 1]
                         */
                        var method = baseRest(function (path, args) {
                            return function (object) {
                                return baseInvoke(object, path, args);
                            };
                        });
                        /**
                         * The opposite of `_.method`; this method creates a function that invokes
                         * the method at a given path of `object`. Any additional arguments are
                         * provided to the invoked method.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.7.0
                         * @category Util
                         * @param {Object} object The object to query.
                         * @param {...*} [args] The arguments to invoke the method with.
                         * @returns {Function} Returns the new invoker function.
                         * @example
                         *
                         * var array = _.times(3, _.constant),
                         *     object = { 'a': array, 'b': array, 'c': array };
                         *
                         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                         * // => [2, 0]
                         *
                         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                         * // => [2, 0]
                         */
                        var methodOf = baseRest(function (object, args) {
                            return function (path) {
                                return baseInvoke(object, path, args);
                            };
                        });
                        /**
                         * Adds all own enumerable string keyed function properties of a source
                         * object to the destination object. If `object` is a function, then methods
                         * are added to its prototype as well.
                         *
                         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                         * avoid conflicts caused by modifying the original.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {Function|Object} [object=lodash] The destination object.
                         * @param {Object} source The object of functions to add.
                         * @param {Object} [options={}] The options object.
                         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                         * @returns {Function|Object} Returns `object`.
                         * @example
                         *
                         * function vowels(string) {
                         *   return _.filter(string, function(v) {
                         *     return /[aeiou]/i.test(v);
                         *   });
                         * }
                         *
                         * _.mixin({ 'vowels': vowels });
                         * _.vowels('fred');
                         * // => ['e']
                         *
                         * _('fred').vowels().value();
                         * // => ['e']
                         *
                         * _.mixin({ 'vowels': vowels }, { 'chain': false });
                         * _('fred').vowels();
                         * // => ['e']
                         */
                        function mixin(object, source, options) {
                            var props = keys(source), methodNames = baseFunctions(source, props);
                            if (options == null &&
                                !(isObject(source) && (methodNames.length || !props.length))) {
                                options = source;
                                source = object;
                                object = this;
                                methodNames = baseFunctions(source, keys(source));
                            }
                            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
                            arrayEach(methodNames, function (methodName) {
                                var func = source[methodName];
                                object[methodName] = func;
                                if (isFunc) {
                                    object.prototype[methodName] = function () {
                                        var chainAll = this.__chain__;
                                        if (chain || chainAll) {
                                            var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                                            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                                            result.__chain__ = chainAll;
                                            return result;
                                        }
                                        return func.apply(object, arrayPush([this.value()], arguments));
                                    };
                                }
                            });
                            return object;
                        }
                        /**
                         * Reverts the `_` variable to its previous value and returns a reference to
                         * the `lodash` function.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @returns {Function} Returns the `lodash` function.
                         * @example
                         *
                         * var lodash = _.noConflict();
                         */
                        function noConflict() {
                            if (root._ === this) {
                                root._ = oldDash;
                            }
                            return this;
                        }
                        /**
                         * This method returns `undefined`.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.3.0
                         * @category Util
                         * @example
                         *
                         * _.times(2, _.noop);
                         * // => [undefined, undefined]
                         */
                        function noop() {
                            // No operation performed.
                        }
                        /**
                         * Creates a function that gets the argument at index `n`. If `n` is negative,
                         * the nth argument from the end is returned.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {number} [n=0] The index of the argument to return.
                         * @returns {Function} Returns the new pass-thru function.
                         * @example
                         *
                         * var func = _.nthArg(1);
                         * func('a', 'b', 'c', 'd');
                         * // => 'b'
                         *
                         * var func = _.nthArg(-2);
                         * func('a', 'b', 'c', 'd');
                         * // => 'c'
                         */
                        function nthArg(n) {
                            n = toInteger(n);
                            return baseRest(function (args) {
                                return baseNth(args, n);
                            });
                        }
                        /**
                         * Creates a function that invokes `iteratees` with the arguments it receives
                         * and returns their results.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [iteratees=[_.identity]]
                         *  The iteratees to invoke.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.over([Math.max, Math.min]);
                         *
                         * func(1, 2, 3, 4);
                         * // => [4, 1]
                         */
                        var over = createOver(arrayMap);
                        /**
                         * Creates a function that checks if **all** of the `predicates` return
                         * truthy when invoked with the arguments it receives.
                         *
                         * Following shorthands are possible for providing predicates.
                         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [predicates=[_.identity]]
                         *  The predicates to check.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.overEvery([Boolean, isFinite]);
                         *
                         * func('1');
                         * // => true
                         *
                         * func(null);
                         * // => false
                         *
                         * func(NaN);
                         * // => false
                         */
                        var overEvery = createOver(arrayEvery);
                        /**
                         * Creates a function that checks if **any** of the `predicates` return
                         * truthy when invoked with the arguments it receives.
                         *
                         * Following shorthands are possible for providing predicates.
                         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
                         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {...(Function|Function[])} [predicates=[_.identity]]
                         *  The predicates to check.
                         * @returns {Function} Returns the new function.
                         * @example
                         *
                         * var func = _.overSome([Boolean, isFinite]);
                         *
                         * func('1');
                         * // => true
                         *
                         * func(null);
                         * // => true
                         *
                         * func(NaN);
                         * // => false
                         *
                         * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
                         * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
                         */
                        var overSome = createOver(arraySome);
                        /**
                         * Creates a function that returns the value at `path` of a given object.
                         *
                         * @static
                         * @memberOf _
                         * @since 2.4.0
                         * @category Util
                         * @param {Array|string} path The path of the property to get.
                         * @returns {Function} Returns the new accessor function.
                         * @example
                         *
                         * var objects = [
                         *   { 'a': { 'b': 2 } },
                         *   { 'a': { 'b': 1 } }
                         * ];
                         *
                         * _.map(objects, _.property('a.b'));
                         * // => [2, 1]
                         *
                         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                         * // => [1, 2]
                         */
                        function property(path) {
                            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                        }
                        /**
                         * The opposite of `_.property`; this method creates a function that returns
                         * the value at a given path of `object`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.0.0
                         * @category Util
                         * @param {Object} object The object to query.
                         * @returns {Function} Returns the new accessor function.
                         * @example
                         *
                         * var array = [0, 1, 2],
                         *     object = { 'a': array, 'b': array, 'c': array };
                         *
                         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                         * // => [2, 0]
                         *
                         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                         * // => [2, 0]
                         */
                        function propertyOf(object) {
                            return function (path) {
                                return object == null ? undefined : baseGet(object, path);
                            };
                        }
                        /**
                         * Creates an array of numbers (positive and/or negative) progressing from
                         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                         * `start` is specified without an `end` or `step`. If `end` is not specified,
                         * it's set to `start` with `start` then set to `0`.
                         *
                         * **Note:** JavaScript follows the IEEE-754 standard for resolving
                         * floating-point values which can produce unexpected results.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} [step=1] The value to increment or decrement by.
                         * @returns {Array} Returns the range of numbers.
                         * @see _.inRange, _.rangeRight
                         * @example
                         *
                         * _.range(4);
                         * // => [0, 1, 2, 3]
                         *
                         * _.range(-4);
                         * // => [0, -1, -2, -3]
                         *
                         * _.range(1, 5);
                         * // => [1, 2, 3, 4]
                         *
                         * _.range(0, 20, 5);
                         * // => [0, 5, 10, 15]
                         *
                         * _.range(0, -4, -1);
                         * // => [0, -1, -2, -3]
                         *
                         * _.range(1, 4, 0);
                         * // => [1, 1, 1]
                         *
                         * _.range(0);
                         * // => []
                         */
                        var range = createRange();
                        /**
                         * This method is like `_.range` except that it populates values in
                         * descending order.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {number} [start=0] The start of the range.
                         * @param {number} end The end of the range.
                         * @param {number} [step=1] The value to increment or decrement by.
                         * @returns {Array} Returns the range of numbers.
                         * @see _.inRange, _.range
                         * @example
                         *
                         * _.rangeRight(4);
                         * // => [3, 2, 1, 0]
                         *
                         * _.rangeRight(-4);
                         * // => [-3, -2, -1, 0]
                         *
                         * _.rangeRight(1, 5);
                         * // => [4, 3, 2, 1]
                         *
                         * _.rangeRight(0, 20, 5);
                         * // => [15, 10, 5, 0]
                         *
                         * _.rangeRight(0, -4, -1);
                         * // => [-3, -2, -1, 0]
                         *
                         * _.rangeRight(1, 4, 0);
                         * // => [1, 1, 1]
                         *
                         * _.rangeRight(0);
                         * // => []
                         */
                        var rangeRight = createRange(true);
                        /**
                         * This method returns a new empty array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {Array} Returns the new empty array.
                         * @example
                         *
                         * var arrays = _.times(2, _.stubArray);
                         *
                         * console.log(arrays);
                         * // => [[], []]
                         *
                         * console.log(arrays[0] === arrays[1]);
                         * // => false
                         */
                        function stubArray() {
                            return [];
                        }
                        /**
                         * This method returns `false`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {boolean} Returns `false`.
                         * @example
                         *
                         * _.times(2, _.stubFalse);
                         * // => [false, false]
                         */
                        function stubFalse() {
                            return false;
                        }
                        /**
                         * This method returns a new empty object.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {Object} Returns the new empty object.
                         * @example
                         *
                         * var objects = _.times(2, _.stubObject);
                         *
                         * console.log(objects);
                         * // => [{}, {}]
                         *
                         * console.log(objects[0] === objects[1]);
                         * // => false
                         */
                        function stubObject() {
                            return {};
                        }
                        /**
                         * This method returns an empty string.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {string} Returns the empty string.
                         * @example
                         *
                         * _.times(2, _.stubString);
                         * // => ['', '']
                         */
                        function stubString() {
                            return '';
                        }
                        /**
                         * This method returns `true`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.13.0
                         * @category Util
                         * @returns {boolean} Returns `true`.
                         * @example
                         *
                         * _.times(2, _.stubTrue);
                         * // => [true, true]
                         */
                        function stubTrue() {
                            return true;
                        }
                        /**
                         * Invokes the iteratee `n` times, returning an array of the results of
                         * each invocation. The iteratee is invoked with one argument; (index).
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {number} n The number of times to invoke `iteratee`.
                         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                         * @returns {Array} Returns the array of results.
                         * @example
                         *
                         * _.times(3, String);
                         * // => ['0', '1', '2']
                         *
                         *  _.times(4, _.constant(0));
                         * // => [0, 0, 0, 0]
                         */
                        function times(n, iteratee) {
                            n = toInteger(n);
                            if (n < 1 || n > MAX_SAFE_INTEGER) {
                                return [];
                            }
                            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
                            iteratee = getIteratee(iteratee);
                            n -= MAX_ARRAY_LENGTH;
                            var result = baseTimes(length, iteratee);
                            while (++index < n) {
                                iteratee(index);
                            }
                            return result;
                        }
                        /**
                         * Converts `value` to a property path array.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Util
                         * @param {*} value The value to convert.
                         * @returns {Array} Returns the new property path array.
                         * @example
                         *
                         * _.toPath('a.b.c');
                         * // => ['a', 'b', 'c']
                         *
                         * _.toPath('a[0].b.c');
                         * // => ['a', '0', 'b', 'c']
                         */
                        function toPath(value) {
                            if (isArray(value)) {
                                return arrayMap(value, toKey);
                            }
                            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                        }
                        /**
                         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Util
                         * @param {string} [prefix=''] The value to prefix the ID with.
                         * @returns {string} Returns the unique ID.
                         * @example
                         *
                         * _.uniqueId('contact_');
                         * // => 'contact_104'
                         *
                         * _.uniqueId();
                         * // => '105'
                         */
                        function uniqueId(prefix) {
                            var id = ++idCounter;
                            return toString(prefix) + id;
                        }
                        /*------------------------------------------------------------------------*/
                        /**
                         * Adds two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.4.0
                         * @category Math
                         * @param {number} augend The first number in an addition.
                         * @param {number} addend The second number in an addition.
                         * @returns {number} Returns the total.
                         * @example
                         *
                         * _.add(6, 4);
                         * // => 10
                         */
                        var add = createMathOperation(function (augend, addend) {
                            return augend + addend;
                        }, 0);
                        /**
                         * Computes `number` rounded up to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round up.
                         * @param {number} [precision=0] The precision to round up to.
                         * @returns {number} Returns the rounded up number.
                         * @example
                         *
                         * _.ceil(4.006);
                         * // => 5
                         *
                         * _.ceil(6.004, 2);
                         * // => 6.01
                         *
                         * _.ceil(6040, -2);
                         * // => 6100
                         */
                        var ceil = createRound('ceil');
                        /**
                         * Divide two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {number} dividend The first number in a division.
                         * @param {number} divisor The second number in a division.
                         * @returns {number} Returns the quotient.
                         * @example
                         *
                         * _.divide(6, 4);
                         * // => 1.5
                         */
                        var divide = createMathOperation(function (dividend, divisor) {
                            return dividend / divisor;
                        }, 1);
                        /**
                         * Computes `number` rounded down to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round down.
                         * @param {number} [precision=0] The precision to round down to.
                         * @returns {number} Returns the rounded down number.
                         * @example
                         *
                         * _.floor(4.006);
                         * // => 4
                         *
                         * _.floor(0.046, 2);
                         * // => 0.04
                         *
                         * _.floor(4060, -2);
                         * // => 4000
                         */
                        var floor = createRound('floor');
                        /**
                         * Computes the maximum value of `array`. If `array` is empty or falsey,
                         * `undefined` is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {*} Returns the maximum value.
                         * @example
                         *
                         * _.max([4, 2, 8, 6]);
                         * // => 8
                         *
                         * _.max([]);
                         * // => undefined
                         */
                        function max(array) {
                            return (array && array.length)
                                ? baseExtremum(array, identity, baseGt)
                                : undefined;
                        }
                        /**
                         * This method is like `_.max` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * the value is ranked. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {*} Returns the maximum value.
                         * @example
                         *
                         * var objects = [{ 'n': 1 }, { 'n': 2 }];
                         *
                         * _.maxBy(objects, function(o) { return o.n; });
                         * // => { 'n': 2 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.maxBy(objects, 'n');
                         * // => { 'n': 2 }
                         */
                        function maxBy(array, iteratee) {
                            return (array && array.length)
                                ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                                : undefined;
                        }
                        /**
                         * Computes the mean of the values in `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {number} Returns the mean.
                         * @example
                         *
                         * _.mean([4, 2, 8, 6]);
                         * // => 5
                         */
                        function mean(array) {
                            return baseMean(array, identity);
                        }
                        /**
                         * This method is like `_.mean` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the value to be averaged.
                         * The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the mean.
                         * @example
                         *
                         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                         *
                         * _.meanBy(objects, function(o) { return o.n; });
                         * // => 5
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.meanBy(objects, 'n');
                         * // => 5
                         */
                        function meanBy(array, iteratee) {
                            return baseMean(array, getIteratee(iteratee, 2));
                        }
                        /**
                         * Computes the minimum value of `array`. If `array` is empty or falsey,
                         * `undefined` is returned.
                         *
                         * @static
                         * @since 0.1.0
                         * @memberOf _
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {*} Returns the minimum value.
                         * @example
                         *
                         * _.min([4, 2, 8, 6]);
                         * // => 2
                         *
                         * _.min([]);
                         * // => undefined
                         */
                        function min(array) {
                            return (array && array.length)
                                ? baseExtremum(array, identity, baseLt)
                                : undefined;
                        }
                        /**
                         * This method is like `_.min` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the criterion by which
                         * the value is ranked. The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {*} Returns the minimum value.
                         * @example
                         *
                         * var objects = [{ 'n': 1 }, { 'n': 2 }];
                         *
                         * _.minBy(objects, function(o) { return o.n; });
                         * // => { 'n': 1 }
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.minBy(objects, 'n');
                         * // => { 'n': 1 }
                         */
                        function minBy(array, iteratee) {
                            return (array && array.length)
                                ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                                : undefined;
                        }
                        /**
                         * Multiply two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.7.0
                         * @category Math
                         * @param {number} multiplier The first number in a multiplication.
                         * @param {number} multiplicand The second number in a multiplication.
                         * @returns {number} Returns the product.
                         * @example
                         *
                         * _.multiply(6, 4);
                         * // => 24
                         */
                        var multiply = createMathOperation(function (multiplier, multiplicand) {
                            return multiplier * multiplicand;
                        }, 1);
                        /**
                         * Computes `number` rounded to `precision`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.10.0
                         * @category Math
                         * @param {number} number The number to round.
                         * @param {number} [precision=0] The precision to round to.
                         * @returns {number} Returns the rounded number.
                         * @example
                         *
                         * _.round(4.006);
                         * // => 4
                         *
                         * _.round(4.006, 2);
                         * // => 4.01
                         *
                         * _.round(4060, -2);
                         * // => 4100
                         */
                        var round = createRound('round');
                        /**
                         * Subtract two numbers.
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {number} minuend The first number in a subtraction.
                         * @param {number} subtrahend The second number in a subtraction.
                         * @returns {number} Returns the difference.
                         * @example
                         *
                         * _.subtract(6, 4);
                         * // => 2
                         */
                        var subtract = createMathOperation(function (minuend, subtrahend) {
                            return minuend - subtrahend;
                        }, 0);
                        /**
                         * Computes the sum of the values in `array`.
                         *
                         * @static
                         * @memberOf _
                         * @since 3.4.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @returns {number} Returns the sum.
                         * @example
                         *
                         * _.sum([4, 2, 8, 6]);
                         * // => 20
                         */
                        function sum(array) {
                            return (array && array.length)
                                ? baseSum(array, identity)
                                : 0;
                        }
                        /**
                         * This method is like `_.sum` except that it accepts `iteratee` which is
                         * invoked for each element in `array` to generate the value to be summed.
                         * The iteratee is invoked with one argument: (value).
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Math
                         * @param {Array} array The array to iterate over.
                         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                         * @returns {number} Returns the sum.
                         * @example
                         *
                         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                         *
                         * _.sumBy(objects, function(o) { return o.n; });
                         * // => 20
                         *
                         * // The `_.property` iteratee shorthand.
                         * _.sumBy(objects, 'n');
                         * // => 20
                         */
                        function sumBy(array, iteratee) {
                            return (array && array.length)
                                ? baseSum(array, getIteratee(iteratee, 2))
                                : 0;
                        }
                        /*------------------------------------------------------------------------*/
                        // Add methods that return wrapped values in chain sequences.
                        lodash.after = after;
                        lodash.ary = ary;
                        lodash.assign = assign;
                        lodash.assignIn = assignIn;
                        lodash.assignInWith = assignInWith;
                        lodash.assignWith = assignWith;
                        lodash.at = at;
                        lodash.before = before;
                        lodash.bind = bind;
                        lodash.bindAll = bindAll;
                        lodash.bindKey = bindKey;
                        lodash.castArray = castArray;
                        lodash.chain = chain;
                        lodash.chunk = chunk;
                        lodash.compact = compact;
                        lodash.concat = concat;
                        lodash.cond = cond;
                        lodash.conforms = conforms;
                        lodash.constant = constant;
                        lodash.countBy = countBy;
                        lodash.create = create;
                        lodash.curry = curry;
                        lodash.curryRight = curryRight;
                        lodash.debounce = debounce;
                        lodash.defaults = defaults;
                        lodash.defaultsDeep = defaultsDeep;
                        lodash.defer = defer;
                        lodash.delay = delay;
                        lodash.difference = difference;
                        lodash.differenceBy = differenceBy;
                        lodash.differenceWith = differenceWith;
                        lodash.drop = drop;
                        lodash.dropRight = dropRight;
                        lodash.dropRightWhile = dropRightWhile;
                        lodash.dropWhile = dropWhile;
                        lodash.fill = fill;
                        lodash.filter = filter;
                        lodash.flatMap = flatMap;
                        lodash.flatMapDeep = flatMapDeep;
                        lodash.flatMapDepth = flatMapDepth;
                        lodash.flatten = flatten;
                        lodash.flattenDeep = flattenDeep;
                        lodash.flattenDepth = flattenDepth;
                        lodash.flip = flip;
                        lodash.flow = flow;
                        lodash.flowRight = flowRight;
                        lodash.fromPairs = fromPairs;
                        lodash.functions = functions;
                        lodash.functionsIn = functionsIn;
                        lodash.groupBy = groupBy;
                        lodash.initial = initial;
                        lodash.intersection = intersection;
                        lodash.intersectionBy = intersectionBy;
                        lodash.intersectionWith = intersectionWith;
                        lodash.invert = invert;
                        lodash.invertBy = invertBy;
                        lodash.invokeMap = invokeMap;
                        lodash.iteratee = iteratee;
                        lodash.keyBy = keyBy;
                        lodash.keys = keys;
                        lodash.keysIn = keysIn;
                        lodash.map = map;
                        lodash.mapKeys = mapKeys;
                        lodash.mapValues = mapValues;
                        lodash.matches = matches;
                        lodash.matchesProperty = matchesProperty;
                        lodash.memoize = memoize;
                        lodash.merge = merge;
                        lodash.mergeWith = mergeWith;
                        lodash.method = method;
                        lodash.methodOf = methodOf;
                        lodash.mixin = mixin;
                        lodash.negate = negate;
                        lodash.nthArg = nthArg;
                        lodash.omit = omit;
                        lodash.omitBy = omitBy;
                        lodash.once = once;
                        lodash.orderBy = orderBy;
                        lodash.over = over;
                        lodash.overArgs = overArgs;
                        lodash.overEvery = overEvery;
                        lodash.overSome = overSome;
                        lodash.partial = partial;
                        lodash.partialRight = partialRight;
                        lodash.partition = partition;
                        lodash.pick = pick;
                        lodash.pickBy = pickBy;
                        lodash.property = property;
                        lodash.propertyOf = propertyOf;
                        lodash.pull = pull;
                        lodash.pullAll = pullAll;
                        lodash.pullAllBy = pullAllBy;
                        lodash.pullAllWith = pullAllWith;
                        lodash.pullAt = pullAt;
                        lodash.range = range;
                        lodash.rangeRight = rangeRight;
                        lodash.rearg = rearg;
                        lodash.reject = reject;
                        lodash.remove = remove;
                        lodash.rest = rest;
                        lodash.reverse = reverse;
                        lodash.sampleSize = sampleSize;
                        lodash.set = set;
                        lodash.setWith = setWith;
                        lodash.shuffle = shuffle;
                        lodash.slice = slice;
                        lodash.sortBy = sortBy;
                        lodash.sortedUniq = sortedUniq;
                        lodash.sortedUniqBy = sortedUniqBy;
                        lodash.split = split;
                        lodash.spread = spread;
                        lodash.tail = tail;
                        lodash.take = take;
                        lodash.takeRight = takeRight;
                        lodash.takeRightWhile = takeRightWhile;
                        lodash.takeWhile = takeWhile;
                        lodash.tap = tap;
                        lodash.throttle = throttle;
                        lodash.thru = thru;
                        lodash.toArray = toArray;
                        lodash.toPairs = toPairs;
                        lodash.toPairsIn = toPairsIn;
                        lodash.toPath = toPath;
                        lodash.toPlainObject = toPlainObject;
                        lodash.transform = transform;
                        lodash.unary = unary;
                        lodash.union = union;
                        lodash.unionBy = unionBy;
                        lodash.unionWith = unionWith;
                        lodash.uniq = uniq;
                        lodash.uniqBy = uniqBy;
                        lodash.uniqWith = uniqWith;
                        lodash.unset = unset;
                        lodash.unzip = unzip;
                        lodash.unzipWith = unzipWith;
                        lodash.update = update;
                        lodash.updateWith = updateWith;
                        lodash.values = values;
                        lodash.valuesIn = valuesIn;
                        lodash.without = without;
                        lodash.words = words;
                        lodash.wrap = wrap;
                        lodash.xor = xor;
                        lodash.xorBy = xorBy;
                        lodash.xorWith = xorWith;
                        lodash.zip = zip;
                        lodash.zipObject = zipObject;
                        lodash.zipObjectDeep = zipObjectDeep;
                        lodash.zipWith = zipWith;
                        // Add aliases.
                        lodash.entries = toPairs;
                        lodash.entriesIn = toPairsIn;
                        lodash.extend = assignIn;
                        lodash.extendWith = assignInWith;
                        // Add methods to `lodash.prototype`.
                        mixin(lodash, lodash);
                        /*------------------------------------------------------------------------*/
                        // Add methods that return unwrapped values in chain sequences.
                        lodash.add = add;
                        lodash.attempt = attempt;
                        lodash.camelCase = camelCase;
                        lodash.capitalize = capitalize;
                        lodash.ceil = ceil;
                        lodash.clamp = clamp;
                        lodash.clone = clone;
                        lodash.cloneDeep = cloneDeep;
                        lodash.cloneDeepWith = cloneDeepWith;
                        lodash.cloneWith = cloneWith;
                        lodash.conformsTo = conformsTo;
                        lodash.deburr = deburr;
                        lodash.defaultTo = defaultTo;
                        lodash.divide = divide;
                        lodash.endsWith = endsWith;
                        lodash.eq = eq;
                        lodash.escape = escape;
                        lodash.escapeRegExp = escapeRegExp;
                        lodash.every = every;
                        lodash.find = find;
                        lodash.findIndex = findIndex;
                        lodash.findKey = findKey;
                        lodash.findLast = findLast;
                        lodash.findLastIndex = findLastIndex;
                        lodash.findLastKey = findLastKey;
                        lodash.floor = floor;
                        lodash.forEach = forEach;
                        lodash.forEachRight = forEachRight;
                        lodash.forIn = forIn;
                        lodash.forInRight = forInRight;
                        lodash.forOwn = forOwn;
                        lodash.forOwnRight = forOwnRight;
                        lodash.get = get;
                        lodash.gt = gt;
                        lodash.gte = gte;
                        lodash.has = has;
                        lodash.hasIn = hasIn;
                        lodash.head = head;
                        lodash.identity = identity;
                        lodash.includes = includes;
                        lodash.indexOf = indexOf;
                        lodash.inRange = inRange;
                        lodash.invoke = invoke;
                        lodash.isArguments = isArguments;
                        lodash.isArray = isArray;
                        lodash.isArrayBuffer = isArrayBuffer;
                        lodash.isArrayLike = isArrayLike;
                        lodash.isArrayLikeObject = isArrayLikeObject;
                        lodash.isBoolean = isBoolean;
                        lodash.isBuffer = isBuffer;
                        lodash.isDate = isDate;
                        lodash.isElement = isElement;
                        lodash.isEmpty = isEmpty;
                        lodash.isEqual = isEqual;
                        lodash.isEqualWith = isEqualWith;
                        lodash.isError = isError;
                        lodash.isFinite = isFinite;
                        lodash.isFunction = isFunction;
                        lodash.isInteger = isInteger;
                        lodash.isLength = isLength;
                        lodash.isMap = isMap;
                        lodash.isMatch = isMatch;
                        lodash.isMatchWith = isMatchWith;
                        lodash.isNaN = isNaN;
                        lodash.isNative = isNative;
                        lodash.isNil = isNil;
                        lodash.isNull = isNull;
                        lodash.isNumber = isNumber;
                        lodash.isObject = isObject;
                        lodash.isObjectLike = isObjectLike;
                        lodash.isPlainObject = isPlainObject;
                        lodash.isRegExp = isRegExp;
                        lodash.isSafeInteger = isSafeInteger;
                        lodash.isSet = isSet;
                        lodash.isString = isString;
                        lodash.isSymbol = isSymbol;
                        lodash.isTypedArray = isTypedArray;
                        lodash.isUndefined = isUndefined;
                        lodash.isWeakMap = isWeakMap;
                        lodash.isWeakSet = isWeakSet;
                        lodash.join = join;
                        lodash.kebabCase = kebabCase;
                        lodash.last = last;
                        lodash.lastIndexOf = lastIndexOf;
                        lodash.lowerCase = lowerCase;
                        lodash.lowerFirst = lowerFirst;
                        lodash.lt = lt;
                        lodash.lte = lte;
                        lodash.max = max;
                        lodash.maxBy = maxBy;
                        lodash.mean = mean;
                        lodash.meanBy = meanBy;
                        lodash.min = min;
                        lodash.minBy = minBy;
                        lodash.stubArray = stubArray;
                        lodash.stubFalse = stubFalse;
                        lodash.stubObject = stubObject;
                        lodash.stubString = stubString;
                        lodash.stubTrue = stubTrue;
                        lodash.multiply = multiply;
                        lodash.nth = nth;
                        lodash.noConflict = noConflict;
                        lodash.noop = noop;
                        lodash.now = now;
                        lodash.pad = pad;
                        lodash.padEnd = padEnd;
                        lodash.padStart = padStart;
                        lodash.parseInt = parseInt;
                        lodash.random = random;
                        lodash.reduce = reduce;
                        lodash.reduceRight = reduceRight;
                        lodash.repeat = repeat;
                        lodash.replace = replace;
                        lodash.result = result;
                        lodash.round = round;
                        lodash.runInContext = runInContext;
                        lodash.sample = sample;
                        lodash.size = size;
                        lodash.snakeCase = snakeCase;
                        lodash.some = some;
                        lodash.sortedIndex = sortedIndex;
                        lodash.sortedIndexBy = sortedIndexBy;
                        lodash.sortedIndexOf = sortedIndexOf;
                        lodash.sortedLastIndex = sortedLastIndex;
                        lodash.sortedLastIndexBy = sortedLastIndexBy;
                        lodash.sortedLastIndexOf = sortedLastIndexOf;
                        lodash.startCase = startCase;
                        lodash.startsWith = startsWith;
                        lodash.subtract = subtract;
                        lodash.sum = sum;
                        lodash.sumBy = sumBy;
                        lodash.template = template;
                        lodash.times = times;
                        lodash.toFinite = toFinite;
                        lodash.toInteger = toInteger;
                        lodash.toLength = toLength;
                        lodash.toLower = toLower;
                        lodash.toNumber = toNumber;
                        lodash.toSafeInteger = toSafeInteger;
                        lodash.toString = toString;
                        lodash.toUpper = toUpper;
                        lodash.trim = trim;
                        lodash.trimEnd = trimEnd;
                        lodash.trimStart = trimStart;
                        lodash.truncate = truncate;
                        lodash.unescape = unescape;
                        lodash.uniqueId = uniqueId;
                        lodash.upperCase = upperCase;
                        lodash.upperFirst = upperFirst;
                        // Add aliases.
                        lodash.each = forEach;
                        lodash.eachRight = forEachRight;
                        lodash.first = head;
                        mixin(lodash, (function () {
                            var source = {};
                            baseForOwn(lodash, function (func, methodName) {
                                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                    source[methodName] = func;
                                }
                            });
                            return source;
                        }()), { 'chain': false });
                        /*------------------------------------------------------------------------*/
                        /**
                         * The semantic version number.
                         *
                         * @static
                         * @memberOf _
                         * @type {string}
                         */
                        lodash.VERSION = VERSION;
                        // Assign default placeholders.
                        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                            lodash[methodName].placeholder = lodash;
                        });
                        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                        arrayEach(['drop', 'take'], function (methodName, index) {
                            LazyWrapper.prototype[methodName] = function (n) {
                                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                                var result = (this.__filtered__ && !index)
                                    ? new LazyWrapper(this)
                                    : this.clone();
                                if (result.__filtered__) {
                                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                                }
                                else {
                                    result.__views__.push({
                                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                                    });
                                }
                                return result;
                            };
                            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                                return this.reverse()[methodName](n).reverse();
                            };
                        });
                        // Add `LazyWrapper` methods that accept an `iteratee` value.
                        arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
                            LazyWrapper.prototype[methodName] = function (iteratee) {
                                var result = this.clone();
                                result.__iteratees__.push({
                                    'iteratee': getIteratee(iteratee, 3),
                                    'type': type
                                });
                                result.__filtered__ = result.__filtered__ || isFilter;
                                return result;
                            };
                        });
                        // Add `LazyWrapper` methods for `_.head` and `_.last`.
                        arrayEach(['head', 'last'], function (methodName, index) {
                            var takeName = 'take' + (index ? 'Right' : '');
                            LazyWrapper.prototype[methodName] = function () {
                                return this[takeName](1).value()[0];
                            };
                        });
                        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                        arrayEach(['initial', 'tail'], function (methodName, index) {
                            var dropName = 'drop' + (index ? '' : 'Right');
                            LazyWrapper.prototype[methodName] = function () {
                                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                            };
                        });
                        LazyWrapper.prototype.compact = function () {
                            return this.filter(identity);
                        };
                        LazyWrapper.prototype.find = function (predicate) {
                            return this.filter(predicate).head();
                        };
                        LazyWrapper.prototype.findLast = function (predicate) {
                            return this.reverse().find(predicate);
                        };
                        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                            if (typeof path == 'function') {
                                return new LazyWrapper(this);
                            }
                            return this.map(function (value) {
                                return baseInvoke(value, path, args);
                            });
                        });
                        LazyWrapper.prototype.reject = function (predicate) {
                            return this.filter(negate(getIteratee(predicate)));
                        };
                        LazyWrapper.prototype.slice = function (start, end) {
                            start = toInteger(start);
                            var result = this;
                            if (result.__filtered__ && (start > 0 || end < 0)) {
                                return new LazyWrapper(result);
                            }
                            if (start < 0) {
                                result = result.takeRight(-start);
                            }
                            else if (start) {
                                result = result.drop(start);
                            }
                            if (end !== undefined) {
                                end = toInteger(end);
                                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                            }
                            return result;
                        };
                        LazyWrapper.prototype.takeRightWhile = function (predicate) {
                            return this.reverse().takeWhile(predicate).reverse();
                        };
                        LazyWrapper.prototype.toArray = function () {
                            return this.take(MAX_ARRAY_LENGTH);
                        };
                        // Add `LazyWrapper` methods to `lodash.prototype`.
                        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
                            if (!lodashFunc) {
                                return;
                            }
                            lodash.prototype[methodName] = function () {
                                var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                                var interceptor = function (value) {
                                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                    return (isTaker && chainAll) ? result[0] : result;
                                };
                                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                                    // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                    isLazy = useLazy = false;
                                }
                                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                                if (!retUnwrapped && useLazy) {
                                    value = onlyLazy ? value : new LazyWrapper(this);
                                    var result = func.apply(value, args);
                                    result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                                    return new LodashWrapper(result, chainAll);
                                }
                                if (isUnwrapped && onlyLazy) {
                                    return func.apply(this, args);
                                }
                                result = this.thru(interceptor);
                                return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                            };
                        });
                        // Add `Array` methods to `lodash.prototype`.
                        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
                            lodash.prototype[methodName] = function () {
                                var args = arguments;
                                if (retUnwrapped && !this.__chain__) {
                                    var value = this.value();
                                    return func.apply(isArray(value) ? value : [], args);
                                }
                                return this[chainName](function (value) {
                                    return func.apply(isArray(value) ? value : [], args);
                                });
                            };
                        });
                        // Map minified method names to their real names.
                        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                            var lodashFunc = lodash[methodName];
                            if (lodashFunc) {
                                var key = lodashFunc.name + '';
                                if (!hasOwnProperty.call(realNames, key)) {
                                    realNames[key] = [];
                                }
                                realNames[key].push({ 'name': methodName, 'func': lodashFunc });
                            }
                        });
                        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                                'name': 'wrapper',
                                'func': undefined
                            }];
                        // Add methods to `LazyWrapper`.
                        LazyWrapper.prototype.clone = lazyClone;
                        LazyWrapper.prototype.reverse = lazyReverse;
                        LazyWrapper.prototype.value = lazyValue;
                        // Add chain sequence methods to the `lodash` wrapper.
                        lodash.prototype.at = wrapperAt;
                        lodash.prototype.chain = wrapperChain;
                        lodash.prototype.commit = wrapperCommit;
                        lodash.prototype.next = wrapperNext;
                        lodash.prototype.plant = wrapperPlant;
                        lodash.prototype.reverse = wrapperReverse;
                        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
                        // Add lazy aliases.
                        lodash.prototype.first = lodash.prototype.head;
                        if (symIterator) {
                            lodash.prototype[symIterator] = wrapperToIterator;
                        }
                        return lodash;
                    });
                    /*--------------------------------------------------------------------------*/
                    // Export lodash.
                    var _ = runInContext();
                    // Some AMD build optimizers, like r.js, check for condition patterns like:
                    if (true) {
                        // Expose Lodash on the global object to prevent errors when Lodash is
                        // loaded by a script tag in the presence of an AMD loader.
                        // See http://requirejs.org/docs/errors.html#mismatch for more details.
                        // Use `_.noConflict` to remove Lodash from the global object.
                        root._ = _;
                        // Define as an anonymous module so, through path mapping, it can be
                        // referenced as the "underscore" module.
                        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                            return _;
                        }).call(exports, __webpack_require__, exports, module),
                            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    }
                    // Check for `exports` after `define` in case a build optimizer adds it.
                    else { }
                }.call(this));
                /***/ 
            }),
            /***/ "./src/constants/variables.constants.ts": 
            /*!**********************************************!*\
              !*** ./src/constants/variables.constants.ts ***!
              \**********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "$rootScope": function () { return ( /* binding */$rootScope); },
                    /* harmony export */ "CONSTANTS": function () { return ( /* binding */CONSTANTS); },
                    /* harmony export */ "DB_CONSTANTS": function () { return ( /* binding */DB_CONSTANTS); },
                    /* harmony export */ "SWAGGER_CONSTANTS": function () { return ( /* binding */SWAGGER_CONSTANTS); },
                    /* harmony export */ "VARIABLE_CONSTANTS": function () { return ( /* binding */VARIABLE_CONSTANTS); },
                    /* harmony export */ "VARIABLE_URLS": function () { return ( /* binding */VARIABLE_URLS); },
                    /* harmony export */ "WS_CONSTANTS": function () { return ( /* binding */WS_CONSTANTS); }
                    /* harmony export */ 
                });
                // ToDo - variable seperation
                var CONSTANTS = {
                    // hasCordova: window['cordova'] !== undefined,
                    // isWaveLens: window['WaveLens'] !== undefined,
                    isStudioMode: false,
                    isRunMode: true,
                    XSRF_COOKIE_NAME: 'wm_xsrf_token',
                    DEFAULT_TIMER_DELAY: 500,
                    WIDGET_DOESNT_EXIST: 'The widget you\'re trying to navigate to doesn\'t exist on this page'
                };
                var VARIABLE_CONSTANTS = {
                    CATEGORY: {
                        MODEL: 'wm.Variable',
                        LIVE: 'wm.LiveVariable',
                        CRUD: 'wm.CrudVariable',
                        SERVICE: 'wm.ServiceVariable',
                        WEBSOCKET: 'wm.WebSocketVariable',
                        NAVIGATION: 'wm.NavigationVariable',
                        NOTIFICATION: 'wm.NotificationVariable',
                        TIMER: 'wm.TimerVariable',
                        LOGIN: 'wm.LoginVariable',
                        LOGOUT: 'wm.LogoutVariable',
                        DEVICE: 'wm.DeviceVariable'
                    },
                    EVENTS: ['onBefore',
                        'onBeforeUpdate',
                        'onResult',
                        'onBeforeOpen',
                        'onOpen',
                        'onBeforeMessageSend',
                        'onMessageReceive',
                        'onProgress',
                        'onError',
                        'onBeforeDatasetReady',
                        'onCanUpdate',
                        'onClick',
                        'onHide',
                        'onOk',
                        'onCancel',
                        'onBeforeClose',
                        'onClose',
                        'onTimerFire',
                        'onSuccess',
                        'onOnline',
                        'onOffline'],
                    EVENT: {
                        'CAN_UPDATE': 'onCanUpdate',
                        'BEFORE': 'onBefore',
                        'BEFORE_UPDATE': 'onBeforeUpdate',
                        'PREPARE_SETDATA': 'onBeforeDatasetReady',
                        'RESULT': 'onResult',
                        'ERROR': 'onError',
                        'ABORT': 'onAbort',
                        'PROGRESS': 'onProgress',
                        'CLICK': 'onClick',
                        'HIDE': 'onHide',
                        'OK': 'onOk',
                        'CANCEL': 'onCancel',
                        'CLOSE': 'onClose',
                        'TIMER_FIRE': 'onTimerFire',
                        'SUCCESS': 'onSuccess',
                        'BEFORE_OPEN': 'onBeforeOpen',
                        'OPEN': 'onOpen',
                        'BEFORE_SEND': 'onBeforeMessageSend',
                        'MESSAGE_RECEIVE': 'onMessageReceive',
                        'BEFORE_CLOSE': 'onBeforeClose'
                    },
                    OWNER: {
                        'APP': 'App',
                        'PAGE': 'Page'
                    },
                    REST_SUPPORTED_SERVICES: ['JavaService', 'SoapService', 'FeedService', 'RestService', 'SecurityServiceType', 'DataService', 'WebSocketService', 'OpenAPIService'],
                    PAGINATION_PARAMS: ['page', 'size', 'sort'],
                    REST_SERVICE: {
                        'BASE_PATH_KEY': 'x-WM-BASE_PATH',
                        'RELATIVE_PATH_KEY': 'x-WM-RELATIVE_PATH',
                        'OAUTH_PROVIDER_KEY': 'x-WM-PROVIDER_ID',
                        'AUTH_HDR_KEY': 'Authorization',
                        'SECURITY_DEFN': {
                            'BASIC': 'basic',
                            'OAUTH2': 'oauth2',
                        },
                        'AUTH_TYPE': {
                            'BASIC': 'BASIC',
                            'OAUTH': 'OAUTH2',
                            'NONE': 'NONE',
                        },
                        'CONTENT_TYPE_KEY': 'x-WM-CONTENT_TYPE',
                        'ACCESSTOKEN_PLACEHOLDER': {
                            'LEFT': '',
                            'RIGHT': '.access_token'
                        },
                        ERR_TYPE: {
                            NO_ACCESSTOKEN: 'missing_accesstoken',
                            NO_CREDENTIALS: 'no_credentials',
                            METADATA_MISSING: 'metadata_missing',
                            CRUD_OPERATION_MISSING: 'crud_operation_missing',
                            USER_UNAUTHORISED: 'user_unauthorised',
                            REQUIRED_FIELD_MISSING: 'required_field_missing',
                        },
                        ERR_MSG: {
                            NO_ACCESSTOKEN: 'Access token missing',
                            NO_CREDENTIALS: 'No credentials present',
                            METADATA_MISSING: 'Metadata missing for "$variable"',
                            USER_UNAUTHORISED: 'Unauthorized User',
                            CRUD_OPERATION_MISSING: 'Operation "$operation" not allowed for "$variable"',
                            REQUIRED_FIELD_MISSING: 'Required field(s) missing: "${0}"'
                        },
                        UNCLOAKED_HEADERS: ['CONTENT-TYPE', 'ACCEPT', 'CONTENT-LENGTH', 'ACCEPT-ENCODING', 'ACCEPT-LANGUAGE'],
                        PREFIX: {
                            AUTH_HDR_VAL: {
                                BASIC: 'Basic',
                                OAUTH: 'Bearer'
                            },
                            CLOAK_HEADER_KEY: 'X-WM-'
                        }
                    },
                    SERVICE_TYPE: {
                        JAVA: 'JavaService',
                        REST: 'RestService',
                        SOAP: 'SoapService',
                        FEED: 'FeedService',
                        DATA: 'DataService',
                        SECURITY: 'SecurityServiceType',
                        WEBSOCKET: 'WebSocketService',
                        OPENAPI: 'OpenAPIService'
                    },
                    CONTROLLER_TYPE: {
                        QUERY: 'QueryExecution',
                        PROCEDURE: 'ProcedureExecution'
                    },
                    HTTP_STATUS_CODE: {
                        CORS_FAILURE: -1,
                        UNAUTHORIZED: 401,
                        FORBIDDEN: 403
                    },
                    EXPORT_TYPES_MAP: {
                        'EXCEL': '.xlsx',
                        'CSV': '.csv'
                    },
                    DEFAULT_VAR: {
                        'NOTIFICATION': 'appNotification'
                    }
                };
                var WS_CONSTANTS = {
                    NON_BODY_HTTP_METHODS: ['GET', 'HEAD'],
                    CONTENT_TYPES: {
                        FORM_URL_ENCODED: 'application/x-www-form-urlencoded',
                        MULTIPART_FORMDATA: 'multipart/form-data',
                        OCTET_STREAM: 'application/octet-stream'
                    }
                };
                var DB_CONSTANTS = {
                    'DATABASE_MATCH_MODES': {
                        'like': 'LIKE',
                        'start': 'STARTING_WITH',
                        'startignorecase': 'STARTING_WITH_IGNORECASE',
                        'end': 'ENDING_WITH',
                        'endignorecase': 'ENDING_WITH_IGNORECASE',
                        'anywhere': 'CONTAINING',
                        'anywhereignorecase': 'CONTAINING_IGNORECASE',
                        'nowhere': 'DOES_NOT_CONTAIN',
                        'nowhereignorecase': 'DOES_NOT_CONTAIN_IGNORECASE',
                        'exact': 'EQUALS',
                        'exactignorecase': 'EQUALS_IGNORECASE',
                        'notequals': 'NOT_EQUALS',
                        "notequalsignorecase": "NOT_EQUALS_IGNORECASE",
                        'between': 'BETWEEN',
                        'in': 'IN',
                        "notin": "NOTIN",
                        'lessthan': 'LESS_THAN',
                        'lessthanequal': 'LESS_THAN_OR_EQUALS',
                        'greaterthan': 'GREATER_THAN',
                        'greaterthanequal': 'GREATER_THAN_OR_EQUALS',
                        'null': 'NULL',
                        'isnotnull': 'IS_NOT_NULL',
                        'empty': 'EMPTY',
                        'isnotempty': 'IS_NOT_EMPTY',
                        'nullorempty': 'NULL_OR_EMPTY'
                    },
                    'DATABASE_EMPTY_MATCH_MODES': ['NULL', 'IS_NOT_NULL', 'EMPTY', 'IS_NOT_EMPTY', 'NULL_OR_EMPTY'],
                    'DATABASE_RANGE_MATCH_MODES': ['IN', 'NOTIN', 'BETWEEN', 'LESS_THAN', 'LESS_THAN_OR_EQUALS', 'GREATER_THAN', 'GREATER_THAN_OR_EQUALS', 'NOT_EQUALS'],
                    'DATABASE_NULL_EMPTY_MATCH': {
                        'NULL': 'NULL',
                        'IS_NOT_NULL': 'IS_NOT_NULL',
                        'EMPTY': 'NULL',
                        'IS_NOT_EMPTY': 'IS_NOT_NULL',
                        'NULL_OR_EMPTY': 'NULL'
                    },
                    'DATABASE_MATCH_MODES_WITH_QUERY': {
                        'LIKE': '${0} like ${1}',
                        'STARTING_WITH': '${0} like ${1}',
                        'STARTING_WITH_IGNORECASE': '${0} like ${1}',
                        'ENDING_WITH': '${0} like ${1}',
                        'ENDING_WITH_IGNORECASE': '${0} like ${1}',
                        'CONTAINING': '${0} like ${1}',
                        'CONTAINING_IGNORECASE': '${0} like ${1}',
                        'DOES_NOT_CONTAIN': '${0} not like ${1}',
                        'DOES_NOT_CONTAIN_IGNORECASE': '${0} not like ${1}',
                        'EQUALS': '${0}=${1}',
                        'EQUALS_IGNORECASE': '${0}=${1}',
                        'NOT_EQUALS': '${0}!=${1}',
                        "NOT_EQUALS_IGNORECASE": "${0}!=${1}",
                        'BETWEEN': '${0} between ${1}',
                        'IN': '${0} in ${1}',
                        'NOTIN': "${0} not in ${1}",
                        'LESS_THAN': '${0}<${1}',
                        'LESS_THAN_OR_EQUALS': '${0}<=${1}',
                        'GREATER_THAN': '${0}>${1}',
                        'GREATER_THAN_OR_EQUALS': '${0}>=${1}',
                        'NULL': '${0} is null',
                        'IS_NOT_NULL': '${0} is not null',
                        'EMPTY': '${0}=\'\'',
                        'IS_NOT_EMPTY': '${0}<>\'\'',
                        'NULL_OR_EMPTY': '${0} is null or ${0}=\'\''
                    },
                    'DATABASE_STRING_MODES': ['LIKE', 'STARTING_WITH', 'STARTING_WITH_IGNORECASE', 'ENDING_WITH', 'ENDING_WITH_IGNORECASE', 'CONTAINING', 'CONTAINING_IGNORECASE', 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_IGNORECASE', 'EQUALS', 'EQUALS_IGNORECASE', 'NOT_EQUALS', "NOT_EQUALS_IGNORECASE"]
                };
                var SWAGGER_CONSTANTS = {
                    WM_DATA_JSON: 'wm_data_json',
                    WM_HTTP_JSON: 'wm_httpRequestDetails'
                };
                var VARIABLE_URLS = {
                    DATABASE: {
                        searchTableData: {
                            url: '/:service/:dataModelName/:entityName/search?page=:page&size=:size&:sort',
                            method: 'POST'
                        },
                        searchTableDataWithQuery: {
                            url: '/:service/:dataModelName/:entityName/filter?page=:page&size=:size&:sort',
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        },
                        readTableData: {
                            url: '/:service/:dataModelName/:entityName?page=:page&size=:size&:sort',
                            method: 'GET'
                        },
                        insertTableData: {
                            url: '/:service/:dataModelName/:entityName',
                            method: 'POST'
                        },
                        insertMultiPartTableData: {
                            url: '/:service/:dataModelName/:entityName',
                            method: 'POST',
                            headers: {}
                            // ,transformRequest: WM.identity
                        },
                        updateTableData: {
                            url: '/:service/:dataModelName/:entityName/:id',
                            method: 'PUT'
                        },
                        updateMultiPartTableData: {
                            url: '/:service/:dataModelName/:entityName/:id',
                            method: 'POST',
                            headers: {}
                            // ,transformRequest: WM.identity
                        },
                        deleteTableData: {
                            url: '/:service/:dataModelName/:entityName/:id',
                            method: 'DELETE'
                        },
                        updateCompositeTableData: {
                            url: '/:service/:dataModelName/:entityName/composite-id?:id',
                            method: 'PUT'
                        },
                        periodUpdateCompositeTableData: {
                            url: '/:service/:dataModelName/:entityName/composite-id/periods?:id',
                            method: 'PUT'
                        },
                        updateMultiPartCompositeTableData: {
                            url: '/:service/:dataModelName/:entityName/composite-id?:id',
                            method: 'POST',
                            headers: {}
                            // , transformRequest: WM.identity
                        },
                        deleteCompositeTableData: {
                            url: '/:service/:dataModelName/:entityName/composite-id?:id',
                            method: 'DELETE'
                        },
                        periodDeleteCompositeTableData: {
                            url: '/:service/:dataModelName/:entityName/composite-id/periods?:id',
                            method: 'DELETE'
                        },
                        getDistinctDataByFields: {
                            url: '/:service/:dataModelName/:entityName/aggregations?page=:page&size=:size&:sort',
                            method: 'POST'
                        },
                        exportTableData: {
                            url: '/services/:dataModelName/:entityName/export?:sort',
                            method: 'POST'
                        },
                        readTableRelatedData: {
                            url: '/:service/:dataModelName/:entityName/:id/:relatedFieldName?page=:page&size=:size&:sort',
                            method: 'GET'
                        },
                        executeNamedQuery: {
                            url: '/:service/:dataModelName/queryExecutor/queries/:queryName?page=:page&size=:size&:queryParams',
                            method: 'GET'
                        },
                        executeCustomQuery: {
                            url: '/:service/:dataModelName/queries/execute?page=:page&size=:size',
                            method: 'POST'
                        },
                        executeAggregateQuery: {
                            url: '/services/:dataModelName/:entityName/aggregations?page=:page&size=:size&sort=:sort',
                            method: 'POST'
                        },
                        executeNamedProcedure: {
                            url: '/:service/:dataModelName/procedureExecutor/procedure/execute/:procedureName?page=:page&size=:size&:procedureParams',
                            method: 'GET'
                        },
                        countTableDataWithQuery: {
                            url: '/:service/:dataModelName/:entityName/count?:queryParams',
                            method: 'GET'
                        }
                    },
                    oauthConfiguration: {
                        getAuthorizationUrl: {
                            url: 'services/oauth2/:providerId/authorizationUrl',
                            method: 'GET'
                        }
                    }
                };
                var $rootScope = {
                    project: {
                        deployedUrl: './',
                        id: 'temp_id'
                    },
                    projectName: 'test_project_name',
                    isApplicationType: true
                };
                /***/ 
            }),
            /***/ "./src/factory/variable-manager.factory.ts": 
            /*!*************************************************!*\
              !*** ./src/factory/variable-manager.factory.ts ***!
              \*************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "VariableManagerFactory": function () { return ( /* binding */VariableManagerFactory); }
                    /* harmony export */ 
                });
                /* harmony import */ var _manager_variable_service_variable_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../manager/variable/service-variable.manager */ "./src/manager/variable/service-variable.manager.ts");
                /* harmony import */ var _manager_variable_model_variable_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../manager/variable/model-variable.manager */ "./src/manager/variable/model-variable.manager.ts");
                /* harmony import */ var _manager_variable_live_variable_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../manager/variable/live-variable.manager */ "./src/manager/variable/live-variable.manager.ts");
                /* harmony import */ var _manager_variable_crud_variable_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../manager/variable/crud-variable.manager */ "./src/manager/variable/crud-variable.manager.ts");
                /* harmony import */ var _manager_variable_base_variable_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../manager/variable/base-variable.manager */ "./src/manager/variable/base-variable.manager.ts");
                /* harmony import */ var _manager_action_timer_action_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../manager/action/timer-action.manager */ "./src/manager/action/timer-action.manager.ts");
                var managerMap = new Map(), typeToManagerMap = {
                    'Variable': _manager_variable_base_variable_manager__WEBPACK_IMPORTED_MODULE_4__.BaseVariableManager,
                    'wm.Variable': _manager_variable_model_variable_manager__WEBPACK_IMPORTED_MODULE_1__.ModelVariableManager,
                    'wm.ServiceVariable': _manager_variable_service_variable_manager__WEBPACK_IMPORTED_MODULE_0__.ServiceVariableManager,
                    'wm.LiveVariable': _manager_variable_live_variable_manager__WEBPACK_IMPORTED_MODULE_2__.LiveVariableManager,
                    'wm.CrudVariable': _manager_variable_crud_variable_manager__WEBPACK_IMPORTED_MODULE_3__.CrudVariableManager,
                    'wm.TimerVariable': _manager_action_timer_action_manager__WEBPACK_IMPORTED_MODULE_5__.TimerActionManager,
                };
                var VariableManagerFactory = /** @class */ (function () {
                    function VariableManagerFactory() {
                    }
                    VariableManagerFactory.get = function (type) {
                        return managerMap.has(type) ?
                            managerMap.get(type) :
                            managerMap.set(type, new typeToManagerMap[type]()).get(type);
                    };
                    return VariableManagerFactory;
                }());
                /***/ 
            }),
            /***/ "./src/manager/action/timer-action.manager.ts": 
            /*!****************************************************!*\
              !*** ./src/manager/action/timer-action.manager.ts ***!
              \****************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "TimerActionManager": function () { return ( /* binding */TimerActionManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                var TimerActionManager = /** @class */ (function () {
                    function TimerActionManager() {
                    }
                    TimerActionManager.prototype.trigger = function (variable, options, success, error) {
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(variable._promise) || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_2__.CONSTANTS.isStudioMode) {
                            return;
                        }
                        var repeatTimer = variable.repeating, delay = variable.delay || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_2__.CONSTANTS.DEFAULT_TIMER_DELAY, event = 'onTimerFire', exec = function () {
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.initiateCallback)(event, variable, {});
                        };
                        variable._promise = repeatTimer ? setInterval(exec, delay) : setTimeout(function () {
                            exec();
                            variable._promise = undefined;
                        }, delay);
                        /*// destroy the timer on scope destruction
                        callBackScope.$on('$destroy', function () {
                            variable.cancel(variable._promise);
                        });*/
                        return variable._promise;
                    };
                    TimerActionManager.prototype.cancel = function (variable) {
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(variable._promise)) {
                            if (variable.repeating) {
                                clearInterval(variable._promise);
                            }
                            else {
                                clearTimeout(variable._promise);
                            }
                            variable._promise = undefined;
                        }
                    };
                    return TimerActionManager;
                }());
                /***/ 
            }),
            /***/ "./src/manager/variable/base-variable.manager.ts": 
            /*!*******************************************************!*\
              !*** ./src/manager/variable/base-variable.manager.ts ***!
              \*******************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "BaseVariableManager": function () { return ( /* binding */BaseVariableManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
                // declare const _: any;
                var BaseVariableManager = /** @class */ (function () {
                    function BaseVariableManager() {
                    }
                    BaseVariableManager.prototype.initBinding = function (variable, bindSource, bindTarget) {
                        // processBinding(variable, variable._context, bindSource, bindTarget);
                        // ToDo - variable seperation
                    };
                    BaseVariableManager.prototype.notifyInflight = function (variable, status, data, options) {
                        // ToDo - variable seperation
                        _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.appManager && _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.appManager.notify('toggle-variable-state', {
                            variable: variable,
                            active: status,
                            data: data,
                            options: options
                        });
                    };
                    /**
                     * This method sets the variable parameter requestTrackId to X-WM-Request-Track-Id which is received in the response headers.
                     * @param response
                     */
                    BaseVariableManager.prototype.setRequestTrackId = function (response, variable) {
                        var _a;
                        var requestTrackId = (_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a.get('x-wm-request-track-id');
                        if (requestTrackId) {
                            variable._requestTrackId = requestTrackId;
                        }
                    };
                    /**
                     * This method makes the final angular http call that returns an observable.
                     * We attach this observable to variable to cancel a network call
                     * @param requestParams
                     * @param variable
                     * @param dbOperation
                     */
                    // ToDo - variable seperation
                    BaseVariableManager.prototype.httpCall = function (requestParams, variable, params) {
                        var _this = this;
                        return new Promise(function (resolve, reject) {
                            variable._observable = variable.httpService.sendCallAsObservable(requestParams, params).subscribe(function (response) {
                                if (response && response.type) {
                                    _this.setRequestTrackId(response, variable);
                                    resolve(response);
                                }
                            }, function (err) {
                                _this.setRequestTrackId(err, variable);
                                if (variable.httpService.isPlatformSessionTimeout(err)) {
                                    // send the notification manually to hide any context spinners on page.
                                    // [TODO]: any spinners on widget listening on this variable will also go off. Need to see an approach to sovle that.
                                    _this.notifyInflight(variable, false, err);
                                    err._401Subscriber.asObservable().subscribe(function (response) { return resolve(response); }, function (e) { return reject(e); });
                                }
                                else {
                                    reject(err);
                                }
                            });
                        });
                    };
                    /**
                     * This method prepares the options parameter for variable callbacks.
                     * @param xhrObj, The xhrObj to be passed
                     * @param moreOptions, any other info to be passed in the options param
                     */
                    BaseVariableManager.prototype.prepareCallbackOptions = function (xhrObj, moreOptions) {
                        var options = {};
                        options['xhrObj'] = xhrObj;
                        if (moreOptions) {
                            lodash__WEBPACK_IMPORTED_MODULE_1___default().extend(options, moreOptions);
                        }
                        return options;
                    };
                    return BaseVariableManager;
                }());
                /***/ 
            }),
            /***/ "./src/manager/variable/crud-variable.manager.ts": 
            /*!*******************************************************!*\
              !*** ./src/manager/variable/crud-variable.manager.ts ***!
              \*******************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CrudVariableManager": function () { return ( /* binding */CrudVariableManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/variable/service-variable.utils */ "./src/util/variable/service-variable.utils.ts");
                /* harmony import */ var _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/inflight-queue */ "./src/util/inflight-queue.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/oAuth.utils */ "./src/util/oAuth.utils.ts");
                /* harmony import */ var _service_variable_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./service-variable.manager */ "./src/manager/variable/service-variable.manager.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                // import { $invokeWatchers, getClonedObject, getValidJSON, isDefined, isPageable, isValidWebURL, noop, triggerFn, xmlToJson } from '@wm/core';
                var CrudVariableManager = /** @class */ (function (_super) {
                    __extends(CrudVariableManager, _super);
                    function CrudVariableManager() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.fileUploadResponse = [];
                        _this.fileUploadCount = 0;
                        _this.totalFilesCount = 0;
                        _this.successFileUploadCount = 0;
                        _this.failedFileUploadCount = 0;
                        return _this;
                    }
                    CrudVariableManager.prototype.getPaginationInfo = function (variable, inputFields, options) {
                        if (!options || !options.operation) {
                            options.operation = 'list';
                        }
                        var serviceDef = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.metadataService.getByCrudId(variable.crudOperationId, variable.getPrefabName()));
                        var methodInfo = serviceDef === null ? null : _.get(serviceDef, 'wmServiceOperationInfo');
                        methodInfo = serviceDef.filter(function (item) {
                            return options.operation === item.operationType;
                        })[0];
                        if (!methodInfo) {
                            return methodInfo;
                        }
                        // methodInfo.paginationInfo = {
                        //                                 "contentMapping": "content",
                        //                                 "ascSortExpression": "{{fieldName}} a",
                        //                                 "descSortExpression": "{{fieldName}} d",
                        //                                 //"defaultSortExpression": "id",
                        //                                 "totalMapping": "totalElements",
                        //                                 "pageMapping": {
                        //                                     "in": "query",
                        //                                     "name": "pageNum",
                        //                                     "description": "the existing id",
                        //                                     "type": "integer",
                        //                                     "required": true
                        //                                 },
                        //                                 "sizeMapping": {
                        //                                     "in": "query",
                        //                                     "name": "limit",
                        //                                     "description": "the existing id",
                        //                                     "type": "integer",
                        //                                     "required": true
                        //                                 },
                        //                                 "sortMapping": {
                        //                                     "name": "sortInfo",
                        //                                     "in": "query",
                        //                                     "description": "the sorting criteria",
                        //                                     "required": true,
                        //                                     "type": "integer"
                        //                                 }
                        //                             };
                        methodInfo.paginationInfo = null;
                        return methodInfo.paginationInfo;
                    };
                    CrudVariableManager.prototype.getOperationInfo = function (variable, options) {
                        var serviceDef = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.metadataService.getByCrudId(variable.crudOperationId, variable.getPrefabName()));
                        var methodInfo;
                        // fallback if there is no operation
                        if (options && !options.operation) {
                            options.operation = 'list';
                        }
                        if (!serviceDef.length) {
                            return;
                        }
                        methodInfo = serviceDef.filter(function (item) {
                            return options.operation === item.operationType;
                        })[0];
                        return methodInfo ? methodInfo.wmServiceOperationInfo : { invalid: true };
                    };
                    /**
                     * gets the service operation info against a service variable
                     * this is extracted from the metadataservice
                     * @param variable
                     * @param inputFields: sample values, if provided, will be set against params in the definition
                     * @param options
                     * @returns {any}
                     */
                    CrudVariableManager.prototype.getMethodInfoForCrud = function (variable, inputFields, options) {
                        var methodInfo = this.getOperationInfo(variable, options);
                        if (!methodInfo || methodInfo.invalid) {
                            return methodInfo;
                        }
                        var securityDefnObj = _.get(methodInfo.securityDefinitions, '0'), isOAuthTypeService = securityDefnObj && (securityDefnObj.type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2);
                        if (methodInfo.parameters) {
                            methodInfo.parameters.forEach(function (param) {
                                // Ignore readOnly params in case of formData file params will be duplicated
                                if (param.readOnly) {
                                    return;
                                }
                                param.sampleValue = inputFields[param.name];
                                /* supporting pagination for query service variable */
                                if (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.PAGINATION_PARAMS.indexOf(param.name) !== -1) {
                                    if (param.name === 'size') {
                                        param.sampleValue = options.size || param.sampleValue || parseInt(variable.maxResults, 10);
                                    }
                                    else if (param.name === 'page') {
                                        param.sampleValue = options.page || param.sampleValue || 1;
                                    }
                                    else if (param.name === 'sort') {
                                        param.sampleValue = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.getEvaluatedOrderBy)(variable.orderBy, options.orderBy) || param.sampleValue || '';
                                    }
                                }
                                else if (param.name === 'access_token' && isOAuthTypeService) {
                                    param.sampleValue = (0, _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_5__.getAccessToken)(securityDefnObj[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);
                                }
                            });
                        }
                        return methodInfo;
                    };
                    /**
                     * proxy for the invoke call
                     * Request Info is constructed
                     * if error found, error is thrown
                     * else, call is made
                     * @param {CrudVariable} variable
                     * @param options
                     * @param {Function} success
                     * @param {Function} error
                     * @returns {any}
                     * @private
                     */
                    CrudVariableManager.prototype._invoke = function (variable, options, success, error) {
                        var _this = this;
                        var inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.inputFields || {});
                        if (options.operation === 'delete') {
                            inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.row || inputFields.row || options.inputFields || variable.dataBinding);
                        }
                        else if (options.operation === 'create' && options.row) {
                            inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.row);
                        }
                        else if (options.operation === 'update' && options.row) {
                            inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.row);
                        }
                        // EVENT: ON_BEFORE_UPDATE
                        var output = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, inputFields, options);
                        var successHandler;
                        var errorHandler;
                        if (output === false) {
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__.$queue.process(variable);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            return;
                        }
                        if (_.isObject(output)) {
                            inputFields = output;
                        }
                        var opInfo = this.getOperationInfo(variable, options);
                        var bodyParam;
                        if (opInfo && opInfo.parameters) {
                            bodyParam = opInfo.parameters.filter(function (op) {
                                return op.parameterType === 'body' || op.parameterType === 'formData';
                            })[0];
                        }
                        // merge fields with bindings
                        var bindingFields = _.get(variable.dataBinding, options.operation) || {};
                        // bindings from setInput can come along with the body param, so employee.age will have to be converted to age
                        if (bodyParam && bindingFields[bodyParam.name]) {
                            _.forEach(bindingFields, function (bindingFieldVal, bindingFieldKey) {
                                if (bindingFieldKey === bodyParam.name) {
                                    _.merge(inputFields, bindingFieldVal);
                                }
                                else {
                                    inputFields[bindingFieldKey] = bindingFieldVal;
                                }
                            });
                        }
                        else {
                            _.merge(inputFields, bindingFields);
                        }
                        if ((options.operation === 'create' || options.operation === 'update') && (!bodyParam || !inputFields[bodyParam.name])) {
                            var bodyTypeKeys = [], nonBodyParam = void 0;
                            var _loop_1 = function (fieldName) {
                                nonBodyParam = opInfo.parameters.filter(function (param) {
                                    return param.name === fieldName && param.parameterType !== 'body' && param.parameterType !== 'formData';
                                });
                                if (nonBodyParam.length) {
                                    bodyTypeKeys.push(fieldName);
                                }
                            };
                            // only merge body/formData type params to the requestBody.
                            for (var fieldName in inputFields) {
                                _loop_1(fieldName);
                            }
                            var reqBodyFields = _.omit(inputFields, bodyTypeKeys);
                            if (bodyParam) {
                                inputFields[bodyParam.name] = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(reqBodyFields);
                            }
                            else {
                                inputFields.RequestBody = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(reqBodyFields);
                            }
                        }
                        var paginationInfo;
                        var operationInfo = this.getMethodInfoForCrud(variable, inputFields, options);
                        var pathParam, bodyTypeParam;
                        if (!variable.paginationTransformationRequired && operationInfo && !operationInfo.invalid) {
                            if (operationInfo.parameters) {
                                operationInfo.parameters.forEach(function (parameter) {
                                    if (parameter.parameterType === 'path') {
                                        pathParam = parameter.name;
                                    }
                                    else if (parameter.parameterType === 'body') {
                                        bodyTypeParam = parameter.name;
                                        inputFields[bodyTypeParam] = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(inputFields);
                                    }
                                });
                            }
                            for (var key in inputFields) {
                                if (key !== bodyTypeParam) {
                                    delete inputFields[key];
                                }
                            }
                            if (pathParam && inputFields[bodyTypeParam]) {
                                inputFields[pathParam] = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(inputFields[bodyTypeParam][pathParam]);
                            }
                        }
                        // else {
                        //     inputFields.totalMapping = paginationInfo && paginationInfo.totalMapping;
                        // }
                        var requestParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_1__.ServiceVariableUtils.constructRequestParams(variable, operationInfo, inputFields);
                        inputFields.sortInfo = options.orderBy;
                        // check errors
                        if (requestParams.error) {
                            if (requestParams.error.type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING) {
                                requestParams.error.message = requestParams.error.message.replace('$operation', options.operation);
                            }
                            if (options.preventMissingOpMsg) {
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__.$queue.process(variable);
                                return Promise.resolve('');
                            }
                            var info = this.handleRequestMetaError(requestParams, variable, success, error, options);
                            var reason = (_.get(info, 'error.message') || 'An error occurred while triggering the variable');
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            return Promise.reject(reason);
                        }
                        // file upload
                        if (_util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_1__.ServiceVariableUtils.isFileUploadRequest(variable)) {
                            var uploadPromise = this.uploadFile(variable, options, success, error, inputFields, requestParams);
                            if (uploadPromise) {
                                return uploadPromise;
                            }
                        }
                        // file download
                        if (operationInfo && _.isArray(operationInfo.produces) && _.includes(operationInfo.produces, _constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.WS_CONSTANTS.CONTENT_TYPES.OCTET_STREAM)) {
                            // ToDo - variable seperation
                            return variable.simulateFileDownload(requestParams, variable.dataBinding.file || variable.name, variable.dataBinding.exportType, function () {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, null, null, null);
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__.$queue.process(variable);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success);
                            }, function () {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_3__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, null, null, null);
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__.$queue.process(variable);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            });
                        }
                        // notify variable progress
                        this.notifyInflight(variable, !options.skipToggleState);
                        successHandler = function (response, resolve, inputObj) {
                            if (response && response.type) {
                                if (variable.paginationTransformationRequired) {
                                    var json = JSON.parse(response.body);
                                    var pageable = {
                                        'content': json[paginationInfo.contentMapping],
                                        'first': inputObj[paginationInfo.pageMapping.name] === 1 ? true : false,
                                        'last': inputObj[paginationInfo.pageMapping.name] === json[inputFields.totalMapping] ? true : false,
                                        'number': inputObj[paginationInfo.pageMapping.name] - 1,
                                        'numberOfElements': inputObj[paginationInfo.sizeMapping.name],
                                        'size': inputObj[paginationInfo.sizeMapping.name],
                                        'sort': null,
                                        'totalElements': json[inputFields.totalMapping],
                                        'totalPages': Math.ceil(json[inputFields.totalMapping] / inputObj[paginationInfo.sizeMapping.name])
                                    };
                                    if (inputObj.sortInfo) {
                                        pageable.sort = [{ direction: inputObj.sortInfo.split(' ')[1].toUpperCase(), property: inputObj.sortInfo.split(' ')[0], ignoreCase: false, nullHandling: "NATIVE", ascending: inputObj.sortInfo.split(' ')[1] === 'asc' ? true : false }];
                                    }
                                    json = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(pageable);
                                    response.body = JSON.stringify(json);
                                }
                                var data = _this.processSuccessResponse(response.body, variable, _.extend(options, { 'xhrObj': response }), success, response.headers, operationInfo);
                                // notify variable success
                                _this.notifyInflight(variable, false, data);
                                resolve(response);
                            }
                        };
                        errorHandler = function (err, reject) {
                            var errMsg = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.getErrMessage)(err, variable.httpService.getLocale());
                            // notify variable error
                            _this.notifyInflight(variable, false);
                            _this.processErrorResponse(variable, errMsg, error, err, options.skipNotification);
                            reject({
                                error: errMsg,
                                details: err
                            });
                        };
                        // make the call and return a promise to the user to support script calls made by users
                        return new Promise(function (resolve, reject) {
                            requestParams.responseType = 'text'; // this is to return text response. JSON & XML-to-JSON parsing is handled in success handler.
                            _this.httpCall(requestParams, variable).then(function (response) {
                                successHandler(response, resolve, inputFields);
                            }, function (err) {
                                errorHandler(err, reject);
                            });
                            // the _observable property on variable is used store the observable using which the network call is made
                            // this can be used to cancel the variable calls.
                        });
                    };
                    // *********************************************************** PUBLIC ***********************************************************//
                    CrudVariableManager.prototype.invoke = function (variable, options, success, error) {
                        options = options || {};
                        _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.appManager.notify('check-state-persistence-options', {
                            options: options,
                            variable: variable
                        });
                        options.operation = options.operation || 'list';
                        options.inputFields = options.inputFields || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.dataBinding[options.operation]);
                        return _util_inflight_queue__WEBPACK_IMPORTED_MODULE_2__.$queue.submit(variable).then(this._invoke.bind(this, variable, options, success, error), error);
                    };
                    CrudVariableManager.prototype.getInputParms = function (variable) {
                        var wmServiceOperationInfo = _.get(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.metadataService.getByOperationId(variable.operationId, variable.getPrefabName()), 'wmServiceOperationInfo');
                        return _.get(wmServiceOperationInfo, 'parameters');
                    };
                    CrudVariableManager.prototype.setInput = function (variable, key, val, options, type) {
                        type = type || 'list';
                        if (_.isEmpty(variable.dataBinding[type])) {
                            variable.dataBinding[type] = {};
                        }
                        return (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_4__.setInput)(variable.dataBinding[type], key, val, options);
                    };
                    /**
                     * Initializes the bindings for the CRUD variable
                     * flatten the bindings (categorised by operation name) to a list of bindings
                     * each binding object's target is changed appended with the operation type
                     * E.g. Input binding will be like:
                     {
                       "list": [
                         {
                           "target": "q",
                           "type": "string",
                           "value": "X"
                         }
                       ],
                       "update": [
                         {
                           "target": "id",
                           "value": "bind:Widgets.UserControllerTable2.selecteditem.userId",
                           "type": "integer"
                         }
                       ]
                     }
                
                     * This function will convert it to
                     [
                         {
                           "target": "list.q",
                           "type": "string",
                           "value": "X"
                         },
                         {
                           "target": "update.id",
                           "value": "bind:Widgets.UserControllerTable2.selecteditem.userId",
                           "type": "integer"
                         }
                     ]
                
                     * The bindings will be evaluated through the base-manager initBinding method and will
                     * be stored in variable.dataBinding as follows:
                     {
                        list: {
                            q: "X"
                        },
                        update: {
                            id: "evaluated value"
                        }
                     }
                     * @param variable
                     */
                    CrudVariableManager.prototype.initBinding = function (variable) {
                        var crudBindInfo = variable.dataBinding || {}, flattenedBindInfo = [];
                        _.forEach(crudBindInfo, function (bindNodes, operationType) {
                            bindNodes = bindNodes || [];
                            bindNodes.forEach(function (bindNode) {
                                bindNode.target = operationType + '.' + bindNode.target;
                                flattenedBindInfo.push(bindNode);
                            });
                        });
                        variable.dataBinding = flattenedBindInfo;
                        _super.prototype.initBinding.call(this, variable);
                    };
                    return CrudVariableManager;
                }(_service_variable_manager__WEBPACK_IMPORTED_MODULE_6__.ServiceVariableManager));
                /***/ 
            }),
            /***/ "./src/manager/variable/live-variable.manager.ts": 
            /*!*******************************************************!*\
              !*** ./src/manager/variable/live-variable.manager.ts ***!
              \*******************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "LiveVariableManager": function () { return ( /* binding */LiveVariableManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _base_variable_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-variable.manager */ "./src/manager/variable/base-variable.manager.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/variable/live-variable.utils */ "./src/util/variable/live-variable.utils.ts");
                /* harmony import */ var _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/inflight-queue */ "./src/util/inflight-queue.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/variable/live-variable.http.utils */ "./src/util/variable/live-variable.http.utils.ts");
                /* harmony import */ var _model_base_variable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../model/base-variable */ "./src/model/base-variable.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                // import { $invokeWatchers, processFilterExpBindNode } from '@wm/core';
                var emptyArr = [];
                var LiveVariableManager = /** @class */ (function (_super) {
                    __extends(LiveVariableManager, _super);
                    function LiveVariableManager() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        /**
                         * Traverses recursively the filterExpressions object and if there is any required field present with no value,
                         * then we will return without proceeding further. Its upto the developer to provide the mandatory value,
                         * if he wants to assign it in teh onbefore<delete/insert/update>function then make that field in
                         * the filter query section as optional
                         * @param filterExpressions - recursive rule Object
                         * @returns {Object} object or boolean. Object if everything gets validated or else just boolean indicating failure in the validations
                         */
                        _this.getFilterExprFields = function (filterExpressions) {
                            var isRequiredFieldAbsent = false;
                            var traverseCallbackFn = function (parentFilExpObj, filExpObj) {
                                if (filExpObj
                                    && filExpObj.required
                                    && ((_.indexOf(['null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'], filExpObj.matchMode) === -1) && filExpObj.value === '')) {
                                    isRequiredFieldAbsent = true;
                                    return false;
                                }
                            };
                            _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.traverseFilterExpressions(filterExpressions, traverseCallbackFn);
                            return isRequiredFieldAbsent ? !isRequiredFieldAbsent : filterExpressions;
                        };
                        /**
                         * Allows the user to get the criteria of filtering and the filter fields, based on the method called
                         */
                        _this.getDataFilterObj = function (clonedFilterFields) {
                            return (function (clonedFields) {
                                function getCriteria(filterField) {
                                    var criterian = [];
                                    _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.traverseFilterExpressions(clonedFields, function (filterExpressions, criteria) {
                                        if (filterField === criteria.target) {
                                            criterian.push(criteria);
                                        }
                                    });
                                    return criterian;
                                }
                                function getFilterFields() {
                                    return clonedFields;
                                }
                                return {
                                    getFilterFields: getFilterFields,
                                    getCriteria: getCriteria
                                };
                            }(clonedFilterFields));
                        };
                        return _this;
                    }
                    LiveVariableManager.prototype.initFilterExpressionBinding = function (variable) {
                        var context = variable._context;
                        var destroyFn = context.registerDestroyListener ? context.registerDestroyListener.bind(context) : _.noop;
                        // ToDo - variable seperation
                        // const filterSubscription = processFilterExpBindNode(context, variable.filterExpressions).subscribe((response: any) => {
                        //     if (variable.operation === 'read') {
                        //         /* if auto-update set for the variable with read operation only, get its data */
                        //         if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable.update)) {
                        //             debounceVariableCall(variable, 'update');
                        //         }
                        //     } else {
                        //         /* if auto-update set for the variable with read operation only, get its data */
                        //         if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable[variable.operation + 'Record'])) {
                        //             debounceVariableCall(variable, variable.operation + 'Record');
                        //         }
                        //     }
                        // });
                        //  destroyFn(() => filterSubscription.unsubscribe());
                    };
                    LiveVariableManager.prototype.updateDataset = function (variable, data, propertiesMap, pagination) {
                        variable.pagination = pagination;
                        variable.dataSet = data;
                        // legacy properties in dataSet, [data, pagination]
                        Object.defineProperty(variable.dataSet, 'data', {
                            get: function () {
                                return variable.dataSet;
                            }
                        });
                        Object.defineProperty(variable.dataSet, 'pagination', {
                            get: function () {
                                return variable.pagination;
                            }
                        });
                    };
                    // Set the _options on variable which can be used by the widgets
                    LiveVariableManager.prototype.setVariableOptions = function (variable, options) {
                        variable._options = variable._options || {};
                        variable._options.orderBy = options && options.orderBy;
                        variable._options.filterFields = options && options.filterFields;
                        variable._options.logicalOp = options && options.logicalOp;
                    };
                    LiveVariableManager.prototype.handleError = function (variable, errorCB, response, options, advancedOptions) {
                        var opt;
                        /* If callback function is provided, send the data to the callback.
                         * The same callback if triggered in case of error also. The error-handling is done in grid.js*/
                        (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorCB, response);
                        //  EVENT: ON_RESULT
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);
                        /* update the dataSet against the variable */
                        if (!options.skipDataSetUpdate) {
                            this.updateDataset(variable, emptyArr, variable.propertiesMap, null);
                        }
                        //  EVENT: ON_ERROR
                        opt = this.prepareCallbackOptions(options.errorDetails);
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, opt);
                        //  EVENT: ON_CAN_UPDATE
                        variable.canUpdate = true;
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);
                    };
                    LiveVariableManager.prototype.makeCall = function (variable, dbOperation, params) {
                        var _this = this;
                        var successHandler = function (response, resolve) {
                            if (response && response.type) {
                                resolve(response);
                            }
                        };
                        var errorHandler = function (error, reject) {
                            var errMsg = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getErrMessage)(error, variable.httpService.getLocale());
                            // notify variable error
                            _this.notifyInflight(variable, false);
                            reject({
                                error: errMsg,
                                details: error
                            });
                        };
                        return new Promise(function (resolve, reject) {
                            var reqParams = (0, _util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_6__.generateConnectionParams)(params, dbOperation);
                            reqParams = {
                                url: reqParams.url,
                                method: reqParams.method,
                                data: reqParams.data,
                                headers: reqParams.headers
                            };
                            params.operation = dbOperation;
                            _this.httpCall(reqParams, variable, params).then(function (response) {
                                successHandler(response, resolve);
                            }, function (e) {
                                errorHandler(e, reject);
                            });
                        });
                    };
                    LiveVariableManager.prototype.getEntityData = function (variable, options, success, error) {
                        var _this = this;
                        var dataObj = {};
                        var tableOptions, dbOperation, output, newDataSet, clonedFields, requestData, dbOperationOptions, getEntitySuccess, getEntityError;
                        // empty array kept (if variable is not of read type filterExpressions will be undefined)
                        clonedFields = this.getFilterExprFields((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.filterExpressions || {}));
                        // clonedFields = getClonedObject(variable.filterFields);
                        //  EVENT: ON_BEFORE_UPDATE
                        output = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, this.getDataFilterObj(clonedFields), options);
                        // if filterFields are updated or modified inside the onBeforeUpdate event then in device use these fields to filter.
                        var updateFilterFields = _.isObject(output) ? (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(output) : undefined;
                        if (output === false) {
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                            // $rootScope.$emit('toggle-variable-state', variable, false);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, 'Call stopped from the event: ' + _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);
                            return Promise.reject('Call stopped from the event: ' + _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);
                        }
                        variable.canUpdate = false;
                        tableOptions = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.prepareTableOptions(variable, options, _.isObject(output) ? output : clonedFields);
                        //  if tableOptions object has query then set the dbOperation to 'searchTableDataWithQuery'
                        if (options.searchWithQuery) {
                            dbOperation = 'searchTableDataWithQuery';
                            requestData = tableOptions.query ? ('q=' + tableOptions.query) : '';
                        }
                        else {
                            dbOperation = (tableOptions.filter && tableOptions.filter.length) ? 'searchTableData' : 'readTableData';
                            requestData = tableOptions.filter;
                        }
                        dbOperationOptions = {
                            'projectID': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.id,
                            'service': variable.getPrefabName() ? '' : 'services',
                            'dataModelName': variable.liveSource,
                            'entityName': variable.type,
                            'page': options.page || 1,
                            'size': options.pagesize || (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.CONSTANTS.isRunMode ? (variable.maxResults || 20) : (variable.designMaxResults || 20)),
                            'sort': tableOptions.sort,
                            'data': requestData,
                            'filter': _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getWhereClauseGenerator(variable, options, updateFilterFields),
                            // 'filterMeta': tableOptions.filter,
                            'url': variable.getPrefabName() ? (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl
                        };
                        getEntitySuccess = function (response, resolve) {
                            if (response && response.type) {
                                response = response.body;
                                dataObj.data = response.content;
                                dataObj.pagination = _.omit(response, 'content');
                                var advancedOptions_1 = _this.prepareCallbackOptions(response, { pagination: dataObj.pagination });
                                if ((response && response.error) || !response || !_.isArray(response.content)) {
                                    _this.handleError(variable, error, response.error, options, advancedOptions_1);
                                    return Promise.reject(response.error);
                                }
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.decodeData)(response.content);
                                _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.processBlobColumns(response.content, variable);
                                if (!options.skipDataSetUpdate) {
                                    //  EVENT: ON_RESULT
                                    (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, dataObj.data, advancedOptions_1);
                                    //  EVENT: ON_PREPARESETDATA
                                    newDataSet = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataObj.data, advancedOptions_1);
                                    if (newDataSet) {
                                        // setting newDataSet as the response to service variable onPrepareSetData
                                        dataObj.data = newDataSet;
                                    }
                                    /* update the dataSet against the variable */
                                    _this.updateDataset(variable, dataObj.data, variable.propertiesMap, dataObj.pagination);
                                    _this.setVariableOptions(variable, options);
                                    // watchers should get triggered before calling onSuccess event.
                                    // so that any variable/widget depending on this variable's data is updated
                                    variable.notify(_model_base_variable__WEBPACK_IMPORTED_MODULE_7__.VariableEvents.AFTER_INVOKE, [_this, dataObj.data]);
                                    setTimeout(function () {
                                        // if callback function is provided, send the data to the callback
                                        (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, dataObj.data, variable.propertiesMap, dataObj.pagination);
                                        //  EVENT: ON_SUCCESS
                                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataObj.data, advancedOptions_1);
                                        //  EVENT: ON_CAN_UPDATE
                                        variable.canUpdate = true;
                                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataObj.data, advancedOptions_1);
                                    });
                                }
                                return resolve({ data: dataObj.data, pagination: dataObj.pagination });
                            }
                        };
                        getEntityError = function (e, reject) {
                            _this.setVariableOptions(variable, options);
                            _this.handleError(variable, error, e.error, _.extend(options, { errorDetails: e.details }));
                            return reject(e.error);
                        };
                        /* if it is a prefab variable (used in a normal project), modify the url */
                        /*Fetch the table data*/
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, dbOperation, dbOperationOptions).then(function (response) {
                                getEntitySuccess(response, resolve);
                            }, function (err) {
                                getEntityError(err, reject);
                            });
                        });
                    };
                    LiveVariableManager.prototype.performCUD = function (operation, variable, options, success, error) {
                        var _this = this;
                        options = options || {};
                        options.inputFields = options.inputFields || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.inputFields);
                        return _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.submit(variable).then(function () {
                            _this.notifyInflight(variable, !options.skipToggleState);
                            return _this.doCUD(operation, variable, options, success, error)
                                .then(function (response) {
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                                _this.notifyInflight(variable, false, response);
                                return Promise.resolve(response);
                            }, function (err) {
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                                _this.notifyInflight(variable, false, err);
                                return Promise.reject(err);
                            });
                        }, error);
                    };
                    LiveVariableManager.prototype.doCUD = function (action, variable, options, success, error) {
                        var _this = this;
                        var projectID = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.id || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.projectName, primaryKey = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getPrimaryKey(variable), isFormDataSupported = (window.File && window.FileReader && window.FileList && window.Blob);
                        var dbName, compositeId = '', rowObject = {}, prevData, compositeKeysData = {}, prevCompositeKeysData = {}, id, columnName, clonedFields, output, onCUDerror, onCUDsuccess, inputFields = options.inputFields || variable.inputFields;
                        // EVENT: ON_BEFORE_UPDATE
                        clonedFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(inputFields);
                        output = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, clonedFields, options);
                        if (output === false) {
                            // $rootScope.$emit('toggle-variable-state', variable, false);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            return Promise.reject('Call stopped from the event: ' + _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);
                        }
                        inputFields = _.isObject(output) ? output : clonedFields;
                        variable.canUpdate = false;
                        if (options.row) {
                            rowObject = options.row;
                            // For datetime types, convert the value to the format accepted by backend
                            _.forEach(rowObject, function (value, key) {
                                var fieldType = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getFieldType(key, variable);
                                var fieldValue;
                                if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(fieldType)) {
                                    // ToDo - variable seperation
                                    fieldValue = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatDate)(value, fieldType);
                                    rowObject[key] = fieldValue;
                                }
                                else if (_.isArray(value) && _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isStringType(fieldType)) {
                                    // Construct ',' separated string if param is not array type but value is an array
                                    fieldValue = _.join(value, ',');
                                    rowObject[key] = fieldValue;
                                }
                            });
                            // Merge inputFields along with dataObj while making Insert/Update/Delete
                            _.forEach(inputFields, function (attrValue, attrName) {
                                if (((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(attrValue) && attrValue !== '') && (!(0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(rowObject[attrName]) || rowObject[attrName] === '')) {
                                    rowObject[attrName] = attrValue;
                                }
                            });
                        }
                        else {
                            _.forEach(inputFields, function (fieldValue, fieldName) {
                                var fieldType;
                                var primaryKeys = variable.propertiesMap.primaryFields || variable.propertiesMap.primaryKeys;
                                if (!_.isUndefined(fieldValue) && fieldValue !== '') {
                                    /*For delete action, the inputFields need to be set in the request URL. Hence compositeId is set.
                                     * For insert action inputFields need to be set in the request data. Hence rowObject is set.
                                     * For update action, both need to be set.*/
                                    if (action === 'deleteTableData') {
                                        compositeId = fieldValue;
                                    }
                                    if (action === 'updateTableData') {
                                        primaryKeys.forEach(function (key) {
                                            if (fieldName === key) {
                                                compositeId = fieldValue;
                                            }
                                        });
                                    }
                                    if (action !== 'deleteTableData' || _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isCompositeKey(primaryKey)) {
                                        fieldType = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getFieldType(fieldName, variable);
                                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(fieldType)) {
                                            // ToDo - variable seperation
                                            fieldValue = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatDate)(fieldValue, fieldType);
                                        }
                                        else if (_.isArray(fieldValue) && _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isStringType(fieldType)) {
                                            // Construct ',' separated string if param is not array type but value is an array
                                            fieldValue = _.join(fieldValue, ',');
                                        }
                                        rowObject[fieldName] = fieldValue;
                                    }
                                    // for related entities, clear the blob type fields
                                    if (_.isObject(fieldValue) && !_.isArray(fieldValue)) {
                                        _.forEach(fieldValue, function (val, key) {
                                            if (_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getFieldType(fieldName, variable, key) === 'blob') {
                                                fieldValue[key] = val === null ? val : '';
                                            }
                                        });
                                    }
                                }
                            });
                        }
                        switch (action) {
                            case 'updateTableData':
                                prevData = options.prevData || {};
                                /*Construct the "requestData" based on whether the table associated with the live-variable has a composite key or not.*/
                                if (_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isCompositeKey(primaryKey)) {
                                    if (_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isNoPrimaryKey(primaryKey)) {
                                        prevCompositeKeysData = prevData || options.rowData || rowObject;
                                        compositeKeysData = rowObject;
                                    }
                                    else {
                                        primaryKey.forEach(function (key) {
                                            compositeKeysData[key] = rowObject[key];
                                            // In case of periodic update for Business temporal fields, passing updated field data.
                                            if (options.period) {
                                                prevCompositeKeysData[key] = rowObject[key];
                                            }
                                            else {
                                                prevCompositeKeysData[key] = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];
                                            }
                                        });
                                    }
                                    options.row = compositeKeysData;
                                    options.compositeKeysData = prevCompositeKeysData;
                                }
                                else {
                                    primaryKey.forEach(function (key) {
                                        if (key.indexOf('.') === -1) {
                                            id = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];
                                        }
                                        else {
                                            columnName = key.split('.');
                                            id = prevData[columnName[0]][columnName[1]];
                                        }
                                    });
                                    options.id = id;
                                    options.row = rowObject;
                                }
                                break;
                            case 'deleteTableData':
                                /*Construct the "requestData" based on whether the table associated with the live-variable has a composite key or not.*/
                                if (_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isCompositeKey(primaryKey)) {
                                    if (_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.isNoPrimaryKey(primaryKey)) {
                                        compositeKeysData = rowObject;
                                    }
                                    else {
                                        primaryKey.forEach(function (key) {
                                            compositeKeysData[key] = rowObject[key];
                                        });
                                    }
                                    options.compositeKeysData = compositeKeysData;
                                }
                                else if (!_.isEmpty(rowObject)) {
                                    primaryKey.forEach(function (key) {
                                        if (key.indexOf('.') === -1) {
                                            id = rowObject[key];
                                        }
                                        else {
                                            columnName = key.split('.');
                                            id = rowObject[columnName[0]][columnName[1]];
                                        }
                                    });
                                    options.id = id;
                                }
                                break;
                            default:
                                break;
                        }
                        // If table has blob column then send multipart data
                        if ((action === 'updateTableData' || action === 'insertTableData') && _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.hasBlob(variable) && isFormDataSupported) {
                            if (action === 'updateTableData') {
                                action = 'updateMultiPartTableData';
                            }
                            else {
                                action = 'insertMultiPartTableData';
                            }
                            rowObject = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.prepareFormData(variable, rowObject);
                        }
                        /*Check if "options" have the "compositeKeysData" property.*/
                        if (options.compositeKeysData) {
                            switch (action) {
                                case 'updateTableData':
                                    action = 'updateCompositeTableData';
                                    break;
                                case 'deleteTableData':
                                    action = 'deleteCompositeTableData';
                                    break;
                                case 'updateMultiPartTableData':
                                    action = 'updateMultiPartCompositeTableData';
                                    break;
                                default:
                                    break;
                            }
                            compositeId = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getCompositeIDURL(options.compositeKeysData);
                        }
                        dbName = variable.liveSource;
                        /*Set the "data" in the request to "undefined" if there is no data.
                        * This handles cases such as "Delete" requests where data should not be passed.*/
                        if (_.isEmpty(rowObject) && action === 'deleteTableData') {
                            rowObject = undefined;
                        }
                        if ((action === 'updateCompositeTableData' || action === 'deleteCompositeTableData') && options.period) {
                            // capitalize first character
                            action = 'period' + action.charAt(0).toUpperCase() + action.substr(1);
                        }
                        var dbOperations = {
                            'projectID': projectID,
                            'service': variable._prefabName ? '' : 'services',
                            'dataModelName': dbName,
                            'entityName': variable.type,
                            'id': !_.isUndefined(options.id) ? encodeURIComponent(options.id) : compositeId,
                            'data': rowObject,
                            'url': variable._prefabName ? (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl + '/prefabs/' + variable._prefabName) : _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl
                        };
                        onCUDerror = function (response, reject) {
                            var errMsg = response.error;
                            var advancedOptions = _this.prepareCallbackOptions(response);
                            // EVENT: ON_RESULT
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, errMsg, advancedOptions);
                            // EVENT: ON_ERROR
                            if (!options.skipNotification) {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions);
                            }
                            // EVENT: ON_CAN_UPDATE
                            variable.canUpdate = true;
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, errMsg);
                            reject(errMsg);
                        };
                        onCUDsuccess = function (data, resolve) {
                            var response = data.body;
                            var advancedOptions = _this.prepareCallbackOptions(data);
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                            /* if error received on making call, call error callback */
                            if (response && response.error) {
                                // EVENT: ON_RESULT
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);
                                // EVENT: ON_ERROR
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, response.error, advancedOptions);
                                // EVENT: ON_CAN_UPDATE
                                variable.canUpdate = true;
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response.error, advancedOptions);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, response.error);
                                return Promise.reject(response.error);
                            }
                            // EVENT: ON_RESULT
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);
                            if (variable.operation !== 'read') {
                                // EVENT: ON_PREPARESETDATA
                                var newDataSet = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, response, advancedOptions);
                                if (newDataSet) {
                                    // setting newDataSet as the response to service variable onPrepareSetData
                                    response = newDataSet;
                                }
                                variable.dataSet = response;
                            }
                            // watchers should get triggered before calling onSuccess event.
                            // so that any variable/widget depending on this variable's data is updated
                            variable.notify(_model_base_variable__WEBPACK_IMPORTED_MODULE_7__.VariableEvents.AFTER_INVOKE, [_this, response]);
                            setTimeout(function () {
                                // EVENT: ON_SUCCESS
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, response, advancedOptions);
                                // EVENT: ON_CAN_UPDATE
                                variable.canUpdate = true;
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);
                            });
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, response);
                            resolve(response);
                        };
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, action, dbOperations).then(function (data) {
                                onCUDsuccess(data, resolve);
                            }, function (response) {
                                onCUDerror(response, reject);
                            });
                        });
                    };
                    LiveVariableManager.prototype.aggregateData = function (deployedUrl, variable, options, success, error) {
                        var _this = this;
                        var tableOptions, dbOperationOptions, aggregateDataSuccess, aggregateDataError;
                        var dbOperation = 'executeAggregateQuery';
                        options = options || {};
                        options.skipEncode = true;
                        if (variable.filterFields) {
                            tableOptions = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.prepareTableOptions(variable, options);
                            options.aggregations.filter = tableOptions.query;
                        }
                        dbOperationOptions = {
                            'dataModelName': variable.liveSource,
                            'entityName': variable.type,
                            'page': options.page || 1,
                            'size': options.size || variable.maxResults,
                            'sort': options.sort || '',
                            'url': deployedUrl,
                            'data': options.aggregations
                        };
                        aggregateDataSuccess = function (response, resolve) {
                            if (response && response.type) {
                                if ((response && response.error) || !response) {
                                    (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, response.error);
                                    return;
                                }
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, response);
                                resolve(response);
                            }
                        };
                        aggregateDataError = function (errorMsg, reject) {
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, errorMsg);
                            reject(errorMsg);
                        };
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, dbOperation, dbOperationOptions).then(function (response) {
                                aggregateDataSuccess(response, resolve);
                            }, function (err) {
                                aggregateDataError(err, reject);
                            });
                        });
                    };
                    // *********************************************************** PUBLIC ***********************************************************//
                    /**
                     * Makes http call for a Live Variable against the configured DB Entity.
                     * Gets the paginated records against the entity
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     * @returns {Promise<any>}: will be resolved on successful data fetch
                     */
                    LiveVariableManager.prototype.listRecords = function (variable, options, success, error) {
                        var _this = this;
                        options = options || {};
                        options.filterFields = options.filterFields || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.filterFields);
                        return _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.submit(variable).then(function () {
                            _this.notifyInflight(variable, !options.skipToggleState, undefined, options);
                            return _this.getEntityData(variable, options, success, error)
                                .then(function (response) {
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                                _this.notifyInflight(variable, false, response);
                                return Promise.resolve(response);
                            }, function (err) {
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                                _this.notifyInflight(variable, false, err);
                                return Promise.reject(err);
                            });
                        }, error);
                    };
                    /**
                     * Makes a POST http call for a Live Variable against the configured DB Entity.
                     * Sends a Table record object with the request body
                     * the record is inserted into the entity at the backend
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     * @returns {Promise<any>}: will be resolved on successful data fetch
                     */
                    LiveVariableManager.prototype.insertRecord = function (variable, options, success, error) {
                        return this.performCUD('insertTableData', variable, options, success, error);
                    };
                    /**
                     * Makes a PUT http call for a Live Variable against the configured DB Entity.
                     * Sends a Table record object with the request body against the primary key of an existing record
                     * the record is updated into the entity at the backend
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     * @returns {Promise<any>}: will be resolved on successful data fetch
                     */
                    LiveVariableManager.prototype.updateRecord = function (variable, options, success, error) {
                        return this.performCUD('updateTableData', variable, options, success, error);
                    };
                    /**
                     * Makes a DELETE http call for a Live Variable against the configured DB Entity.
                     * Sends the primary key of an existing record
                     * the record is deleted from the entity at the backend
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     * @returns {Promise<any>}: will be resolved on successful data fetch
                     */
                    LiveVariableManager.prototype.deleteRecord = function (variable, options, success, error) {
                        return this.performCUD('deleteTableData', variable, options, success, error);
                    };
                    /**
                     * sets the value against passed key on the "inputFields" object in the variable
                     * @param variable
                     * @param key: can be:
                     *  - a string e.g. "username"
                     *  - an object, e.g. {"username": "john", "ssn": "11111"}
                     * @param val
                     * - if key is string, the value against it (for that data type)
                     * - if key is object, not required
                     * @param options
                     * @returns {any}
                     */
                    LiveVariableManager.prototype.setInput = function (variable, key, val, options) {
                        variable.inputFields = variable.inputFields || {};
                        return (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.setInput)(variable.inputFields, key, val, options);
                    };
                    /**
                     * sets the value against passed key on the "filterFields" object in the variable
                     * @param variable
                     * @param key: can be:
                     *  - a string e.g. "username"
                     *  - an object, e.g. {"username": "john", "ssn": "11111"}
                     * @param val
                     * - if key is string, the value against it (for that data type)
                     * - if key is object, not required
                     * @param options
                     * @returns {any}
                     */
                    LiveVariableManager.prototype.setFilter = function (variable, key, val) {
                        var paramObj = {}, targetObj = {};
                        if (_.isObject(key)) {
                            paramObj = key;
                        }
                        else {
                            paramObj[key] = val;
                        }
                        if (!variable.filterExpressions || _.isEmpty(variable.filterExpressions)) {
                            variable.filterExpressions = { 'condition': 'AND', 'rules': [] };
                        }
                        targetObj = variable.filterExpressions;
                        // find the existing criteria if present or else return null. Find the first one and return.
                        // If the user wants to set a different object, then he has to use the getCriteria API defined
                        // on the dataFilter object passed to the onBeforeListRecords
                        function getExistingCriteria(filterField) {
                            var existingCriteria = null;
                            _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.traverseFilterExpressions(targetObj, function (filterExpressions, criteria) {
                                if (filterField === criteria.target) {
                                    return existingCriteria = criteria;
                                }
                            });
                            return existingCriteria;
                        }
                        _.forEach(paramObj, function (paramVal, paramKey) {
                            var existingCriteria = getExistingCriteria(paramKey);
                            if (existingCriteria !== null) {
                                existingCriteria.value = paramVal;
                            }
                            else {
                                targetObj.rules.push({
                                    target: paramKey,
                                    type: '',
                                    matchMode: '',
                                    value: paramVal,
                                    required: false
                                });
                            }
                        });
                        return targetObj;
                    };
                    /**
                     * Makes a file download call for a table
                     * @param variable
                     * @param options
                     */
                    LiveVariableManager.prototype.download = function (variable, options, successHandler, errorHandler) {
                        var _this = this;
                        options = options || {};
                        var tableOptions, dbOperationOptions, downloadSuccess, downloadError;
                        var data = {};
                        var dbOperation = 'exportTableData';
                        var projectID = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.id || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.projectName;
                        options.data.searchWithQuery = true; // For export, query api is used. So set this flag to true
                        options.data.skipEncode = true;
                        tableOptions = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.prepareTableOptions(variable, options.data, undefined);
                        data.query = tableOptions.query ? tableOptions.query : '';
                        data.exportSize = options.data.exportSize;
                        data.exportType = options.data.exportType;
                        data.fields = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatExportExpression)(options.data.fields);
                        if (options.data.fileName) {
                            data.fileName = options.data.fileName;
                        }
                        dbOperationOptions = {
                            'projectID': projectID,
                            'service': variable.getPrefabName() ? '' : 'services',
                            'dataModelName': variable.liveSource,
                            'entityName': variable.type,
                            'sort': tableOptions.sort,
                            'url': variable.getPrefabName() ? (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl,
                            'data': data,
                            'filter': _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getWhereClauseGenerator(variable, options)
                            // 'filterMeta'    : tableOptions.filter
                        };
                        downloadSuccess = function (response, resolve) {
                            if (response && response.type) {
                                window.location.href = response.body.result;
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(successHandler, response);
                                resolve(response);
                            }
                        };
                        downloadError = function (err, reject) {
                            var opt = _this.prepareCallbackOptions(err.details);
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, err.error, opt);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorHandler, err.error);
                            reject(err);
                        };
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, dbOperation, dbOperationOptions).then(function (response) {
                                downloadSuccess(response, resolve);
                            }, function (error) {
                                downloadError(error, reject);
                            });
                        });
                    };
                    /**
                     * gets primary keys against the passed related Table
                     * @param variable
                     * @param relatedField
                     * @returns {any}
                     */
                    LiveVariableManager.prototype.getRelatedTablePrimaryKeys = function (variable, relatedField) {
                        var primaryKeys, result, relatedCols;
                        if (!variable.propertiesMap) {
                            return;
                        }
                        result = _.find(variable.propertiesMap.columns || [], { 'fieldName': relatedField });
                        // if related field name passed, get its type from columns inside the current field
                        if (result) {
                            relatedCols = result.columns;
                            primaryKeys = _.map(_.filter(relatedCols, 'isPrimaryKey'), 'fieldName');
                            if (primaryKeys.length) {
                                return primaryKeys;
                            }
                            if (relatedCols && relatedCols.length) {
                                relatedCols = _.find(relatedCols, { 'isRelated': false });
                                return relatedCols && relatedCols.fieldName;
                            }
                        }
                    };
                    /**
                     * Makes HTTP call to get the data for related entity of a field in an entity
                     * @param variable
                     * @param columnName
                     * @param options
                     * @param success
                     * @param error
                     */
                    LiveVariableManager.prototype.getRelatedTableData = function (variable, columnName, options, success, error) {
                        var _this = this;
                        var projectID = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.id || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.projectName;
                        var relatedTable = _.find(variable.relatedTables, function (table) { return table.relationName === columnName || table.columnName === columnName; }); // Comparing column name to support the old projects
                        var selfRelatedCols = _.map(_.filter(variable.relatedTables, function (o) { return o.type === variable.type; }), 'relationName');
                        var filterFields = [];
                        var orderBy, filterOptions, query, action, dbOperationOptions, getRelatedTableDataSuccess, getRelatedTableDataError;
                        _.forEach(options.filterFields, function (value, key) {
                            value.fieldName = key;
                            value.type = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getFieldType(columnName, variable, key);
                            /**
                             * for 'in' mode we are taking the input as comma separated values and for between in ui there are two different fields
                             * but these are processed and merged into a single value with comma as separator. For these conditions like 'in' and 'between',
                             * for building the query, the function expects the values to be an array
                             */
                            if (value.filterCondition === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.DB_CONSTANTS.DATABASE_MATCH_MODES["in"].toLowerCase() || value.filterCondition === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.DB_CONSTANTS.DATABASE_MATCH_MODES.between.toLowerCase()) {
                                value.value = value.value.split(',');
                            }
                            filterFields.push(value);
                        });
                        filterOptions = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getFilterOptions(variable, filterFields, options);
                        query = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getSearchQuery(filterOptions, ' ' + (options.logicalOp || 'AND') + ' ', variable.ignoreCase);
                        if (options.filterExpr) {
                            var _clonedFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_.isObject(options.filterExpr) ? options.filterExpr : JSON.parse(options.filterExpr));
                            _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.processFilterFields(_clonedFields.rules, variable, options);
                            var filterExpQuery = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.generateSearchQuery(_clonedFields.rules, _clonedFields.condition, variable.ignoreCase, options.skipEncode);
                            if (query !== '') {
                                if (filterExpQuery !== '') {
                                    query = '(' + query + ') AND (' + filterExpQuery + ')';
                                }
                            }
                            else if (filterExpQuery !== '') {
                                query = filterExpQuery;
                            }
                        }
                        query = query ? ('q=' + query) : '';
                        action = 'searchTableDataWithQuery';
                        orderBy = _.isEmpty(options.orderBy) ? '' : 'sort=' + options.orderBy;
                        dbOperationOptions = {
                            projectID: projectID,
                            service: variable.getPrefabName() ? '' : 'services',
                            dataModelName: variable.liveSource,
                            entityName: relatedTable ? relatedTable.type : '',
                            page: options.page || 1,
                            size: options.pagesize || undefined,
                            url: variable.getPrefabName() ? (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl,
                            data: query || '',
                            filter: _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getWhereClauseGenerator(variable, options),
                            sort: orderBy
                        };
                        getRelatedTableDataSuccess = function (res, resolve) {
                            if (res && res.type) {
                                var response = res.body;
                                /*Remove the self related columns from the data. As backend is restricting the self related column to one level, In liveform select, dataset and datavalue object
                                 * equality does not work. So, removing the self related columns to acheive the quality*/
                                var data = _.map(response.content, function (o) { return _.omit(o, selfRelatedCols); });
                                var pagination = Object.assign({}, response);
                                delete pagination.content;
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.decodeData)(data);
                                var result = { data: data, pagination: pagination };
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, result);
                                resolve(result);
                            }
                        };
                        getRelatedTableDataError = function (errMsg, reject) {
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, errMsg);
                            reject(errMsg);
                        };
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, action, dbOperationOptions).then(function (response) {
                                getRelatedTableDataSuccess(response, resolve);
                            }, function (err) {
                                getRelatedTableDataError(err, reject);
                            });
                        });
                    };
                    /**
                     * Gets the distinct records for an entity
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     */
                    LiveVariableManager.prototype.getDistinctDataByFields = function (variable, options, success, error) {
                        var _this = this;
                        var dbOperation = 'getDistinctDataByFields';
                        var projectID = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.id || _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.projectName;
                        var requestData = {};
                        var sort;
                        var tableOptions, dbOperationOptions, getDistinctDataByFieldsSuccess, getDistinctDataByFieldsError;
                        options.skipEncode = true;
                        options.operation = 'read';
                        options = options || {};
                        tableOptions = _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.prepareTableOptions(variable, options);
                        if (tableOptions.query) {
                            requestData.filter = tableOptions.query;
                        }
                        requestData.groupByFields = _.isArray(options.fields) ? options.fields : [options.fields];
                        sort = options.sort || requestData.groupByFields[0] + ' asc';
                        sort = sort ? 'sort=' + sort : '';
                        dbOperationOptions = {
                            'projectID': projectID,
                            'service': variable.getPrefabName() ? '' : 'services',
                            'dataModelName': variable.liveSource,
                            'entityName': options.entityName || variable.type,
                            'page': options.page || 1,
                            'size': options.pagesize,
                            'sort': sort,
                            'data': requestData,
                            'filter': _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getWhereClauseGenerator(variable, options),
                            'url': variable.getPrefabName() ? (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.$rootScope.project.deployedUrl
                        };
                        getDistinctDataByFieldsSuccess = function (response, resolve) {
                            if (response && response.type) {
                                if ((response && response.error) || !response) {
                                    (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, response.error);
                                    return Promise.reject(response.error);
                                }
                                var result = response.body;
                                var pagination = Object.assign({}, response.body);
                                delete pagination.content;
                                result = { data: result.content, pagination: pagination };
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, result);
                                resolve(result);
                            }
                        };
                        getDistinctDataByFieldsError = function (errorMsg, reject) {
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error, errorMsg);
                            reject(errorMsg);
                        };
                        return new Promise(function (resolve, reject) {
                            _this.makeCall(variable, dbOperation, dbOperationOptions).then(function (response) {
                                getDistinctDataByFieldsSuccess(response, resolve);
                            }, function () {
                                getDistinctDataByFieldsError(error, reject);
                            });
                        });
                    };
                    /*Function to get the aggregated data based on the fields chosen*/
                    LiveVariableManager.prototype.getAggregatedData = function (variable, options, success, error) {
                        var deployedURL = _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.appManager.getDeployedURL();
                        if (deployedURL) {
                            return this.aggregateData(deployedURL, variable, options, success, error);
                        }
                    };
                    LiveVariableManager.prototype.defineFirstLastRecord = function (variable) {
                        if (variable.operation === 'read') {
                            Object.defineProperty(variable, 'firstRecord', {
                                'configurable': true,
                                'get': function () {
                                    return _.get(variable.dataSet, 'data[0]', {});
                                }
                            });
                            Object.defineProperty(variable, 'lastRecord', {
                                'configurable': true,
                                'get': function () {
                                    var data = _.get(variable.dataSet, 'data', []);
                                    return data[data.length - 1];
                                }
                            });
                        }
                    };
                    LiveVariableManager.prototype.getPrimaryKey = function (variable) {
                        return _util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_3__.LiveVariableUtils.getPrimaryKey(variable);
                    };
                    // Returns the search query params.
                    LiveVariableManager.prototype.prepareRequestParams = function (options) {
                        var requestParams;
                        var searchKeys = _.split(options.searchKey, ','), matchModes = _.split(options.matchMode, ','), formFields = {};
                        _.forEach(searchKeys, function (colName, index) {
                            formFields[colName] = {
                                value: options.query,
                                logicalOp: 'AND',
                                matchMode: matchModes[index] || matchModes[0] || 'startignorecase'
                            };
                        });
                        requestParams = {
                            filterFields: formFields,
                            page: options.page,
                            pagesize: options.limit || options.pagesize,
                            skipDataSetUpdate: true,
                            skipToggleState: true,
                            inFlightBehavior: 'executeAll',
                            logicalOp: 'OR',
                            orderBy: options.orderby ? _.replace(options.orderby, /:/g, ' ') : ''
                        };
                        if (options.onBeforeservicecall) {
                            options.onBeforeservicecall(formFields);
                        }
                        return requestParams;
                    };
                    /**
                     * Gets the filtered records based on searchKey
                     * @param variable
                     * @param options contains the searchKey and queryText
                     * @param success
                     * @param error
                     * @returns {Promise<any>}
                     */
                    LiveVariableManager.prototype.searchRecords = function (variable, options, success, error) {
                        var requestParams = this.prepareRequestParams(options);
                        return this.listRecords(variable, requestParams, success, error);
                    };
                    /**
                     * used in onBeforeUpdate call - called last in the function - used in old Variables using dataBinding.
                     * This function migrates the old data dataBinding to filterExpressions equivalent format
                     * @param variable
                     * @param inputData
                     * @private
                     */
                    LiveVariableManager.prototype.upgradeInputDataToFilterExpressions = function (variable, response, inputData) {
                        if (_.isObject(response)) {
                            inputData = response;
                            inputData.condition = 'AND';
                            inputData.rules = [];
                        }
                        /**
                         * if the user deletes a particular criteria, we need to remove this form our data aswell.
                         * so we are keeping a copy of it and the emptying the existing object and now fill it with the
                         * user set criteria. If its just modified, change the data and push it tohe rules or else just add a new criteria
                         */
                        var clonedRules = _.cloneDeep(inputData.rules);
                        inputData.rules = [];
                        _.forEach(inputData, function (valueObj, key) {
                            if (key !== 'condition' && key !== 'rules') {
                                var filteredObj = _.find(clonedRules, function (o) { return o.target === key; });
                                // if the key is found update the value, else create a new rule obj and add it to the existing rules
                                if (filteredObj) {
                                    filteredObj.value = valueObj.value;
                                    filteredObj.matchMode = valueObj.matchMode || valueObj.filterCondition || filteredObj.matchMode || '';
                                    inputData.rules.push(filteredObj);
                                }
                                else {
                                    inputData.rules.push({
                                        'target': key,
                                        'type': '',
                                        'matchMode': valueObj.matchMode || valueObj.filterCondition || '',
                                        'value': valueObj.value,
                                        'required': false
                                    });
                                }
                                delete inputData[key];
                            }
                        });
                        return inputData;
                    };
                    /**
                     * used in onBeforeUpdate call - called first in the function - used in old Variables using dataBinding.
                     * This function migrates the filterExpressions object to flat map structure
                     * @param variable
                     * @param inputData
                     * @private
                     */
                    LiveVariableManager.prototype.downgradeFilterExpressionsToInputData = function (variable, inputData) {
                        if (inputData.hasOwnProperty('getFilterFields')) {
                            inputData = inputData.getFilterFields();
                        }
                        _.forEach(inputData.rules, function (ruleObj) {
                            if (!_.isNil(ruleObj.target) && ruleObj.target !== '') {
                                inputData[ruleObj.target] = {
                                    'value': ruleObj.value,
                                    'matchMode': ruleObj.matchMode
                                };
                            }
                        });
                        return inputData;
                    };
                    LiveVariableManager.prototype.cancel = function (variable, options) {
                        if (_util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.requestsQueue.has(variable) && variable._observable) {
                            variable._observable.unsubscribe();
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_4__.$queue.process(variable);
                            // notify inflight variable
                            this.notifyInflight(variable, false);
                        }
                    };
                    return LiveVariableManager;
                }(_base_variable_manager__WEBPACK_IMPORTED_MODULE_1__.BaseVariableManager));
                /***/ 
            }),
            /***/ "./src/manager/variable/model-variable.manager.ts": 
            /*!********************************************************!*\
              !*** ./src/manager/variable/model-variable.manager.ts ***!
              \********************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ModelVariableManager": function () { return ( /* binding */ModelVariableManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _base_variable_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-variable.manager */ "./src/manager/variable/base-variable.manager.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var checkEmptyObject = function (obj) {
                    var isEmpty = true;
                    _.forEach(obj, function (value) {
                        if (_.isEmpty(value) && !_.isBoolean(value) && !_.isNumber(value)) {
                            return;
                        }
                        if (!_.isObject(value)) {
                            isEmpty = false;
                        }
                        else if (_.isArray(value)) {
                            // If array, check if array is empty or if it has only one value and the value is empty
                            isEmpty = _.isEmpty(value) || (value.length === 1 ? _.isEmpty(value[0]) : false);
                        }
                        else {
                            // If object, loop over the object to check if it is empty or not
                            isEmpty = checkEmptyObject(value);
                        }
                        return isEmpty; // isEmpty false will break the loop
                    });
                    return isEmpty;
                };
                var ModelVariableManager = /** @class */ (function (_super) {
                    __extends(ModelVariableManager, _super);
                    function ModelVariableManager() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    /*
                    * Case: a LIST type static variable having only one object
                    * and the object has all fields empty, remove that object
                    */
                    ModelVariableManager.prototype.removeFirstEmptyObject = function (variable) {
                        if (_.isArray(variable.dataSet) && variable.dataSet.length === 1 && checkEmptyObject(variable.dataSet[0])) {
                            variable.dataSet = [];
                        }
                    };
                    return ModelVariableManager;
                }(_base_variable_manager__WEBPACK_IMPORTED_MODULE_0__.BaseVariableManager));
                /***/ 
            }),
            /***/ "./src/manager/variable/service-variable.manager.ts": 
            /*!**********************************************************!*\
              !*** ./src/manager/variable/service-variable.manager.ts ***!
              \**********************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ServiceVariableManager": function () { return ( /* binding */ServiceVariableManager); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _util_file_upload_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/file-upload.util */ "./src/util/file-upload.util.ts");
                /* harmony import */ var _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/variable/service-variable.utils */ "./src/util/variable/service-variable.utils.ts");
                /* harmony import */ var _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/inflight-queue */ "./src/util/inflight-queue.ts");
                /* harmony import */ var _base_variable_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base-variable.manager */ "./src/manager/variable/base-variable.manager.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/oAuth.utils */ "./src/util/oAuth.utils.ts");
                /* harmony import */ var _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/variable/pagination.utils */ "./src/util/variable/pagination.utils.ts");
                /* harmony import */ var _model_base_variable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../model/base-variable */ "./src/model/base-variable.ts");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_10__);
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var ServiceVariableManager = /** @class */ (function (_super) {
                    __extends(ServiceVariableManager, _super);
                    function ServiceVariableManager() {
                        var _this = _super !== null && _super.apply(this, arguments) || this;
                        _this.fileUploadResponse = [];
                        _this.fileUploadCount = 0;
                        _this.totalFilesCount = 0;
                        _this.successFileUploadCount = 0;
                        _this.failedFileUploadCount = 0;
                        return _this;
                    }
                    /**
                     * function to process error response from a service
                     * @param {ServiceVariable} variable
                     * @param {string} errMsg
                     * @param {Function} errorCB
                     * @param xhrObj
                     * @param {boolean} skipNotification
                     * @param {boolean} skipDefaultNotification
                     */
                    ServiceVariableManager.prototype.processErrorResponse = function (variable, errMsg, errorCB, xhrObj, skipNotification, skipDefaultNotification) {
                        var methodInfo = this.getMethodInfo(variable, {}, {});
                        var securityDefnObj = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(methodInfo, 'securityDefinitions.0');
                        var advancedOptions = this.prepareCallbackOptions(xhrObj);
                        // EVENT: ON_ERROR
                        if (!skipNotification) {
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions, skipDefaultNotification);
                        }
                        if (lodash__WEBPACK_IMPORTED_MODULE_10___default().get(securityDefnObj, 'type') === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2
                            && lodash__WEBPACK_IMPORTED_MODULE_10___default().includes([_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.HTTP_STATUS_CODE.UNAUTHORIZED, _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.HTTP_STATUS_CODE.FORBIDDEN], lodash__WEBPACK_IMPORTED_MODULE_10___default().get(xhrObj, 'status'))) {
                            (0, _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_7__.removeAccessToken)(securityDefnObj['x-WM-PROVIDER_ID']);
                        }
                        /* trigger error callback */
                        (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorCB, errMsg);
                        if (!_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.CONSTANTS.isStudioMode) {
                            /* process next requests in the queue */
                            variable.canUpdate = true;
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                            // EVENT: ON_CAN_UPDATE
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);
                        }
                    };
                    /**
                     * function to process success response from a service
                     * @param response
                     * @param variable
                     * @param options
                     * @param success
                     */
                    ServiceVariableManager.prototype.processSuccessResponse = function (response, variable, options, success, resHeaders, operationInf) {
                        var dataSet;
                        var newDataSet;
                        var pagination = {};
                        var advancedOptions;
                        var jsonParsedResponse = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getValidJSON)(response);
                        response = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(jsonParsedResponse) ? jsonParsedResponse : ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.xmlToJson)(response) || response);
                        var isResponsePageable = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isPageable)(response);
                        if (variable.serviceType === 'DataService' || variable.serviceType === 'JavaService') {
                            var decodedData = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.decodeData)(response);
                            if (lodash__WEBPACK_IMPORTED_MODULE_10___default().isString(response)) {
                                response = decodedData;
                            }
                        }
                        if (isResponsePageable) {
                            dataSet = response.content;
                            pagination = lodash__WEBPACK_IMPORTED_MODULE_10___default().omit(response, 'content');
                        }
                        else {
                            dataSet = response;
                        }
                        /**
                         * send pagination object with advancedOptions all the time.
                         * With this, user can provide pagination option, even if it is not there.
                         * applicable to 3rd party services that do not support pagination out of the box.
                         */
                        advancedOptions = this.prepareCallbackOptions(options.xhrObj, { pagination: pagination, rawData: dataSet });
                        // EVENT: ON_RESULT
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);
                        // trigger success callback, pass data received from server as it is.
                        (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success, response, pagination);
                        /* if dataTransformation enabled, transform the data */
                        if (variable.transformationColumns) {
                            this.transformData(response, variable);
                        }
                        // if a primitive type response is returned, wrap it in an object
                        dataSet = (!lodash__WEBPACK_IMPORTED_MODULE_10___default().isObject(dataSet)) ? { 'value': dataSet } : dataSet;
                        // EVENT: ON_PREPARE_SETDATA
                        newDataSet = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataSet, advancedOptions);
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(newDataSet)) {
                            // setting newDataSet as the response to service variable onPrepareSetData
                            dataSet = newDataSet;
                        }
                        var inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.inputFields || variable.dataBinding);
                        // WMS-22361 : For crud variable, apply operation info recived else deduce for service variables
                        var operationInfo = operationInf ? operationInf : this.getMethodInfo(variable, inputFields, options);
                        var paginationInfo = _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_8__.PaginationUtils.getPaginationInfo(operationInfo, variable);
                        if (paginationInfo) {
                            var res = _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_8__.PaginationUtils.generatePaginationRes(operationInfo, paginationInfo, response, resHeaders, options, variable);
                            if (!lodash__WEBPACK_IMPORTED_MODULE_10___default().isEmpty(res)) {
                                _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_8__.PaginationUtils.setVariablePagination(variable, res, options);
                            }
                        }
                        /* update the dataset against the variable, if response is non-object, insert the response in 'value' field of dataSet */
                        if (!options.forceRunMode && !options.skipDataSetUpdate) {
                            if (!variable._paginationConfig) {
                                variable.pagination = pagination;
                            }
                            variable.dataSet = dataSet;
                            // legacy properties in dataSet, [content]
                            if (isResponsePageable) {
                                Object.defineProperty(variable.dataSet, 'content', {
                                    get: function () {
                                        return variable.dataSet;
                                    }
                                });
                            }
                        }
                        variable.notify(_model_base_variable__WEBPACK_IMPORTED_MODULE_9__.VariableEvents.AFTER_INVOKE, [this, dataSet]);
                        setTimeout(function () {
                            // EVENT: ON_SUCCESS
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataSet, advancedOptions);
                            if (!_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.CONSTANTS.isStudioMode) {
                                /* process next requests in the queue */
                                variable.canUpdate = true;
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                            }
                            // EVENT: ON_CAN_UPDATE
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataSet, advancedOptions);
                        });
                        return {
                            data: variable.dataSet,
                            pagination: variable.pagination
                        };
                    };
                    ServiceVariableManager.prototype.uploadFileInFormData = function (variable, options, success, error, file, requestParams) {
                        var _this = this;
                        var promise = (0, _util_file_upload_util__WEBPACK_IMPORTED_MODULE_1__.upload)(file, variable, requestParams.data, {
                            fileParamName: 'files',
                            url: requestParams.url
                        });
                        promise.then(function (data) {
                            _this.fileUploadCount++;
                            _this.successFileUploadCount++;
                            _this.fileUploadResponse.push(data[0]);
                            if (_this.totalFilesCount === _this.fileUploadCount) {
                                if (_this.failedFileUploadCount === 0) {
                                    _this.processSuccessResponse(_this.fileUploadResponse, variable, options, success);
                                    _this.fileUploadResponse = [];
                                    if (!variable.onSuccess) {
                                        _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager && _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.notifyApp(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.getAppLocale().MESSAGE_FILE_UPLOAD_SUCCESS, 'success');
                                    }
                                }
                                else {
                                    (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, _this.fileUploadResponse);
                                    _this.fileUploadResponse = [];
                                    _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager && _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.notifyApp(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.getAppLocale().MESSAGE_FILE_UPLOAD_ERROR, 'error');
                                }
                                _this.fileUploadCount = 0;
                                _this.successFileUploadCount = 0;
                                _this.totalFilesCount = 0;
                            }
                            return data;
                        }, function (e) {
                            _this.fileUploadCount++;
                            _this.failedFileUploadCount++;
                            _this.fileUploadResponse.push(e);
                            var errMsg = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.getErrMessage)(e, variable.httpService.getLocale());
                            // if a file upload failed, notify the progress listener to take action
                            if (variable._progressObservable) {
                                variable._progressObservable.next({
                                    'status': "error",
                                    'fileName': file.name,
                                    'errMsg': errMsg
                                });
                            }
                            if (_this.totalFilesCount === _this.fileUploadCount) {
                                _this.processErrorResponse(variable, errMsg, error, e, options.skipNotification);
                                _this.fileUploadResponse = [];
                                _this.fileUploadCount = 0;
                                _this.failedFileUploadCount = 0;
                                _this.totalFilesCount = 0;
                            }
                            return e;
                        }, function (data) {
                            if (variable._progressObservable) {
                                variable._progressObservable.next({
                                    'progress': data,
                                    'status': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.PROGRESS,
                                    'fileName': file.name
                                });
                            }
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.PROGRESS, variable, data);
                            return data;
                        });
                        return promise;
                    };
                    /**
                     * Checks if the user is logged in or not and returns appropriate error
                     * If user is not logged in, Session timeout logic is run, for user to login
                     * @param variable
                     * @returns {any}
                     */
                    ServiceVariableManager.prototype.handleAuthError = function (variable, success, errorCB, options) {
                        var isUserAuthenticated = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.securityService.get(), 'authenticated');
                        var info;
                        if (isUserAuthenticated) {
                            info = {
                                error: {
                                    message: 'You\'re not authorised to access the resource "' + variable.service + '".'
                                }
                            };
                        }
                        else {
                            info = {
                                error: {
                                    message: 'You\'re not authenticated to access the resource "' + variable.service + '".',
                                    skipDefaultNotification: true
                                }
                            };
                            _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.pushToSessionFailureRequests(variable.invoke.bind(variable, options, success, errorCB));
                            _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.appManager.handle401();
                        }
                        console.warn(variable.name + ': ' + info.error.message);
                        return info;
                    };
                    /**
                     * Handles error, when variable's metadata is not found. The reason for this can be:
                     *  - API is secure and user is not logged in
                     *  - API is secure and user is logged in but not authorized
                     *  - The servicedefs are not generated properly at the back end (need to edit the variable and re-run the project)
                     * @param info
                     * @param variable
                     * @param errorCB
                     * @param options
                     */
                    ServiceVariableManager.prototype.handleRequestMetaError = function (info, variable, success, errorCB, options) {
                        var err_type = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(info, 'error.type');
                        switch (err_type) {
                            case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN:
                                (0, _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_7__.performAuthorization)(undefined, info.securityDefnObj[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], this.invoke.bind(this, variable, options, success, errorCB), null, this.getProviderInfo(variable, info.securityDefnObj['x-WM-PROVIDER_ID']));
                                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, true, true);
                                break;
                            case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED:
                                info = this.handleAuthError(variable, success, errorCB, options);
                                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);
                                break;
                            case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING:
                            case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING:
                                if (info.error.message) {
                                    info.error.message = info.error.message.replace('$variable', variable.name);
                                    var reasons = void 0;
                                    if (err_type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING) {
                                        reasons = ['1. You did not Preview the app after creating a Variable for the imported service.', '2. You deleted the imported service this Variable is linked to.'];
                                    }
                                    else {
                                        reasons = ['1. You haven\'t chosen an endpoint for ' + options.operation + ' operation for this Entity.'];
                                    }
                                    console.warn(info.error.message + '\n Possible reasons for this:\n ' + reasons.join('\n '));
                                }
                                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);
                                break;
                            default:
                                if (info.error.message) {
                                    console.warn(info.error.message, variable.name);
                                    this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);
                                }
                        }
                        return info;
                    };
                    /**
                     * function to transform the service data as according to the variable configuration
                     * this is used when 'transformationColumns' property is set on the variable
                     * @param data: data returned from the service
                     * @variable: variable object triggering the service
                     */
                    ServiceVariableManager.prototype.transformData = function (data, variable) {
                        data.wmTransformedData = [];
                        var columnsArray = variable.transformationColumns, dataArray = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(data, variable.dataField) || [], transformedData = data.wmTransformedData;
                        lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(dataArray, function (datum, index) {
                            transformedData[index] = {};
                            lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(columnsArray, function (column, columnIndex) {
                                transformedData[index][column] = datum[columnIndex];
                            });
                        });
                    };
                    /**
                     * gets the service operation info against a service variable
                     * this is extracted from the metadataservice
                     * @param variable
                     * @param inputFields: sample values, if provided, will be set against params in the definition
                     * @param options
                     * @returns {any}
                     */
                    ServiceVariableManager.prototype.getMethodInfo = function (variable, inputFields, options) {
                        var methodInfo;
                        if (!lodash__WEBPACK_IMPORTED_MODULE_10___default().isEmpty(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService)) {
                            var serviceDef = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService.getByOperationId(variable.operationId, variable.getPrefabName()));
                            methodInfo = serviceDef === null ? null : lodash__WEBPACK_IMPORTED_MODULE_10___default().get(serviceDef, 'wmServiceOperationInfo');
                        }
                        else {
                            methodInfo = variable.serviceInfo;
                        }
                        if (!methodInfo) {
                            return methodInfo;
                        }
                        var securityDefnObj = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(methodInfo.securityDefinitions, '0'), isOAuthTypeService = securityDefnObj && (securityDefnObj.type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2);
                        if (methodInfo.parameters) {
                            methodInfo.parameters.forEach(function (param) {
                                // Ignore readOnly params in case of formData file params will be duplicated
                                if (param.readOnly) {
                                    return;
                                }
                                param.sampleValue = inputFields[param.name];
                                /* supporting pagination for query service variable */
                                if (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.PAGINATION_PARAMS.indexOf(param.name) !== -1) {
                                    if (param.name === 'size') {
                                        param.sampleValue = options.size || param.sampleValue || parseInt(variable.maxResults, 10);
                                    }
                                    else if (param.name === 'page') {
                                        param.sampleValue = options.page || param.sampleValue || 1;
                                    }
                                    else if (param.name === 'sort') {
                                        param.sampleValue = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.getEvaluatedOrderBy)(variable.orderBy, options.orderBy) || param.sampleValue || '';
                                    }
                                }
                                else if (param.name === 'access_token' && isOAuthTypeService) {
                                    param.sampleValue = (0, _util_oAuth_utils__WEBPACK_IMPORTED_MODULE_7__.getAccessToken)(securityDefnObj[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);
                                }
                            });
                        }
                        return methodInfo;
                    };
                    /**
                     * gets the provider info against a service variable's provider
                     * this is extracted from the metadataservice
                     * @param variable
                     * @param providerId
                     * @returns {any}
                     */
                    ServiceVariableManager.prototype.getProviderInfo = function (variable, providerId) {
                        return (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService === null || _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService === void 0 ? void 0 : _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService.getByProviderId(providerId, variable.getPrefabName()));
                    };
                    /**
                     * Returns true if any of the files are in onProgress state
                     */
                    ServiceVariableManager.prototype.isFileUploadInProgress = function (dataBindings) {
                        var filesStatus = false;
                        lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(dataBindings, function (dataBinding) {
                            if (lodash__WEBPACK_IMPORTED_MODULE_10___default().isArray(dataBinding) && dataBinding[0] instanceof File) {
                                lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(dataBinding, function (file) {
                                    if (file.status === 'onProgress') {
                                        filesStatus = true;
                                        return;
                                    }
                                });
                            }
                        });
                        return filesStatus;
                    };
                    // Makes the call for Uploading file/ files
                    ServiceVariableManager.prototype.uploadFile = function (variable, options, success, error, inputFields, requestParams) {
                        var _this = this;
                        var fileParamCount = 0;
                        var fileArr = [], promArr = [];
                        lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(inputFields, function (inputField) {
                            if (lodash__WEBPACK_IMPORTED_MODULE_10___default().isArray(inputField)) {
                                if (inputField[0] instanceof File) {
                                    fileParamCount++;
                                }
                                lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(inputField, function (input) {
                                    if (input instanceof File || lodash__WEBPACK_IMPORTED_MODULE_10___default().find(lodash__WEBPACK_IMPORTED_MODULE_10___default().values(input), function (o) { return o instanceof Blob; })) {
                                        fileArr.push(input);
                                        _this.totalFilesCount++;
                                        fileParamCount = fileParamCount || 1;
                                    }
                                });
                            }
                            else {
                                if (inputField instanceof File) {
                                    fileParamCount++;
                                    _this.totalFilesCount++;
                                    fileArr.push(inputField);
                                }
                            }
                        });
                        if (fileParamCount === 1) {
                            if (inputFields.files.length > 1) {
                                lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(fileArr, function (file) {
                                    promArr.push(_this.uploadFileInFormData(variable, options, success, error, file, requestParams));
                                });
                                return Promise.all(promArr);
                            }
                            else {
                                return this.uploadFileInFormData(variable, options, success, error, fileArr[0], requestParams);
                            }
                        }
                    };
                    /**
                     * proxy for the invoke call
                     * Request Info is constructed
                     * if error found, error is thrown
                     * else, call is made
                     * @param {ServiceVariable} variable
                     * @param options
                     * @param {Function} success
                     * @param {Function} error
                     * @returns {any}
                     * @private
                     */
                    ServiceVariableManager.prototype._invoke = function (variable, options, success, error) {
                        var _this = this;
                        var inputFields = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(options.inputFields || variable.dataBinding);
                        // EVENT: ON_BEFORE_UPDATE
                        var output = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, inputFields, options);
                        var successHandler;
                        var errorHandler;
                        if (output === false) {
                            _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            return;
                        }
                        if (lodash__WEBPACK_IMPORTED_MODULE_10___default().isObject(output)) {
                            inputFields = output;
                        }
                        var operationInfo = this.getMethodInfo(variable, inputFields, options);
                        var requestParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__.ServiceVariableUtils.constructRequestParams(variable, operationInfo, inputFields, options);
                        // check errors
                        if (requestParams.error) {
                            var info = this.handleRequestMetaError(requestParams, variable, success, error, options);
                            var reason = (lodash__WEBPACK_IMPORTED_MODULE_10___default().get(info, 'error.message') || 'An error occurred while triggering the variable: ') + ': ' + variable.name;
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            return Promise.reject(reason);
                        }
                        // file upload
                        if (_util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__.ServiceVariableUtils.isFileUploadRequest(variable)) {
                            var uploadPromise = this.uploadFile(variable, options, success, error, inputFields, requestParams);
                            if (uploadPromise) {
                                return uploadPromise;
                            }
                        }
                        // file download
                        if (operationInfo && lodash__WEBPACK_IMPORTED_MODULE_10___default().isArray(operationInfo.produces) && lodash__WEBPACK_IMPORTED_MODULE_10___default().includes(operationInfo.produces, _constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.WS_CONSTANTS.CONTENT_TYPES.OCTET_STREAM)) {
                            // ToDo - variable seperation
                            return variable.simulateFileDownload(requestParams, variable.dataBinding.file || variable.name, variable.dataBinding.exportType, function () {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, null, null, null);
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(success);
                            }, function () {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, null, null, null);
                                _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(error);
                            });
                        }
                        // notify variable progress
                        this.notifyInflight(variable, !options.skipToggleState);
                        successHandler = function (response, resolve) {
                            if (response && response.type || response && response.status) {
                                var res = response.body || response.data;
                                var data = _this.processSuccessResponse(res, variable, lodash__WEBPACK_IMPORTED_MODULE_10___default().extend(options, { 'xhrObj': response }), success, response.headers);
                                // notify variable success
                                _this.notifyInflight(variable, false, data);
                                resolve(response);
                            }
                        };
                        errorHandler = function (err, reject) {
                            var errMsg = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.getErrMessage)(err, variable.httpService.getLocale());
                            // notify variable error
                            _this.notifyInflight(variable, false);
                            _this.processErrorResponse(variable, errMsg, error, err, options.skipNotification);
                            reject({
                                error: errMsg,
                                details: err
                            });
                        };
                        // make the call and return a promise to the user to support script calls made by users
                        return new Promise(function (resolve, reject) {
                            requestParams.responseType = 'text'; // this is to return text response. JSON & XML-to-JSON parsing is handled in success handler.
                            // ToDo - variable seperation
                            // this.httpCall(requestParams, variable).then((response) => {
                            //     successHandler(response, resolve);
                            // }, err => {
                            //     const validJSON = getValidJSON(err.error);
                            //     err.error = isDefined(validJSON) ? validJSON : err.error;
                            //     errorHandler(err, reject);
                            // });
                            // the _observable property on variable is used store the observable using which the network call is made
                            // this can be used to cancel the variable calls.
                            variable.httpService.sendCall(requestParams, variable).then(function (response) {
                                successHandler(response, resolve);
                            }, function (err) {
                                var validJSON = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getValidJSON)(err.error);
                                err.error = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(validJSON) ? validJSON : err.error;
                                errorHandler(err, reject);
                            });
                        });
                    };
                    // *********************************************************** PUBLIC ***********************************************************//
                    ServiceVariableManager.prototype.invoke = function (variable, options, success, error) {
                        options = options || {};
                        // appManager.notify('check-state-persistence-options', {
                        //     options: options,
                        //     variable: variable
                        // });
                        options.inputFields = options.inputFields || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.dataBinding);
                        return _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.submit(variable).then(this._invoke.bind(this, variable, options, success, error), error);
                    };
                    ServiceVariableManager.prototype.setPagination = function (variable, data) {
                        variable._paginationConfig = data;
                    };
                    ServiceVariableManager.prototype.download = function (variable, options, successHandler, errorHandler) {
                        options = options || {};
                        var inputParams = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.dataBinding);
                        var inputData = options.data || {};
                        var methodInfo = this.getMethodInfo(variable, inputParams, options);
                        var requestParams;
                        methodInfo.relativePath += '/export';
                        requestParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__.ServiceVariableUtils.constructRequestParams(variable, methodInfo, inputParams);
                        requestParams.data = inputData;
                        requestParams.data.fields = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.formatExportExpression)(inputData.fields || []);
                        // extra options provided, these may be used in future for integrating export feature with ext. services
                        requestParams.method = options.httpMethod || 'POST';
                        requestParams.url = options.url || requestParams.url;
                        // If request params returns error then show an error toaster
                        if (lodash__WEBPACK_IMPORTED_MODULE_10___default().hasIn(requestParams, 'error.message')) {
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorHandler, requestParams.error.message);
                            return Promise.reject(requestParams.error.message);
                        }
                        return variable.httpService.send(requestParams).then(function (response) {
                            if (response && (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isValidWebURL)(response.body.result)) {
                                window.location.href = response.body.result;
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(successHandler, response);
                            }
                            else {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, response);
                                (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorHandler, response);
                            }
                        }, function (response, xhrObj) {
                            (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, xhrObj);
                            (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(errorHandler, response);
                        });
                    };
                    ServiceVariableManager.prototype.getInputParms = function (variable) {
                        var wmServiceOperationInfo;
                        if (!lodash__WEBPACK_IMPORTED_MODULE_10___default().isEmpty(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService)) {
                            wmServiceOperationInfo = lodash__WEBPACK_IMPORTED_MODULE_10___default().get(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.metadataService.getByOperationId(variable.operationId, variable.getPrefabName()), 'wmServiceOperationInfo');
                        }
                        else {
                            wmServiceOperationInfo = variable.serviceInfo;
                        }
                        return lodash__WEBPACK_IMPORTED_MODULE_10___default().get(wmServiceOperationInfo, 'parameters');
                    };
                    ServiceVariableManager.prototype.setInput = function (variable, key, val, options) {
                        return (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.setInput)(variable.dataBinding, key, val, options);
                    };
                    /**
                     * Cancels an on going service request
                     * @param variable
                     * @param $file
                     */
                    ServiceVariableManager.prototype.cancel = function (variable, $file) {
                        // CHecks if there is any pending requests in the queue
                        if (_util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.requestsQueue.has(variable)) {
                            // If the request is a File upload request then modify the elements associated with file upload
                            // else unsubscribe from the observable on the variable.
                            if (_util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__.ServiceVariableUtils.isFileUploadRequest(variable)) {
                                variable.httpService.cancel(variable, $file);
                                $file.status = 'abort';
                                this.totalFilesCount--;
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_6__.initiateCallback)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_5__.VARIABLE_CONSTANTS.EVENT.ABORT, variable, $file);
                                if (!this.isFileUploadInProgress(variable.dataBinding) && this.totalFilesCount === 0) {
                                    _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                                    // notify inflight variable
                                    this.notifyInflight(variable, false);
                                }
                            }
                            else {
                                if (variable.httpService.cancel) {
                                    variable.httpService.cancel(variable);
                                    _util_inflight_queue__WEBPACK_IMPORTED_MODULE_3__.$queue.process(variable);
                                    // notify inflight variable
                                    this.notifyInflight(variable, false);
                                }
                            }
                        }
                    };
                    ServiceVariableManager.prototype.defineFirstLastRecord = function (variable) {
                        if (variable.isList) {
                            Object.defineProperty(variable, 'firstRecord', {
                                'configurable': true,
                                'get': function () {
                                    var dataSet = variable.dataSet;
                                    // For procedure(v1) data doesn't come under content
                                    return lodash__WEBPACK_IMPORTED_MODULE_10___default().head(dataSet && dataSet.content) || lodash__WEBPACK_IMPORTED_MODULE_10___default().head(dataSet) || {};
                                }
                            });
                            Object.defineProperty(variable, 'lastRecord', {
                                'configurable': true,
                                'get': function () {
                                    var dataSet = variable.dataSet;
                                    // For procedure(v1) data doesn't come under content
                                    return lodash__WEBPACK_IMPORTED_MODULE_10___default().last(dataSet && dataSet.content) || lodash__WEBPACK_IMPORTED_MODULE_10___default().last(dataSet) || {};
                                }
                            });
                        }
                    };
                    // Gets the input params of the service variable and also add params from the searchKeys (filterfields)
                    ServiceVariableManager.prototype.getQueryParams = function (filterFields, searchValue, variable) {
                        var inputParams = this.getInputParms(variable);
                        var queryParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_2__.ServiceVariableUtils.excludePaginationParams(inputParams);
                        var inputFields = {};
                        // check if some param value is already available in databinding and update the inputFields accordingly
                        lodash__WEBPACK_IMPORTED_MODULE_10___default().map(variable.dataBinding, function (value, key) {
                            inputFields[key] = value;
                        });
                        // add the query params mentioned in the searchkey to inputFields
                        lodash__WEBPACK_IMPORTED_MODULE_10___default().forEach(filterFields, function (value) {
                            if (lodash__WEBPACK_IMPORTED_MODULE_10___default().includes(queryParams, value)) {
                                inputFields[value] = searchValue;
                            }
                        });
                        return inputFields;
                    };
                    /**
                     * This method returns filtered records based on searchKey and queryText.
                     * @param variable
                     * @param options
                     * @param success
                     * @param error
                     * @returns {Promise<any>}
                     */
                    ServiceVariableManager.prototype.searchRecords = function (variable, options, success, error) {
                        var inputFields = this.getQueryParams(lodash__WEBPACK_IMPORTED_MODULE_10___default().split(options.searchKey, ','), options.query, variable);
                        var requestParams = {
                            page: options.page,
                            pagesize: options.pagesize,
                            skipDataSetUpdate: true,
                            skipToggleState: true,
                            inFlightBehavior: 'executeAll',
                            inputFields: inputFields
                        };
                        if (options.onBeforeservicecall) {
                            options.onBeforeservicecall(inputFields);
                        }
                        return this.invoke(variable, requestParams, success, error).catch(_util_utils__WEBPACK_IMPORTED_MODULE_0__.noop);
                    };
                    return ServiceVariableManager;
                }(_base_variable_manager__WEBPACK_IMPORTED_MODULE_4__.BaseVariableManager));
                /***/ 
            }),
            /***/ "./src/model/action/timer-action.ts": 
            /*!******************************************!*\
              !*** ./src/model/action/timer-action.ts ***!
              \******************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "TimerAction": function () { return ( /* binding */TimerAction); }
                    /* harmony export */ 
                });
                /* harmony import */ var _base_action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base-action */ "./src/model/base-action.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../factory/variable-manager.factory */ "./src/factory/variable-manager.factory.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var getManager = function () {
                    return _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__.VariableManagerFactory.get(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.TIMER);
                };
                var TimerAction = /** @class */ (function (_super) {
                    __extends(TimerAction, _super);
                    function TimerAction(variable) {
                        var _this = _super.call(this) || this;
                        _this.repeating = false;
                        _this._isFired = false;
                        Object.assign(_this, variable);
                        return _this;
                    }
                    // Backward compatible method
                    TimerAction.prototype.fire = function (options, success, error) {
                        if (this.repeating) {
                            this.currentOptions = options;
                            this._isFired = true;
                        }
                        return getManager().trigger(this, options, success, error);
                    };
                    TimerAction.prototype.invoke = function (options, success, error) {
                        return this.fire(options, success, error);
                    };
                    TimerAction.prototype.cancel = function () {
                        return getManager().cancel(this);
                    };
                    TimerAction.prototype.mute = function () {
                        _super.prototype.mute.call(this);
                        if (this.repeating) {
                            this.cancel();
                        }
                    };
                    TimerAction.prototype.unmute = function () {
                        _super.prototype.unmute.call(this);
                        if (this.repeating && this._isFired) {
                            this.fire(this.currentOptions, null, null);
                        }
                    };
                    return TimerAction;
                }(_base_action__WEBPACK_IMPORTED_MODULE_0__.BaseAction));
                /***/ 
            }),
            /***/ "./src/model/base-action.ts": 
            /*!**********************************!*\
              !*** ./src/model/base-action.ts ***!
              \**********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "BaseAction": function () { return ( /* binding */BaseAction); }
                    /* harmony export */ 
                });
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/types */ "./src/types/types.ts");
                /* harmony import */ var _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/dataset-util */ "./src/util/dataset-util.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/utils */ "./src/util/utils.ts");
                var BaseAction = /** @class */ (function () {
                    function BaseAction() {
                        this.isMuted = false;
                    }
                    BaseAction.prototype.execute = function (operation, options) {
                        var returnVal;
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_NAME:
                                returnVal = this.name;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_UNIQUE_IDENTIFIER:
                                returnVal = this._id;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_CONTEXT_IDENTIFIER:
                                returnVal = this._context;
                                break;
                        }
                        return returnVal;
                    };
                    BaseAction.prototype.invokeOnParamChange = function (obj, newVal, oldVal) {
                        var target = obj.target, root = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTarget)(this), targetObj = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTargetObj)(obj, root, this), targetNodeKey = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTargetNodeKey)(target);
                        if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && (!_.isUndefined(oldVal) || !_.isUndefined(targetObj[targetNodeKey])))) {
                            return;
                        }
                        // Skip cloning for blob column
                        if (!_.includes(['blob', 'file'], obj.type)) {
                            newVal = (0, _util_utils__WEBPACK_IMPORTED_MODULE_3__.getClonedObject)(newVal);
                        }
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.setValueToNode)(target, obj, root, this, newVal); // cloning newVal to keep the source clean
                        return Promise.resolve(this);
                    };
                    BaseAction.prototype.getData = function () {
                        return this.dataSet;
                    };
                    BaseAction.prototype.setData = function (dataSet) {
                        if (_util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].isValidDataset(dataSet)) {
                            this.dataSet = dataSet;
                        }
                        return this.dataSet;
                    };
                    BaseAction.prototype.getValue = function (key, index) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getValue(this.dataSet, key, index);
                    };
                    BaseAction.prototype.setValue = function (key, value) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].setValue(this.dataSet, key, value);
                    };
                    BaseAction.prototype.getItem = function (index) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getItem(this.dataSet, index);
                    };
                    /**
                     *
                     * @param index, a number in ideal case
                     *        it can be the object to be replaced by the passed value
                     * @param value
                     * @returns {any}
                     */
                    BaseAction.prototype.setItem = function (index, value) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].setItem(this.dataSet, index, value);
                    };
                    BaseAction.prototype.addItem = function (value, index) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].addItem(this.dataSet, value, index);
                    };
                    BaseAction.prototype.removeItem = function (index, exactMatch) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].removeItem(this.dataSet, index, exactMatch);
                    };
                    BaseAction.prototype.clearData = function () {
                        this.dataSet = _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getValidDataset();
                        return this.dataSet;
                    };
                    BaseAction.prototype.getCount = function () {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getCount(this.dataSet);
                    };
                    BaseAction.prototype.init = function () {
                    };
                    BaseAction.prototype.mute = function () {
                        this.isMuted = true;
                    };
                    BaseAction.prototype.unmute = function () {
                        this.isMuted = false;
                    };
                    return BaseAction;
                }());
                /***/ 
            }),
            /***/ "./src/model/base-variable.ts": 
            /*!************************************!*\
              !*** ./src/model/base-variable.ts ***!
              \************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "BaseVariable": function () { return ( /* binding */BaseVariable); },
                    /* harmony export */ "VariableEvents": function () { return ( /* binding */VariableEvents); }
                    /* harmony export */ 
                });
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/types */ "./src/types/types.ts");
                /* harmony import */ var _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/dataset-util */ "./src/util/dataset-util.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _types_event_notifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/event-notifier */ "./src/types/event-notifier.ts");
                var VariableEvents;
                (function (VariableEvents) {
                    VariableEvents["BEFORE_INVOKE"] = "beforeInvoke";
                    VariableEvents["AFTER_INVOKE"] = "afterInvoke";
                })(VariableEvents || (VariableEvents = {}));
                ;
                var BaseVariable = /** @class */ (function () {
                    function BaseVariable() {
                        this.isMuted = false;
                        this.eventNotifier = new _types_event_notifier__WEBPACK_IMPORTED_MODULE_4__.DefaultEventNotifier();
                    }
                    BaseVariable.prototype.notify = function (event, args) {
                        this.eventNotifier.notify(event, args);
                    };
                    BaseVariable.prototype.subscribe = function (event, fn) {
                        return this.eventNotifier.subscribe(event, fn);
                    };
                    BaseVariable.prototype.execute = function (operation, options) {
                        var returnVal;
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_NAME:
                                returnVal = this.name;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_UNIQUE_IDENTIFIER:
                                returnVal = this._id;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_CONTEXT_IDENTIFIER:
                                returnVal = this._context;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.ADD_ITEM:
                                returnVal = this.addItem(options.item, _.omit(options, 'item'));
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.SET_ITEM:
                                returnVal = this.setItem(options.prevItem, options.item, _.omit(options, 'prevItem', 'item'));
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.REMOVE_ITEM:
                                returnVal = this.removeItem(options.item, _.omit(options, 'item'));
                                break;
                        }
                        return returnVal;
                    };
                    BaseVariable.prototype.invokeOnParamChange = function (obj, newVal, oldVal) {
                        var runMode = true;
                        if (!obj) {
                            return;
                        }
                        var target = obj === null || obj === void 0 ? void 0 : obj.target, root = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTarget)(this), targetObj = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTargetObj)(obj, root, this), targetNodeKey = (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.getTargetNodeKey)(target);
                        if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && (!_.isUndefined(oldVal) || !_.isUndefined(targetObj[targetNodeKey])))) {
                            return;
                        }
                        // Skip cloning for blob column
                        if (!_.includes(['blob', 'file'], obj.type)) {
                            newVal = (0, _util_utils__WEBPACK_IMPORTED_MODULE_3__.getClonedObject)(newVal);
                        }
                        (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.setValueToNode)(target, obj, root, this, newVal); // cloning newVal to keep the source clean
                        if (runMode) {
                            /*set the internal bound node map with the latest updated value*/
                            if (!_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.internalBoundNodeMap.has(this)) {
                                _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.internalBoundNodeMap.set(this, {});
                            }
                            _.set(_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.internalBoundNodeMap.get(this), [this.name, root, target], newVal);
                            /*update the internal nodes after internal node map is set*/
                            if (_.isObject(newVal)) {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_2__.updateInternalNodes)(target, root, this);
                            }
                        }
                        return Promise.resolve(this);
                    };
                    BaseVariable.prototype.getData = function () {
                        return this.dataSet;
                    };
                    BaseVariable.prototype.setData = function (dataSet) {
                        if (_util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].isValidDataset(dataSet, this.isList)) {
                            this.dataSet = dataSet;
                        }
                        return this.dataSet;
                    };
                    BaseVariable.prototype.getValue = function (key, index) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getValue(this.dataSet, key, index, this.isList);
                    };
                    BaseVariable.prototype.setValue = function (key, value) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].setValue(this.dataSet, key, value, this.isList);
                    };
                    BaseVariable.prototype.getItem = function (index) {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getItem(this.dataSet, index, this.isList);
                    };
                    /**
                     *
                     * @param index, a number in ideal case
                     *        it can be the object to be replaced by the passed value
                     * @param value
                     * @returns {any}
                     */
                    BaseVariable.prototype.setItem = function (index, value, options) {
                        options = this.getChildDetails(options);
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].setItem(this.dataSet, index, value, options);
                    };
                    /**
                     * This method is to get target node options like path, parentIndex and isList
                     * @param options: provided options
                     * @returns {object}
                     * Example: if we have parent dataset as object and we are performing operations on inner list then we have to set isList as true.
                     * So finding the target node type and updating the isList option.
                     */
                    BaseVariable.prototype.getChildDetails = function (options) {
                        var parentIndex, isList = this.isList, path;
                        if (options && options.path) {
                            path = options.path;
                            var targetNode = void 0;
                            if (isList) {
                                parentIndex = options.parentIndex || 0;
                                targetNode = _.get(this.dataSet[parentIndex], options.path);
                            }
                            else {
                                targetNode = _.get(this.dataSet, options.path);
                            }
                            isList = targetNode ? _.isArray(targetNode) ? true : false : true;
                        }
                        return { path: path, isList: isList, parentIndex: parentIndex };
                    };
                    BaseVariable.prototype.addItem = function (value, options) {
                        var index;
                        if (_.isNumber(options)) {
                            index = options;
                        }
                        if (_.isObject(options)) {
                            index = options.index;
                        }
                        options = this.getChildDetails(options);
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].addItem(this.dataSet, value, index, options);
                    };
                    BaseVariable.prototype.removeItem = function (index, options) {
                        var exactMatch, parentIndex;
                        if (options) {
                            if (_.isBoolean(options)) {
                                exactMatch = options;
                            }
                            if (_.isObject(options)) {
                                exactMatch = options.exactMatch;
                                if (this.isList) {
                                    parentIndex = options.parentIndex || 0;
                                }
                            }
                        }
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].removeItem(this.dataSet, index, { exactMatch: exactMatch, path: _.get(options, 'path'), parentIndex: parentIndex });
                    };
                    BaseVariable.prototype.clearData = function () {
                        this.dataSet = _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getValidDataset(this.isList);
                        return this.dataSet;
                    };
                    BaseVariable.prototype.getCount = function () {
                        return _util_dataset_util__WEBPACK_IMPORTED_MODULE_1__["default"].getCount(this.dataSet, this.isList);
                    };
                    /**
                     * Return the prefab name if the variable is form a prefab
                     * @returns {string}
                     */
                    BaseVariable.prototype.getPrefabName = function () {
                        var prefabname = this._context && (this._context.prefabname || this._context.prefabName);
                        // __self__ is a prefab name given to a prefab which is run in preview mode
                        return prefabname !== '__self__' && prefabname;
                    };
                    BaseVariable.prototype.mute = function () {
                        this.isMuted = true;
                    };
                    BaseVariable.prototype.unmute = function () {
                        this.isMuted = false;
                    };
                    BaseVariable.prototype.destroy = function () {
                    };
                    return BaseVariable;
                }());
                /***/ 
            }),
            /***/ "./src/model/crud-create.ts": 
            /*!**********************************!*\
              !*** ./src/model/crud-create.ts ***!
              \**********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CRUDCreate": function () { return ( /* binding */CRUDCreate); }
                    /* harmony export */ 
                });
                var CRUDCreate = /** @class */ (function () {
                    function CRUDCreate(variable, manager) {
                        this.variable = variable;
                        this.manager = manager;
                    }
                    CRUDCreate.prototype.setInput = function (key, val, options) {
                        return this.manager.setInput(this.variable, key, val, options, 'create');
                    };
                    CRUDCreate.prototype.invoke = function (options, success, error) {
                        options = options || {};
                        options.operation = 'create';
                        return this.manager.invoke(this.variable, options, success, error);
                    };
                    return CRUDCreate;
                }());
                /***/ 
            }),
            /***/ "./src/model/crud-delete.ts": 
            /*!**********************************!*\
              !*** ./src/model/crud-delete.ts ***!
              \**********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CRUDDelete": function () { return ( /* binding */CRUDDelete); }
                    /* harmony export */ 
                });
                var CRUDDelete = /** @class */ (function () {
                    function CRUDDelete(variable, manager) {
                        this.variable = variable;
                        this.manager = manager;
                    }
                    CRUDDelete.prototype.setInput = function (key, val, options) {
                        return this.manager.setInput(this.variable, key, val, options, 'delete');
                    };
                    CRUDDelete.prototype.invoke = function (options, success, error) {
                        options = options || {};
                        options.operation = 'delete';
                        return this.manager.invoke(this.variable, options, success, error);
                    };
                    return CRUDDelete;
                }());
                /***/ 
            }),
            /***/ "./src/model/crud-list.ts": 
            /*!********************************!*\
              !*** ./src/model/crud-list.ts ***!
              \********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CRUDList": function () { return ( /* binding */CRUDList); }
                    /* harmony export */ 
                });
                var CRUDList = /** @class */ (function () {
                    function CRUDList(variable, manager) {
                        this.variable = variable;
                        this.manager = manager;
                    }
                    CRUDList.prototype.setInput = function (key, val, options) {
                        return this.manager.setInput(this.variable, key, val, options, 'list');
                    };
                    CRUDList.prototype.invoke = function (options, success, error) {
                        options = options || {};
                        options.operation = 'list';
                        return this.manager.invoke(this.variable, options, success, error);
                    };
                    return CRUDList;
                }());
                /***/ 
            }),
            /***/ "./src/model/crud-update.ts": 
            /*!**********************************!*\
              !*** ./src/model/crud-update.ts ***!
              \**********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CRUDUpdate": function () { return ( /* binding */CRUDUpdate); }
                    /* harmony export */ 
                });
                var CRUDUpdate = /** @class */ (function () {
                    function CRUDUpdate(variable, manager) {
                        this.variable = variable;
                        this.manager = manager;
                    }
                    CRUDUpdate.prototype.setInput = function (key, val, options) {
                        return this.manager.setInput(this.variable, key, val, options, 'update');
                    };
                    CRUDUpdate.prototype.invoke = function (options, success, error) {
                        options = options || {};
                        options.operation = 'update';
                        return this.manager.invoke(this.variable, options, success, error);
                    };
                    return CRUDUpdate;
                }());
                /***/ 
            }),
            /***/ "./src/model/variable/api-aware-variable.ts": 
            /*!**************************************************!*\
              !*** ./src/model/variable/api-aware-variable.ts ***!
              \**************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ApiAwareVariable": function () { return ( /* binding */ApiAwareVariable); }
                    /* harmony export */ 
                });
                /* harmony import */ var _base_variable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base-variable */ "./src/model/base-variable.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var ApiAwareVariable = /** @class */ (function (_super) {
                    __extends(ApiAwareVariable, _super);
                    function ApiAwareVariable() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    return ApiAwareVariable;
                }(_base_variable__WEBPACK_IMPORTED_MODULE_0__.BaseVariable));
                /***/ 
            }),
            /***/ "./src/model/variable/crud-variable.ts": 
            /*!*********************************************!*\
              !*** ./src/model/variable/crud-variable.ts ***!
              \*********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "CrudVariable": function () { return ( /* binding */CrudVariable); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/types */ "./src/types/types.ts");
                /* harmony import */ var _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../factory/variable-manager.factory */ "./src/factory/variable-manager.factory.ts");
                /* harmony import */ var _api_aware_variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-aware-variable */ "./src/model/variable/api-aware-variable.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/variable/service-variable.utils */ "./src/util/variable/service-variable.utils.ts");
                /* harmony import */ var _crud_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../crud-list */ "./src/model/crud-list.ts");
                /* harmony import */ var _crud_create__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crud-create */ "./src/model/crud-create.ts");
                /* harmony import */ var _crud_update__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../crud-update */ "./src/model/crud-update.ts");
                /* harmony import */ var _crud_delete__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../crud-delete */ "./src/model/crud-delete.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var getManager = function () {
                    return _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__.VariableManagerFactory.get(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CATEGORY.CRUD);
                };
                var CrudVariable = /** @class */ (function (_super) {
                    __extends(CrudVariable, _super);
                    function CrudVariable(variable) {
                        var _this = _super.call(this) || this;
                        Object.assign(_this, variable);
                        // for having separate setInput methods for each type
                        _this.list = new _crud_list__WEBPACK_IMPORTED_MODULE_6__.CRUDList(_this, getManager());
                        _this.create = new _crud_create__WEBPACK_IMPORTED_MODULE_7__.CRUDCreate(_this, getManager());
                        _this.update = new _crud_update__WEBPACK_IMPORTED_MODULE_8__.CRUDUpdate(_this, getManager());
                        _this.delete = new _crud_delete__WEBPACK_IMPORTED_MODULE_9__.CRUDDelete(_this, getManager());
                        return _this;
                    }
                    CrudVariable.prototype.execute = function (operation, options) {
                        var returnVal = _super.prototype.execute.call(this, operation, options);
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(returnVal)) {
                            return returnVal;
                        }
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_API_AWARE:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_CRUD:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_DISTINCT_API:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_PAGEABLE:
                                returnVal = this.hasPagination();
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_SORTABLE:
                                returnVal = this.hasPagination() && !this._paginationConfig;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_SERVER_FILTER:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SET_INPUT:
                                returnVal = this.setInput(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.LIST_RECORDS:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.INVOKE:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.UPDATE:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SEARCH_RECORDS:
                                returnVal = this.searchRecords(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.DOWNLOAD:
                                returnVal = this.download(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_PAGING_OPTIONS:
                                returnVal = this.pagination;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_UPDATE_REQUIRED:
                                returnVal = this.isUpdateRequired(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_BOUND_TO_LOCALE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.CANCEL:
                                returnVal = this.cancel(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.INSERT_RECORD:
                                options.operation = 'create';
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.UPDATE_RECORD:
                                options.operation = 'update';
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.DELETE_RECORD:
                                options.operation = 'delete';
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SET_PAGINATION:
                                returnVal = this.setPagination(options);
                                break;
                            default:
                                returnVal = {};
                                break;
                        }
                        return returnVal;
                    };
                    CrudVariable.prototype.hasPagination = function () {
                        return this.controller === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY || !_.isEmpty(this.pagination);
                    };
                    CrudVariable.prototype.invoke = function (options, success, error) {
                        return getManager().invoke(this, options, success, error);
                    };
                    CrudVariable.prototype.createRecord = function (options, success, error) {
                        options = options || {};
                        options.operation = 'create';
                        return getManager().invoke(this, options, success, error);
                    };
                    CrudVariable.prototype.listRecords = function (options, success, error) {
                        options = options || {};
                        options.operation = 'list';
                        return getManager().invoke(this, options, success, error);
                    };
                    CrudVariable.prototype.updateRecord = function (options, success, error) {
                        options = options || {};
                        options.operation = 'update';
                        return getManager().invoke(this, options, success, error);
                    };
                    CrudVariable.prototype.deleteRecord = function (options, success, error) {
                        options = options || {};
                        options.operation = 'delete';
                        return getManager().invoke(this, options, success, error);
                    };
                    CrudVariable.prototype.download = function (options, success, error) {
                        return getManager().download(this, options, success, error);
                    };
                    CrudVariable.prototype.setInput = function (key, val, options) {
                        return getManager().setInput(this, key, val, options);
                    };
                    CrudVariable.prototype.searchRecords = function (options, success, error) {
                        var _this = this;
                        return new Promise(function (resolve, reject) {
                            getManager().searchRecords(_this, options, function (response, pagination) {
                                resolve({ data: response.content || response, pagination: pagination });
                            }, reject);
                        });
                    };
                    CrudVariable.prototype.isUpdateRequired = function (hasData) {
                        var inputFields = getManager().getInputParms(this);
                        var queryParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_5__.ServiceVariableUtils.excludePaginationParams(inputFields);
                        if (!queryParams.length) {
                            // if we don't have any query params and variable data is available then we don't need variable update, so return false
                            if (hasData) {
                                return false;
                            }
                        }
                        return true;
                    };
                    CrudVariable.prototype.cancel = function (options) {
                        return getManager().cancel(this, options);
                    };
                    CrudVariable.prototype.setPagination = function (data) {
                        return getManager().setPagination(this, data);
                    };
                    CrudVariable.prototype.init = function () {
                        getManager().initBinding(this);
                        getManager().defineFirstLastRecord(this);
                    };
                    return CrudVariable;
                }(_api_aware_variable__WEBPACK_IMPORTED_MODULE_3__.ApiAwareVariable));
                /***/ 
            }),
            /***/ "./src/model/variable/live-variable.ts": 
            /*!*********************************************!*\
              !*** ./src/model/variable/live-variable.ts ***!
              \*********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "LiveVariable": function () { return ( /* binding */LiveVariable); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/types */ "./src/types/types.ts");
                /* harmony import */ var _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../factory/variable-manager.factory */ "./src/factory/variable-manager.factory.ts");
                /* harmony import */ var _api_aware_variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-aware-variable */ "./src/model/variable/api-aware-variable.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var getManager = function () {
                    return _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__.VariableManagerFactory.get(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CATEGORY.LIVE);
                };
                var LiveVariable = /** @class */ (function (_super) {
                    __extends(LiveVariable, _super);
                    function LiveVariable(variable) {
                        var _this = _super.call(this) || this;
                        Object.assign(_this, variable);
                        return _this;
                    }
                    LiveVariable.prototype.execute = function (operation, options) {
                        var returnVal = _super.prototype.execute.call(this, operation, options);
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(returnVal)) {
                            return returnVal;
                        }
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_API_AWARE:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_CRUD:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_DISTINCT_API:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_PAGEABLE:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_SORTABLE:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_SERVER_FILTER:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_OPERATION_TYPE:
                                returnVal = this.operation;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_RELATED_PRIMARY_KEYS:
                                returnVal = this.getRelatedTablePrimaryKeys(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_ENTITY_NAME:
                                returnVal = this.propertiesMap.entityName;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.LIST_RECORDS:
                                returnVal = this.listRecords(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.UPDATE_RECORD:
                                returnVal = this.updateRecord(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.INSERT_RECORD:
                                returnVal = this.insertRecord(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.DELETE_RECORD:
                                returnVal = this.deleteRecord(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.INVOKE:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.UPDATE:
                                returnVal = this.update(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_RELATED_TABLE_DATA:
                                returnVal = this.getRelatedTableData(options.relatedField, options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS:
                                returnVal = this.getDistinctDataByFields(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_AGGREGATED_DATA:
                                returnVal = this.getAggregatedData(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_MATCH_MODE:
                                returnVal = this.matchMode;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.DOWNLOAD:
                                returnVal = this.download(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_PROPERTIES_MAP:
                                returnVal = this.propertiesMap;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_PRIMARY_KEY:
                                returnVal = this.getPrimaryKey();
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_BLOB_URL:
                                returnVal = "services/" + this.liveSource + "/" + this.type + "/" + options.primaryValue + "/content/" + options.columnName;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_OPTIONS:
                                returnVal = this._options || {};
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SEARCH_RECORDS:
                                returnVal = this.searchRecords(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_REQUEST_PARAMS:
                                returnVal = this.getRequestParams(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_PAGING_OPTIONS:
                                returnVal = this.pagination;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_UPDATE_REQUIRED:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_BOUND_TO_LOCALE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.CANCEL:
                                returnVal = false;
                                break;
                            default:
                                returnVal = {};
                                break;
                        }
                        return returnVal;
                    };
                    LiveVariable.prototype.listRecords = function (options, success, error) {
                        return getManager().listRecords(this, options, success, error);
                    };
                    LiveVariable.prototype.updateRecord = function (options, success, error) {
                        return getManager().updateRecord(this, options, success, error);
                    };
                    LiveVariable.prototype.insertRecord = function (options, success, error) {
                        return getManager().insertRecord(this, options, success, error);
                    };
                    LiveVariable.prototype.deleteRecord = function (options, success, error) {
                        return getManager().deleteRecord(this, options, success, error);
                    };
                    LiveVariable.prototype.setInput = function (key, val, options) {
                        return getManager().setInput(this, key, val, options);
                    };
                    LiveVariable.prototype.setFilter = function (key, val) {
                        return getManager().setFilter(this, key, val);
                    };
                    LiveVariable.prototype.download = function (options, success, error) {
                        return getManager().download(this, options, success, error);
                    };
                    LiveVariable.prototype.invoke = function (options, success, error) {
                        switch (this.operation) {
                            case 'insert':
                                return this.insertRecord(options, success, error);
                            case 'update':
                                return this.updateRecord(options, success, error);
                            case 'delete':
                                return this.deleteRecord(options, success, error);
                            default:
                                return this.listRecords(options, success, error);
                        }
                    };
                    LiveVariable.prototype.getRelatedTablePrimaryKeys = function (columnName) {
                        return getManager().getRelatedTablePrimaryKeys(this, columnName);
                    };
                    LiveVariable.prototype.getRelatedTableData = function (columnName, options, success, error) {
                        return getManager().getRelatedTableData(this, columnName, options, success, error);
                    };
                    LiveVariable.prototype.getDistinctDataByFields = function (options, success, error) {
                        return getManager().getDistinctDataByFields(this, options, success, error);
                    };
                    LiveVariable.prototype.getAggregatedData = function (options, success, error) {
                        return getManager().getAggregatedData(this, options, success, error);
                    };
                    LiveVariable.prototype.getPrimaryKey = function () {
                        return getManager().getPrimaryKey(this);
                    };
                    LiveVariable.prototype.searchRecords = function (options, success, error) {
                        return getManager().searchRecords(this, options, success, error);
                    };
                    LiveVariable.prototype.getRequestParams = function (options) {
                        return getManager().prepareRequestParams(options);
                    };
                    LiveVariable.prototype._downgradeInputData = function (data) {
                        return getManager().downgradeFilterExpressionsToInputData(this, data);
                    };
                    LiveVariable.prototype._upgradeInputData = function (response, data) {
                        return getManager().upgradeInputDataToFilterExpressions(this, response, data);
                    };
                    LiveVariable.prototype.setOrderBy = function (expression) {
                        this.orderBy = expression;
                        return this.orderBy;
                    };
                    // legacy method
                    LiveVariable.prototype.update = function (options, success, error) {
                        return this.invoke(options, success, error);
                    };
                    LiveVariable.prototype.createRecord = function (options, success, error) {
                        return this.insertRecord(options, success, error);
                    };
                    LiveVariable.prototype.init = function () {
                        getManager().initBinding(this, 'dataBinding', this.operation === 'read' ? 'filterFields' : 'inputFields');
                        if (this.operation === 'read') {
                            getManager().initFilterExpressionBinding(this);
                        }
                        getManager().defineFirstLastRecord(this);
                    };
                    LiveVariable.prototype.invokeOnFiltertExpressionChange = function (obj, targetNodeKey, newVal, oldVal) {
                        console.log('filter expr changed', newVal, oldVal);
                        if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && !_.isUndefined(oldVal))) {
                            return;
                        }
                        // Skip cloning for blob column
                        if (!_.includes(['blob', 'file'], obj.type)) {
                            newVal = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(newVal);
                        }
                        // backward compatibility: where we are allowing the user to bind complete object
                        if (obj.target === 'dataBinding') {
                            // remove the existing databinding element
                            this.filterExpressions.rules = [];
                            // now add all the returned values
                            _.forEach(newVal, function (value, target) {
                                this.filterExpressions.rules.push({
                                    'target': target,
                                    'value': value,
                                    'matchMode': obj.matchMode || 'startignorecase',
                                    'required': false,
                                    'type': ''
                                });
                            });
                        }
                        else {
                            // setting value to the root node
                            obj[targetNodeKey] = newVal;
                        }
                        if (this.operation === 'read') {
                            /* if auto-update set for the variable with read operation only, get its data */
                            if (this.autoUpdate && !_.isUndefined(newVal) && _.isFunction(this.update)) {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_5__.debounceVariableCall)(this, 'update');
                            }
                        }
                        else {
                            /* if auto-update set for the variable with read operation only, get its data */
                            if (this.autoUpdate && !_.isUndefined(newVal) && _.isFunction(this[this.operation + 'Record'])) {
                                (0, _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_5__.debounceVariableCall)(this, this.operation + 'Record');
                            }
                        }
                        // this.invoke();
                    };
                    LiveVariable.prototype.cancel = function (options) {
                        return getManager().cancel(this, options);
                    };
                    return LiveVariable;
                }(_api_aware_variable__WEBPACK_IMPORTED_MODULE_3__.ApiAwareVariable));
                /***/ 
            }),
            /***/ "./src/model/variable/model-variable.ts": 
            /*!**********************************************!*\
              !*** ./src/model/variable/model-variable.ts ***!
              \**********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ModelVariable": function () { return ( /* binding */ModelVariable); }
                    /* harmony export */ 
                });
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/types */ "./src/types/types.ts");
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../factory/variable-manager.factory */ "./src/factory/variable-manager.factory.ts");
                /* harmony import */ var _base_variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base-variable */ "./src/model/base-variable.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var getManager = function () {
                    return _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__.VariableManagerFactory.get(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CATEGORY.MODEL);
                };
                var ModelVariable = /** @class */ (function (_super) {
                    __extends(ModelVariable, _super);
                    function ModelVariable(variable) {
                        var _this = _super.call(this) || this;
                        Object.assign(_this, variable);
                        return _this;
                    }
                    ModelVariable.prototype.init = function () {
                        if (this.isList) {
                            getManager().removeFirstEmptyObject(this);
                        }
                        getManager().initBinding(this, 'dataBinding', 'dataSet');
                    };
                    ModelVariable.prototype.execute = function (operation, options) {
                        var returnVal = _super.prototype.execute.call(this, operation, options);
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_1__.isDefined)(returnVal)) {
                            return returnVal;
                        }
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.IS_API_AWARE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.SUPPORTS_CRUD:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.SUPPORTS_DISTINCT_API:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.IS_PAGEABLE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.IS_SORTABLE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.SUPPORTS_SERVER_FILTER:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.IS_BOUND_TO_LOCALE:
                                returnVal = this.isBoundToLocale();
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_0__.DataSource.Operation.GET_DEFAULT_LOCALE:
                                returnVal = this.getDefaultLocale();
                                break;
                            default:
                                returnVal = {};
                                break;
                        }
                        return returnVal;
                    };
                    ModelVariable.prototype.isBoundToLocale = function () {
                        return this.name === 'supportedLocale';
                    };
                    ModelVariable.prototype.getDefaultLocale = function () {
                        return _util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_5__.appManager.getSelectedLocale();
                    };
                    return ModelVariable;
                }(_base_variable__WEBPACK_IMPORTED_MODULE_3__.BaseVariable));
                /***/ 
            }),
            /***/ "./src/model/variable/service-variable.ts": 
            /*!************************************************!*\
              !*** ./src/model/variable/service-variable.ts ***!
              \************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ServiceVariable": function () { return ( /* binding */ServiceVariable); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _types_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/types */ "./src/types/types.ts");
                /* harmony import */ var _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../factory/variable-manager.factory */ "./src/factory/variable-manager.factory.ts");
                /* harmony import */ var _api_aware_variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-aware-variable */ "./src/model/variable/api-aware-variable.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/variable/service-variable.utils */ "./src/util/variable/service-variable.utils.ts");
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                var getManager = function () {
                    return _factory_variable_manager_factory__WEBPACK_IMPORTED_MODULE_2__.VariableManagerFactory.get(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CATEGORY.SERVICE);
                };
                var ServiceVariable = /** @class */ (function (_super) {
                    __extends(ServiceVariable, _super);
                    function ServiceVariable(variable) {
                        var _this = _super.call(this) || this;
                        Object.assign(_this, variable);
                        _this.serviceInfo = variable.serviceInfo;
                        _this.httpService = variable.httpClientService;
                        return _this;
                    }
                    ServiceVariable.prototype.execute = function (operation, options) {
                        var returnVal = _super.prototype.execute.call(this, operation, options);
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(returnVal)) {
                            return returnVal;
                        }
                        switch (operation) {
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_API_AWARE:
                                returnVal = true;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_CRUD:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_DISTINCT_API:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_PAGEABLE:
                                // Check for both client and server side pagination existence
                                returnVal = this.hasPagination();
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_SORTABLE:
                                returnVal = this.hasPagination() && !this._paginationConfig;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SUPPORTS_SERVER_FILTER:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SET_INPUT:
                                returnVal = this.setInput(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.LIST_RECORDS:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.INVOKE:
                                returnVal = this.invoke(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.UPDATE:
                                returnVal = this.update(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SEARCH_RECORDS:
                                returnVal = this.searchRecords(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.DOWNLOAD:
                                returnVal = this.download(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.GET_PAGING_OPTIONS:
                                returnVal = this.pagination;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_UPDATE_REQUIRED:
                                returnVal = this.isUpdateRequired(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.IS_BOUND_TO_LOCALE:
                                returnVal = false;
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.CANCEL:
                                returnVal = this.cancel(options);
                                break;
                            case _types_types__WEBPACK_IMPORTED_MODULE_1__.DataSource.Operation.SET_PAGINATION:
                                returnVal = this.setPagination(options);
                                break;
                            default:
                                returnVal = {};
                                break;
                        }
                        return returnVal;
                    };
                    ServiceVariable.prototype.hasPagination = function () {
                        return this.controller === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_4__.VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY || !_.isEmpty(this.pagination);
                    };
                    ServiceVariable.prototype.invoke = function (options, success, error) {
                        // return this.invokeVar();
                        return getManager().invoke(this, options, success, error);
                    };
                    ServiceVariable.prototype.update = function (options, success, error) {
                        return getManager().invoke(this, options, success, error);
                    };
                    ServiceVariable.prototype.download = function (options, success, error) {
                        return getManager().download(this, options, success, error);
                    };
                    ServiceVariable.prototype.setInput = function (key, val, options) {
                        return getManager().setInput(this, key, val, options);
                    };
                    ServiceVariable.prototype.searchRecords = function (options, success, error) {
                        var _this = this;
                        return new Promise(function (resolve, reject) {
                            getManager().searchRecords(_this, options, function (response, pagination) {
                                resolve({ data: response.content || response, pagination: pagination });
                            }, reject);
                        });
                    };
                    ServiceVariable.prototype.isUpdateRequired = function (hasData) {
                        var inputFields = getManager().getInputParms(this);
                        var queryParams = _util_variable_service_variable_utils__WEBPACK_IMPORTED_MODULE_5__.ServiceVariableUtils.excludePaginationParams(inputFields);
                        if (!queryParams.length) {
                            // if we don't have any query params and variable data is available then we don't need variable update, so return false
                            if (hasData) {
                                return false;
                            }
                        }
                        return true;
                    };
                    ServiceVariable.prototype.setPagination = function (data) {
                        return getManager().setPagination(this, data);
                    };
                    ServiceVariable.prototype.cancel = function (options) {
                        return getManager().cancel(this, options);
                    };
                    ServiceVariable.prototype.init = function () {
                        getManager().initBinding(this);
                        getManager().defineFirstLastRecord(this);
                    };
                    return ServiceVariable;
                }(_api_aware_variable__WEBPACK_IMPORTED_MODULE_3__.ApiAwareVariable));
                /***/ 
            }),
            /***/ "./src/types/event-notifier.ts": 
            /*!*************************************!*\
              !*** ./src/types/event-notifier.ts ***!
              \*************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "DefaultEventNotifier": function () { return ( /* binding */DefaultEventNotifier); }
                    /* harmony export */ 
                });
                var DefaultEventNotifier = /** @class */ (function () {
                    function DefaultEventNotifier() {
                        this.listeners = {};
                    }
                    DefaultEventNotifier.prototype.notify = function (event, args) {
                        if (this.listeners[event]) {
                            this.listeners[event].forEach(function (l) {
                                l && l.apply(null, args);
                            });
                        }
                    };
                    DefaultEventNotifier.prototype.subscribe = function (event, fn) {
                        var _this = this;
                        this.listeners[event] = this.listeners[event] || [];
                        this.listeners[event].push(fn);
                        return function () {
                            var eventListeners = _this.listeners[event];
                            var i = eventListeners.findIndex(function (fni) { return fni === fn; });
                            eventListeners.splice(i, 1);
                        };
                    };
                    return DefaultEventNotifier;
                }());
                /***/ 
            }),
            /***/ "./src/types/http-client.service.ts": 
            /*!******************************************!*\
              !*** ./src/types/http-client.service.ts ***!
              \******************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /***/ 
            }),
            /***/ "./src/types/types.ts": 
            /*!****************************!*\
              !*** ./src/types/types.ts ***!
              \****************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "DataSource": function () { return ( /* binding */DataSource); },
                    /* harmony export */ "IDataSource": function () { return ( /* binding */IDataSource); }
                    /* harmony export */ 
                });
                var IDataSource = /** @class */ (function () {
                    function IDataSource() {
                    }
                    return IDataSource;
                }());
                var Operation;
                (function (Operation) {
                    Operation["LIST_RECORDS"] = "listRecords";
                    Operation["UPDATE_RECORD"] = "updateRecord";
                    Operation["INSERT_RECORD"] = "insertRecord";
                    Operation["DELETE_RECORD"] = "deleteRecord";
                    Operation["INVOKE"] = "invoke";
                    Operation["UPDATE"] = "update";
                    Operation["NOTIFY"] = "notify";
                    Operation["IS_API_AWARE"] = "isApiAware";
                    Operation["SUPPORTS_CRUD"] = "supportsCRUD";
                    Operation["SUPPORTS_DISTINCT_API"] = "supportsDistinctAPI";
                    Operation["IS_PAGEABLE"] = "isPageable";
                    Operation["IS_SORTABLE"] = "isSortable";
                    Operation["GET_OPERATION_TYPE"] = "getOperationType";
                    Operation["GET_RELATED_PRIMARY_KEYS"] = "getRelatedTablePrimaryKeys";
                    Operation["GET_ENTITY_NAME"] = "getEntityName";
                    Operation["SET_INPUT"] = "setinput";
                    Operation["GET_RELATED_TABLE_DATA"] = "getRelatedTableData";
                    Operation["GET_DISTINCT_DATA_BY_FIELDS"] = "getDistinctDataByFields";
                    Operation["GET_AGGREGATED_DATA"] = "getAggregatedData";
                    Operation["GET_MATCH_MODE"] = "getMatchMode";
                    Operation["DOWNLOAD"] = "download";
                    Operation["GET_NAME"] = "getName";
                    Operation["GET_PROPERTIES_MAP"] = "getPropertiesMap";
                    Operation["GET_PRIMARY_KEY"] = "getPrimaryKey";
                    Operation["GET_BLOB_URL"] = "getBlobURL";
                    Operation["SUPPORTS_SERVER_FILTER"] = "supportsServerFilter";
                    Operation["GET_OPTIONS"] = "getOptions";
                    Operation["SEARCH_RECORDS"] = "searchRecords";
                    Operation["GET_REQUEST_PARAMS"] = "getRequestParams";
                    Operation["GET_PAGING_OPTIONS"] = "getPagingOptions";
                    Operation["FETCH_DISTINCT_VALUES"] = "fetchDistinctValues";
                    Operation["GET_UNIQUE_IDENTIFIER"] = "getUniqueIdentifier";
                    Operation["GET_CONTEXT_IDENTIFIER"] = "getContextIdentifier";
                    Operation["IS_UPDATE_REQUIRED"] = "isUpdateRequired";
                    Operation["ADD_ITEM"] = "addItem";
                    Operation["SET_ITEM"] = "setItem";
                    Operation["REMOVE_ITEM"] = "removeItem";
                    Operation["IS_BOUND_TO_LOCALE"] = "isBoundToLocale";
                    Operation["GET_DEFAULT_LOCALE"] = "getDefaultLocale";
                    Operation["CANCEL"] = "cancel";
                    Operation["SET_PAGINATION"] = "setPagination";
                })(Operation || (Operation = {}));
                var DataSource = {
                    Operation: Operation
                };
                /***/ 
            }),
            /***/ "./src/util/dataset-util.ts": 
            /*!**********************************!*\
              !*** ./src/util/dataset-util.ts ***!
              \**********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "default": function () { return (__WEBPACK_DEFAULT_EXPORT__); }
                    /* harmony export */ 
                });
                var DatasetUtil = /** @class */ (function () {
                    function DatasetUtil() {
                    }
                    DatasetUtil.isValidDataset = function (dataSet, isList) {
                        if (!dataSet) {
                            return false;
                        }
                        // check array type dataset for list type variable
                        if (isList && !_.isArray(dataSet)) {
                            return false;
                        }
                        // change the dataSet
                        return dataSet;
                    };
                    DatasetUtil.getValue = function (dataSet, key, index, isList) {
                        index = index || 0;
                        // return the value against the specified key
                        return isList ? dataSet[index][key] : dataSet[key];
                    };
                    DatasetUtil.setValue = function (dataSet, key, value, isList) {
                        // check param sanity
                        if (key && !isList) {
                            dataSet[key] = value;
                        }
                        // return the new dataSet
                        return dataSet;
                    };
                    DatasetUtil.getItem = function (dataSet, index, isList) {
                        // return the object against the specified index
                        return isList ? dataSet[index] : dataSet;
                    };
                    /**
                     * This method is used to find target node
                     * @param dataSet: provided dataSet
                     * @param options: provided options
                     * @returns {any} targetnode
                     */
                    DatasetUtil.getTargetNode = function (dataSet, options) {
                        dataSet = options.parentIndex !== undefined ? dataSet[options.parentIndex] : dataSet;
                        return _.get(dataSet, options.path);
                    };
                    DatasetUtil.setItem = function (dataSet, i, value, options) {
                        var index;
                        // check param sanity
                        if (_.isUndefined(i) || !options.isList) {
                            return dataSet;
                        }
                        if (_.isObject(i)) {
                            index = _.findIndex(dataSet, i);
                        }
                        else {
                            index = i;
                        }
                        if (options.path) {
                            var innerArray = DatasetUtil.getTargetNode(dataSet, options);
                            var innerElemindex = _.findIndex(innerArray, i);
                            if (innerElemindex > -1) {
                                innerArray[innerElemindex] = value;
                            }
                        }
                        else {
                            if (index > -1) {
                                // set the value against the specified index
                                dataSet[index] = value;
                            }
                        }
                        // return the new dataSet
                        return dataSet;
                    };
                    DatasetUtil.addItem = function (dataSet, value, index, options) {
                        // check param sanity
                        if (_.isUndefined(value) || !options.isList) {
                            return dataSet;
                        }
                        // set the value against the specified index
                        if (options.path) {
                            var innerArray = DatasetUtil.getTargetNode(dataSet, options);
                            if (innerArray) {
                                // check for index sanity
                                index = index !== undefined ? index : innerArray.length;
                                innerArray.splice(index, 0, value);
                            }
                            else {
                                options.parentIndex !== undefined ? _.set(dataSet[options.parentIndex], options.path, [value]) : _.set(dataSet, options.path, [value]);
                            }
                        }
                        else {
                            // check for index sanity
                            index = index !== undefined ? index : dataSet.length;
                            dataSet.splice(index, 0, value);
                        }
                        // return the new dataSet
                        return dataSet;
                    };
                    /**
                     *
                     * @param dataSet
                     * @param i, can be index value of the object/element in array
                     *      or
                     * the whole object which needs to be removed
                     * @param exactMatch
                     * @returns {any}
                     */
                    DatasetUtil.removeItem = function (dataSet, i, options) {
                        var index, exactMatch;
                        // check for index sanity
                        i = i !== undefined ? i : dataSet.length - 1;
                        if (_.isBoolean(options)) {
                            exactMatch = options;
                        }
                        if (_.isObject(options)) {
                            exactMatch = options.exactMatch;
                        }
                        if (_.isObject(i)) {
                            if (options.path) {
                                var innerArray = DatasetUtil.getTargetNode(dataSet, options);
                                var innerElemindex = _.findIndex(innerArray, i);
                                if (innerElemindex > -1 && (!exactMatch || (exactMatch && _.isEqual(innerArray[innerElemindex], i)))) {
                                    innerArray.splice(innerElemindex, 1);
                                }
                            }
                            else {
                                index = _.findIndex(dataSet, i);
                                // When exactMatch property is set to true delete only when every property values are same*/
                                if (index > -1 && (!exactMatch || (exactMatch && _.isEqual(dataSet[index], i)))) {
                                    dataSet.splice(index, 1);
                                }
                            }
                        }
                        else {
                            dataSet.splice(i, 1);
                        }
                        // return the new dataSet
                        return dataSet;
                    };
                    DatasetUtil.getValidDataset = function (isList) {
                        return isList ? [] : {};
                    };
                    DatasetUtil.getCount = function (dataSet, isList) {
                        return isList ? dataSet.length : Object.keys(dataSet).length;
                    };
                    return DatasetUtil;
                }());
                /* harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = (DatasetUtil);
                /***/ 
            }),
            /***/ "./src/util/file-upload.util.ts": 
            /*!**************************************!*\
              !*** ./src/util/file-upload.util.ts ***!
              \**************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "upload": function () { return ( /* binding */upload); }
                    /* harmony export */ 
                });
                /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/util/utils.ts");
                /* harmony import */ var _notify_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notify-promise */ "./src/util/notify-promise.ts");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
                var __extends = (undefined && undefined.__extends) || (function () {
                    var extendStatics = function (d, b) {
                        extendStatics = Object.setPrototypeOf ||
                            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                            function (d, b) { for (var p in b)
                                if (Object.prototype.hasOwnProperty.call(b, p))
                                    d[p] = b[p]; };
                        return extendStatics(d, b);
                    };
                    return function (d, b) {
                        if (typeof b !== "function" && b !== null)
                            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                        extendStatics(d, b);
                        function __() { this.constructor = d; }
                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                    };
                })();
                // declare const _: any;
                var UPLOAD_STATUS;
                (function (UPLOAD_STATUS) {
                    UPLOAD_STATUS["QUEUED"] = "queued";
                    UPLOAD_STATUS["IN_PROGRESS"] = "inprogress";
                    UPLOAD_STATUS["SUCCESS"] = "success";
                    UPLOAD_STATUS["ERROR"] = "error";
                    UPLOAD_STATUS["ABORTED"] = "abort";
                })(UPLOAD_STATUS || (UPLOAD_STATUS = {}));
                function transformEvent(event) {
                    event.target = event.target || {
                        status: event.responseCode,
                        response: event.response
                    };
                    return event;
                }
                var FileTransferObject = /** @class */ (function () {
                    function FileTransferObject(file, transferFn, promise, abortFn) {
                        this.name = file.name;
                        this.size = file.size || '';
                        this.status = UPLOAD_STATUS.QUEUED;
                        this.transferFn = transferFn;
                        this.promise = promise;
                        this.abortFn = abortFn;
                    }
                    FileTransferObject.prototype.start = function () {
                        if (this.status === UPLOAD_STATUS.QUEUED) {
                            this.status = UPLOAD_STATUS.IN_PROGRESS;
                            (0, _utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(this.transferFn);
                        }
                    };
                    FileTransferObject.prototype.then = function (onSuccess, onError, onProgress) {
                        var self = this;
                        this.promise.then(function (event) {
                            self.status = UPLOAD_STATUS.SUCCESS;
                            (0, _utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(onSuccess, event);
                        }, function (event) {
                            self.status = UPLOAD_STATUS.ERROR;
                            (0, _utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(onError, event);
                        }, function (event) {
                            self.progress = Math.round(event.loaded / event.total * 100);
                            (0, _utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(onProgress, event);
                        });
                        return this;
                    };
                    FileTransferObject.prototype.finally = function (onFinal) {
                        this.promise.finally(onFinal);
                    };
                    /* aborts the file upload */
                    FileTransferObject.prototype.abort = function () {
                        this.status = UPLOAD_STATUS.ABORTED;
                        (0, _utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(this.abortFn);
                        this.finally();
                    };
                    return FileTransferObject;
                }());
                var AjaxFileTransferObject = /** @class */ (function (_super) {
                    __extends(AjaxFileTransferObject, _super);
                    function AjaxFileTransferObject(file, transferFn, promise, abortFn) {
                        return _super.call(this, file, transferFn, promise, abortFn) || this;
                    }
                    return AjaxFileTransferObject;
                }(FileTransferObject));
                /* upload file using fileTransfer */
                function uploadWithFileTransfer(file, url, options) { }
                function appendFileToFormData(file, fd, options) {
                    /* append file to form data */
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isArray(file)) {
                        lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(file, function (fileObject) {
                            fd.append(options.paramName, fileObject.content || fileObject, fileObject.name);
                        });
                    }
                    else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(file)) {
                        fd.append(options.paramName, file.content || file, file.name);
                    }
                }
                /* upload file with ajax calling */
                function uploadWithAjax(file, variable, fd, url, options) {
                    var cloneFD = new FormData();
                    var iterate = function (value, key) {
                        var fileObject = (lodash__WEBPACK_IMPORTED_MODULE_2___default().isArray(value) ? value[0] : value);
                        if (!(fileObject instanceof File || fileObject instanceof Blob)) {
                            cloneFD.append(key, value);
                        }
                    };
                    // The foreeach method on form data doesn't exist in IE. Hence we check if it exists
                    // or else use the lodash forEach
                    if (fd.forEach) {
                        fd.forEach(iterate);
                    }
                    else {
                        lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(fd, iterate);
                    }
                    appendFileToFormData(file, cloneFD, options);
                    var promise = new _notify_promise__WEBPACK_IMPORTED_MODULE_1__.NotifyPromise(function (resolve, reject, notify) {
                        // ToDo - variable seperation
                        variable.httpService.uploadFile(url, cloneFD, variable, { notify: notify }).then(function (data) {
                            resolve(data);
                        }, function (error) {
                            reject(error);
                        });
                        file._uploadProgress = variable.request;
                    });
                    return promise;
                }
                /* upload the file - IE9 support */
                // function uploadWithIframe(file, url, options) {}
                /* upload the next file depending on the status */
                function starNextFileTransfer(fts) {
                    var ft = lodash__WEBPACK_IMPORTED_MODULE_2___default().find(fts, function (f) {
                        return f.status === UPLOAD_STATUS.QUEUED;
                    });
                    if (ft) {
                        ft.start();
                        ft.finally(starNextFileTransfer.bind(undefined, fts));
                    }
                }
                /* upload the max no of files at once i.e. two at once based on max*/
                function startFileTransfers(fts, max) {
                    var i = 0;
                    var len = fts.length;
                    while (i < max && i < len) {
                        starNextFileTransfer(fts);
                        i++;
                    }
                }
                function isMobileApp() {
                    return false;
                }
                /**
                 * This function uploads the file to the given url endpoint.
                 *
                 * @param file file to upload
                 * @param url http endpoint to which the file has to be submitted.
                 * @param options
                 * @returns a promise to listen for success, event, onProgress.
                 *  One can also abort the upload by simply calling abort function.
                 */
                function upload(files, variable, fd, config, options) {
                    options = lodash__WEBPACK_IMPORTED_MODULE_2___default().extend({
                        'paramName': config.fileParamName
                    }, options);
                    return uploadWithAjax(files, variable, fd, config.url, options);
                    // let fileTransfers = [],
                    //     url = config.uploadUrl;
                    // options = _.extend({
                    //     'paramName' : config.fileParamName
                    // }, options);
                    //
                    // if (isMobileApp()) {
                    //     _.forEach(files, function (file) {
                    //         fileTransfers.push(uploadWithFileTransfer(file, url, options));
                    //     });
                    // } else if ((window as any).FormData) {
                    //     _.forEach(files, function (file) {
                    //         fileTransfers.push(uploadWithAjax(file, url, options));
                    //     });
                    // } else {
                    //     _.forEach(files, function (file) {
                    //         fileTransfers.push(uploadWithIframe(file, url, options));
                    //     });
                    // }
                    // startFileTransfers(fileTransfers, 2);
                    // return fileTransfers;
                }
                /***/ 
            }),
            /***/ "./src/util/inflight-queue.ts": 
            /*!************************************!*\
              !*** ./src/util/inflight-queue.ts ***!
              \************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "$queue": function () { return ( /* binding */$queue); }
                    /* harmony export */ 
                });
                var InflightQueue = /** @class */ (function () {
                    function InflightQueue() {
                        this.requestsQueue = new Map();
                    }
                    /**
                     * pushes the process against a variable in its queue
                     * @param variable
                     * @param {{resolve: (value?: any) => void; reject: (reason?: any) => void}} param2
                     * the resolve callback will be called on
                     */
                    InflightQueue.prototype.addToQueue = function (variable, param2) {
                        if (this.requestsQueue.has(variable)) {
                            this.requestsQueue.get(variable).push(param2);
                        }
                        else {
                            var processes = [];
                            processes.push({ resolve: param2.resolve, reject: param2.reject, active: false });
                            this.requestsQueue.set(variable, processes);
                        }
                    };
                    /**
                     * Calls the reject method against the passed process
                     * @param process
                     */
                    InflightQueue.prototype.rejectProcess = function (process) {
                        process.reject('PROCESS_REJECTED_IN_QUEUE');
                    };
                    /**
                     * clears the queue against a variable
                     * @param variable
                     */
                    InflightQueue.prototype.clear = function (variable) {
                        this.requestsQueue.delete(variable);
                    };
                    /**
                     * executes the n/w calls for a specified variable pushed in its respective queue (pushed while it was inFlight)
                     * @param variable
                     */
                    InflightQueue.prototype.process = function (variable) {
                        var processes = this.requestsQueue.get(variable);
                        var nextProcess;
                        // process request queue for the variable only if it is not empty
                        if (!processes || !processes.length) {
                            this.clear(variable);
                            return;
                        }
                        // If only one item in queue
                        if (processes.length === 1) {
                            nextProcess = processes[0];
                            if (nextProcess.active) {
                                this.clear(variable);
                            }
                            else {
                                nextProcess.active = true;
                                nextProcess.resolve();
                            }
                            return;
                        }
                        switch (variable.inFlightBehavior) {
                            case 'executeLast':
                                for (var i = 0; i < processes.length - 2; i++) {
                                    this.rejectProcess(processes[i]);
                                }
                                processes.splice(0, processes.length - 1);
                                this.process(variable);
                                break;
                            case 'executeAll':
                                nextProcess = processes.splice(0, 1)[0];
                                if (nextProcess.active) {
                                    nextProcess = processes.splice(0, 1)[0];
                                }
                                nextProcess.active = true;
                                nextProcess.resolve();
                                break;
                            default:
                                for (var i = 0; i < processes.length - 1; i++) {
                                    this.rejectProcess(processes[i]);
                                }
                                this.clear(variable);
                                break;
                        }
                    };
                    /**
                     * initializes the queue against a variable and makes the first process call
                     * If already initialized and a process in queue is in progress, the queue is not processed.
                     * To process the next item in the queue, the process method has to be called from the caller.
                     * @param variable
                     * @returns {Promise<any>}
                     */
                    InflightQueue.prototype.submit = function (variable) {
                        var _this = this;
                        return new Promise(function (resolve, reject) {
                            _this.addToQueue(variable, { resolve: resolve, reject: reject });
                            if (_this.requestsQueue.get(variable).length === 1) {
                                _this.process(variable);
                            }
                        });
                    };
                    return InflightQueue;
                }());
                var $queue = new InflightQueue();
                /***/ 
            }),
            /***/ "./src/util/notify-promise.ts": 
            /*!************************************!*\
              !*** ./src/util/notify-promise.ts ***!
              \************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "NotifyPromise": function () { return ( /* binding */NotifyPromise); }
                    /* harmony export */ 
                });
                var NotifyPromise = /** @class */ (function () {
                    function NotifyPromise(fn) {
                        var notifyQueue = [], notify = function (status) {
                            notifyQueue.forEach(function (fn1) {
                                fn1(status);
                            });
                        };
                        var cleanUp = function () {
                            notifyQueue.length = 0;
                        };
                        var p1 = new Promise(function (res, rej) {
                            fn(res, rej, notify);
                        });
                        p1.superThen = p1.then.bind(p1);
                        p1.then = function (onResolve, onReject, onNotify) {
                            p1.superThen(function (response) {
                                onResolve(response);
                                cleanUp();
                            }, function (reason) {
                                onReject(reason);
                                cleanUp();
                            });
                            if (onNotify) {
                                notifyQueue.push(onNotify);
                            }
                        };
                        return p1;
                    }
                    return NotifyPromise;
                }());
                // let newPromise = new PromiseWithNotify((resolve, reject, notify) => {
                //     setInterval(notify, 1000);
                // })
                // console.log(newPromise)
                // newPromise.then(undefined, undefined, () => console.log(3));
                /***/ 
            }),
            /***/ "./src/util/oAuth.utils.ts": 
            /*!*********************************!*\
              !*** ./src/util/oAuth.utils.ts ***!
              \*********************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "getAccessToken": function () { return ( /* binding */getAccessToken); },
                    /* harmony export */ "performAuthorization": function () { return ( /* binding */performAuthorization); },
                    /* harmony export */ "removeAccessToken": function () { return ( /* binding */removeAccessToken); }
                    /* harmony export */ 
                });
                /* harmony import */ var _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variable/variables.utils */ "./src/util/variable/variables.utils.ts");
                var performAuthorization = function (url, providerId, onSuccess, onError, securityObj) {
                    _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService === null || _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService === void 0 ? void 0 : _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService.perfromOAuthorization(url, providerId, onSuccess, onError, securityObj, _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.appManager.getCustomUrlScheme(), _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.appManager.getDeployedURL());
                };
                var getAccessToken = function (provider, checkLoaclStorage) {
                    return (_variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService === null || _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService === void 0 ? void 0 : _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService.getAccessToken) && _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService.getAccessToken(provider, checkLoaclStorage);
                };
                var removeAccessToken = function (provider) {
                    _variable_variables_utils__WEBPACK_IMPORTED_MODULE_0__.oauthService.removeAccessToken(provider);
                };
                /***/ 
            }),
            /***/ "./src/util/utils.ts": 
            /*!***************************!*\
              !*** ./src/util/utils.ts ***!
              \***************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "DEFAULT_FORMATS": function () { return ( /* binding */DEFAULT_FORMATS); },
                    /* harmony export */ "DataType": function () { return ( /* binding */DataType); },
                    /* harmony export */ "IDGenerator": function () { return ( /* binding */IDGenerator); },
                    /* harmony export */ "extractType": function () { return ( /* binding */extractType); },
                    /* harmony export */ "findValueOf": function () { return ( /* binding */findValueOf); },
                    /* harmony export */ "getBlob": function () { return ( /* binding */getBlob); },
                    /* harmony export */ "getClonedObject": function () { return ( /* binding */getClonedObject); },
                    /* harmony export */ "getValidJSON": function () { return ( /* binding */getValidJSON); },
                    /* harmony export */ "hasCordova": function () { return ( /* binding */hasCordova); },
                    /* harmony export */ "isDateTimeType": function () { return ( /* binding */isDateTimeType); },
                    /* harmony export */ "isDefined": function () { return ( /* binding */isDefined); },
                    /* harmony export */ "isNumberType": function () { return ( /* binding */isNumberType); },
                    /* harmony export */ "isObject": function () { return ( /* binding */isObject); },
                    /* harmony export */ "isPageable": function () { return ( /* binding */isPageable); },
                    /* harmony export */ "isValidWebURL": function () { return ( /* binding */isValidWebURL); },
                    /* harmony export */ "noop": function () { return ( /* binding */noop); },
                    /* harmony export */ "removeExtraSlashes": function () { return ( /* binding */removeExtraSlashes); },
                    /* harmony export */ "replace": function () { return ( /* binding */replace); },
                    /* harmony export */ "stringStartsWith": function () { return ( /* binding */stringStartsWith); },
                    /* harmony export */ "triggerFn": function () { return ( /* binding */triggerFn); },
                    /* harmony export */ "xmlToJson": function () { return ( /* binding */xmlToJson); }
                    /* harmony export */ 
                });
                /* harmony import */ var x2js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! x2js */ "./node_modules/x2js/x2js.js");
                /* harmony import */ var x2js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(x2js__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
                var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
                    var _ = { label: 0, sent: function () { if (t[0] & 1)
                            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                    function verb(n) { return function (v) { return step([n, v]); }; }
                    function step(op) {
                        if (f)
                            throw new TypeError("Generator is already executing.");
                        while (_)
                            try {
                                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                                    return t;
                                if (y = 0, t)
                                    op = [op[0] & 2, t.value];
                                switch (op[0]) {
                                    case 0:
                                    case 1:
                                        t = op;
                                        break;
                                    case 4:
                                        _.label++;
                                        return { value: op[1], done: false };
                                    case 5:
                                        _.label++;
                                        y = op[1];
                                        op = [0];
                                        continue;
                                    case 7:
                                        op = _.ops.pop();
                                        _.trys.pop();
                                        continue;
                                    default:
                                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                            _ = 0;
                                            continue;
                                        }
                                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                            _.label = op[1];
                                            break;
                                        }
                                        if (op[0] === 6 && _.label < t[1]) {
                                            _.label = t[1];
                                            t = op;
                                            break;
                                        }
                                        if (t && _.label < t[2]) {
                                            _.label = t[2];
                                            _.ops.push(op);
                                            break;
                                        }
                                        if (t[2])
                                            _.ops.pop();
                                        _.trys.pop();
                                        continue;
                                }
                                op = body.call(thisArg, _);
                            }
                            catch (e) {
                                op = [6, e];
                                y = 0;
                            }
                            finally {
                                f = t = 0;
                            }
                        if (op[0] & 5)
                            throw op[1];
                        return { value: op[0] ? op[1] : void 0, done: true };
                    }
                };
                // declare const X2JS: any;
                // @ts-ignore
                var DataType = {
                    INTEGER: 'integer',
                    BIG_INTEGER: 'big_integer',
                    SHORT: 'short',
                    FLOAT: 'float',
                    BIG_DECIMAL: 'big_decimal',
                    DOUBLE: 'double',
                    LONG: 'long',
                    BYTE: 'byte',
                    STRING: 'string',
                    CHARACTER: 'character',
                    TEXT: 'text',
                    DATE: 'date',
                    TIME: 'time',
                    TIMESTAMP: 'timestamp',
                    DATETIME: 'datetime',
                    LOCALDATETIME: 'localdatetime',
                    BOOLEAN: 'boolean',
                    LIST: 'list',
                    CLOB: 'clob',
                    BLOB: 'blob'
                };
                var DEFAULT_FORMATS = {
                    DATE: "yyyy-MM-dd",
                    TIME: "HH:mm:ss",
                    TIMESTAMP: "timestamp",
                    DATETIME: "yyyy-MM-ddTHH:mm:ss",
                    LOCALDATETIME: "yyyy-MM-ddTHH:mm:ss",
                    DATETIME_ORACLE: "yyyy-MM-dd HH:mm:ss",
                    DATE_TIME: "yyyy-MM-dd HH:mm:ss"
                };
                var REGEX = {
                    SNAKE_CASE: /[A-Z]/g,
                    ANDROID: /Android/i,
                    IPHONE: /iPhone/i,
                    IPOD: /iPod/i,
                    IPAD: /iPad/i,
                    MAC: /Mac/i,
                    ANDROID_TABLET: /android|android 3.0|xoom|sch-i800|playbook|tablet|kindle/i,
                    MOBILE: /Mobile/i,
                    WINDOWS: /Windows Phone/i,
                    SUPPORTED_IMAGE_FORMAT: /\.(bmp|gif|jpe|jpg|jpeg|tif|tiff|pbm|png|ico)$/i,
                    SUPPORTED_FILE_FORMAT: /\.(txt|js|css|html|script|properties|json|java|xml|smd|xmi|sql|log|wsdl|vm|ftl|jrxml|yml|yaml|md|less|jsp)$/i,
                    SUPPORTED_AUDIO_FORMAT: /\.(mp3|ogg|webm|wma|3gp|wav|m4a)$/i,
                    SUPPORTED_VIDEO_FORMAT: /\.(mp4|ogg|webm|wmv|mpeg|mpg|avi|mov)$/i,
                    PAGE_RESOURCE_PATH: /^\/pages\/.*\.(js|css|html|json)$/,
                    MIN_PAGE_RESOURCE_PATH: /.*(page.min.html)$/,
                    VALID_EMAIL: /^[a-zA-Z][\w.+]+@[a-zA-Z_]+?\.[a-zA-Z.]{1,4}[a-zA-Z]$/,
                    VALID_WEB_URL: /^(http[s]?:\/\/)(www\.){0,1}[a-zA-Z0-9=:?\/\.\-]+(\.[a-zA-Z]{2,5}[\.]{0,1})?/,
                    VALID_WEBSOCKET_URL: /^(ws[s]?:\/\/)(www\.){0,1}[a-zA-Z0-9=:?\/\.\-]+(\.[a-zA-Z]{2,5}[\.]{0,1})?/,
                    VALID_RELATIVE_URL: /^(?!www\.|(?:http|ftp)s?:\/\/|[A-Za-z]:\\|\/\/).*/,
                    REPLACE_PATTERN: /\$\{([^\}]+)\}/g,
                    ZIP_FILE: /\.zip$/i,
                    EXE_FILE: /\.exe$/i,
                    NO_QUOTES_ALLOWED: /^[^'|"]*$/,
                    NO_DOUBLE_QUOTES_ALLOWED: /^[^"]*$/,
                    VALID_HTML: /<[a-z][\s\S]*>/i,
                    VALID_PASSWORD: /^[0-9a-zA-Z-_.@&*!#$%]+$/,
                    SPECIAL_CHARACTERS: /[^A-Z0-9a-z_]+/i,
                    APP_SERVER_URL_FORMAT: /^(http[s]?:\/\/)(www\.){0,1}[a-zA-Z0-9\.\-]+([:]?[0-9]{2,5}|\.[a-zA-Z]{2,5}[\.]{0,1})\/+[^?#&=]+$/,
                    JSON_DATE_FORMAT: /\d{4}-[0-1]\d-[0-3]\d(T[0-2]\d:[0-5]\d:[0-5]\d.\d{1,3}Z$)?/,
                    DATA_URL: /^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\-._~:@\/?%\s]*)\s*$/i
                };
                var NUMBER_TYPES = ['int', DataType.INTEGER, DataType.FLOAT, DataType.DOUBLE, DataType.LONG, DataType.SHORT, DataType.BYTE, DataType.BIG_INTEGER, DataType.BIG_DECIMAL];
                var noop = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                };
                function idGenerator(token) {
                    var id;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                id = 1;
                                _a.label = 1;
                            case 1:
                                if (false) { }
                                return [4 /*yield*/, "" + token + id++];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 1];
                            case 3: return [2 /*return*/];
                        }
                    });
                }
                var isValidWebURL = function (url) {
                    return (REGEX.VALID_WEB_URL).test(url);
                };
                /*Function to check whether the specified object is a pageable object or not.*/
                var isPageable = function (obj) {
                    var pageable = {
                        'content': [],
                        'first': true,
                        'last': true,
                        'number': 0,
                        'numberOfElements': 10,
                        'size': 20,
                        'sort': null,
                        'totalElements': 10,
                        'totalPages': 1
                    };
                    // paginated object may or may not contain 'empty' property. In either case, Pageable should return as true.
                    var paginatedObj = lodash__WEBPACK_IMPORTED_MODULE_1___default().omit(obj, 'empty');
                    return (lodash__WEBPACK_IMPORTED_MODULE_1___default().isEqual(lodash__WEBPACK_IMPORTED_MODULE_1___default().keys(pageable), lodash__WEBPACK_IMPORTED_MODULE_1___default().keys(paginatedObj).sort()));
                };
                var IDGenerator = /** @class */ (function () {
                    function IDGenerator(key) {
                        this.generator = idGenerator(key);
                    }
                    IDGenerator.prototype.nextUid = function () {
                        return this.generator.next().value;
                    };
                    return IDGenerator;
                }());
                // ToDo - variable seperation
                var hasCordova = function () {
                    return !!window['cordova'];
                };
                var removeExtraSlashes = function (url) {
                    var base64regex = /^data:image\/([a-z]{2,});base64,/;
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default().isString(url)) {
                        /*
                        * support for mobile apps having local file path url starting with file:/// and
                        * support for base64 format
                        * */
                        if (lodash__WEBPACK_IMPORTED_MODULE_1___default().startsWith(url, 'file:///') || base64regex.test(url)) {
                            return url;
                        }
                        return url.replace(new RegExp('([^:]\/)(\/)+', 'g'), '$1');
                    }
                };
                var isDefined = function (v) { return 'undefined' !== typeof v; };
                var isObject = function (v) { return null !== v && 'object' === typeof v; };
                /* returns true if the provided data type matches number type */
                var isNumberType = function (type) {
                    return (NUMBER_TYPES.indexOf(extractType(type).toLowerCase()) !== -1);
                };
                /*
                * extracts and returns the last bit from full typeRef of a field
                * e.g. returns 'String' for typeRef = 'java.lang.String'
                * @params: {typeRef} type reference
                */
                var extractType = function (typeRef) {
                    var type;
                    if (!typeRef) {
                        return DataType.STRING;
                    }
                    type = typeRef && typeRef.substring(typeRef.lastIndexOf('.') + 1);
                    type = type && type.toLowerCase();
                    type = type === DataType.LOCALDATETIME ? DataType.DATETIME : type;
                    return type;
                };
                /*Function to check if date time type*/
                var isDateTimeType = function (type) {
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default().includes(type, '.')) {
                        type = lodash__WEBPACK_IMPORTED_MODULE_1___default().toLower(extractType(type));
                    }
                    return lodash__WEBPACK_IMPORTED_MODULE_1___default().includes([DataType.DATE, DataType.TIME, DataType.TIMESTAMP, DataType.DATETIME, DataType.LOCALDATETIME], type);
                };
                var getValidJSON = function (content) {
                    if (!content) {
                        return undefined;
                    }
                    try {
                        var parsedIntValue = parseInt(content, 10);
                        /*obtaining json from editor content string*/
                        return isObject(content) || !isNaN(parsedIntValue) ? content : JSON.parse(content);
                    }
                    catch (e) {
                        /*terminating execution if new variable object is not valid json.*/
                        return undefined;
                    }
                };
                var xmlToJson = function (xmlString) {
                    var x2jsObj = new (x2js__WEBPACK_IMPORTED_MODULE_0___default())({ 'emptyNodeForm': 'content', 'attributePrefix': '', 'enableToStringFunc': false });
                    var json = x2jsObj.xml2js(xmlString);
                    if (json) {
                        json = lodash__WEBPACK_IMPORTED_MODULE_1___default().get(json, Object.keys(json)[0]);
                    }
                    return json;
                };
                /*
                 * Util method to replace patterns in string with object keys or array values
                 * Examples:
                 * Utils.replace('Hello, ${first} ${last} !', {first: 'wavemaker', last: 'ng'}) --> Hello, wavemaker ng
                 * Utils.replace('Hello, ${0} ${1} !', ['wavemaker','ng']) --> Hello, wavemaker ng
                 * Examples if parseError is true:
                 * Utils.replace('Hello, {0} {1} !', ['wavemaker','ng']) --> Hello, wavemaker ng
                 */
                var replace = function (template, map, parseError) {
                    var regEx = REGEX.REPLACE_PATTERN;
                    if (!template) {
                        return;
                    }
                    if (parseError) {
                        regEx = /\{([^\}]+)\}/g;
                    }
                    return template.replace(regEx, function (match, key) {
                        return lodash__WEBPACK_IMPORTED_MODULE_1___default().get(map, key);
                    });
                };
                /**
                 * prepare a blob object based on the content and content type provided
                 * if content is blob itself, simply returns it back
                 * @param val
                 * @param valContentType
                 * @returns {*}
                 */
                var getBlob = function (val, valContentType) {
                    if (val instanceof Blob) {
                        return val;
                    }
                    var jsonVal = getValidJSON(val);
                    if (jsonVal && jsonVal instanceof Object) {
                        val = new Blob([JSON.stringify(jsonVal)], { type: valContentType || 'application/json' });
                    }
                    else {
                        val = new Blob([val], { type: valContentType || 'text/plain' });
                    }
                    return val;
                };
                /**
                 * Returns a deep cloned replica of the passed object/array
                 * @param object object/array to clone
                 * @returns a clone of the passed object
                 */
                var getClonedObject = function (object) {
                    return lodash__WEBPACK_IMPORTED_MODULE_1___default().cloneDeep(object);
                };
                /**
                 * this method checks if a given string starts with the given string
                 */
                var stringStartsWith = function (str, startsWith, ignoreCase) {
                    if (!str) {
                        return false;
                    }
                    var regEx = new RegExp('^' + startsWith, ignoreCase ? 'i' : '');
                    return regEx.test(str);
                };
                /*function to check if fn is a function and then execute*/
                function triggerFn(fn) {
                    /* Use of slice on arguments will make this function not optimizable
                    * https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
                    * */
                    var argmnts = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        argmnts[_i - 1] = arguments[_i];
                    }
                    var start = 1;
                    var len = arguments.length, args = new Array(len - start);
                    for (start; start < len; start++) {
                        args[start - 1] = arguments[start];
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_1___default().isFunction(fn)) {
                        return fn.apply(null, args);
                    }
                }
                /*
                 * Util method to find the value of a key in the object
                 * if key not found and create is true, an object is created against that node
                 * Examples:
                 * var a = {
                 *  b: {
                 *      c : {
                 *          d: 'test'
                 *      }
                 *  }
                 * }
                 * Utils.findValue(a, 'b.c.d') --> 'test'
                 * Utils.findValue(a, 'b.c') --> {d: 'test'}
                 * Utils.findValue(a, 'e') --> undefined
                 * Utils.findValue(a, 'e', true) --> {} and a will become:
                 * {
                 *   b: {
                 *      c : {
                 *          d: 'test'
                 *      }
                 *  },
                 *  e: {
                 *  }
                 * }
                 */
                var findValueOf = function (obj, key, create) {
                    if (!obj || !key) {
                        return;
                    }
                    if (!create) {
                        return lodash__WEBPACK_IMPORTED_MODULE_1___default().get(obj, key);
                    }
                    var parts = key.split('.'), keys = [];
                    var skipProcessing;
                    parts.forEach(function (part) {
                        if (!parts.length) { // if the part of a key is not valid, skip the processing.
                            skipProcessing = true;
                            return false;
                        }
                        var subParts = part.match(/\w+/g);
                        var subPart;
                        while (subParts.length) {
                            subPart = subParts.shift();
                            keys.push({ 'key': subPart, 'value': subParts.length ? [] : {} }); // determine whether to create an array or an object
                        }
                    });
                    if (skipProcessing) {
                        return undefined;
                    }
                    keys.forEach(function (_key) {
                        var tempObj = obj[_key.key];
                        if (!isObject(tempObj)) {
                            tempObj = getValidJSON(tempObj);
                            if (!tempObj) {
                                tempObj = _key.value;
                            }
                        }
                        obj[_key.key] = tempObj;
                        obj = tempObj;
                    });
                    return obj;
                };
                /***/ 
            }),
            /***/ "./src/util/variable/live-variable.http.utils.ts": 
            /*!*******************************************************!*\
              !*** ./src/util/variable/live-variable.http.utils.ts ***!
              \*******************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "LVService": function () { return ( /* binding */LVService); },
                    /* harmony export */ "generateConnectionParams": function () { return ( /* binding */generateConnectionParams); },
                    /* harmony export */ "parseConfig": function () { return ( /* binding */parseConfig); }
                    /* harmony export */ 
                });
                /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/util/utils.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variables.utils */ "./src/util/variable/variables.utils.ts");
                var isStudioMode = false;
                var parseConfig = function (serviceParams) {
                    var val, param, config;
                    var urlParams = serviceParams.urlParams;
                    /*get the config out of baseServiceManager*/
                    if (_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_URLS.hasOwnProperty(serviceParams.target) && _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_URLS[serviceParams.target].hasOwnProperty(serviceParams.action)) {
                        config = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_URLS[serviceParams.target][serviceParams.action]);
                        /*To handle dynamic urls, append the serviceParams.config.url with the static url(i.e., config.url)*/
                        if (serviceParams.config) {
                            config.url = (serviceParams.config.url || '') + config.url;
                            config.method = serviceParams.config.method || config.method;
                            config.headers = config.headers || {};
                            // TODO[Shubham] - change to for - of
                            for (var key in serviceParams.config.headers) {
                                val = serviceParams.config.headers[key];
                                config.headers[key] = val;
                            }
                        }
                        /* check for url parameters to replace the url */
                        if (urlParams) {
                            for (param in urlParams) {
                                if (urlParams.hasOwnProperty(param)) {
                                    val = urlParams[param];
                                    if (!_.isUndefined(val) && val !== null) {
                                        config.url = config.url.replace(new RegExp(':' + param, 'g'), val);
                                    }
                                }
                            }
                        }
                        /* check for data */
                        if (serviceParams.params) {
                            config.params = serviceParams.params;
                        }
                        /* check for data */
                        if (!_.isUndefined(serviceParams.data)) {
                            config.data = serviceParams.data;
                        }
                        /* check for data parameters, written to support old service calls (.json calls) */
                        if (serviceParams.dataParams) {
                            config.data.params = serviceParams.dataParams;
                        }
                        /* check for headers */
                        if (serviceParams.headers) {
                            config.headers = serviceParams.headers;
                        }
                        /* set extra config flags */
                        config.byPassResult = serviceParams.byPassResult;
                        config.isDirectCall = serviceParams.isDirectCall;
                        config.isExtURL = serviceParams.isExtURL;
                        config.preventMultiple = serviceParams.preventMultiple;
                        config.responseType = serviceParams.responseType;
                        return config;
                    }
                    return null;
                };
                var generateConnectionParams = function (params, action) {
                    var connectionParams, urlParams, requestData;
                    requestData = params.data;
                    urlParams = {
                        projectID: params.projectID,
                        service: !_.isUndefined(params.service) ? params.service : 'services',
                        dataModelName: params.dataModelName,
                        entityName: params.entityName,
                        queryName: params.queryName,
                        queryParams: params.queryParams,
                        procedureName: params.procedureName,
                        procedureParams: params.procedureParams,
                        id: params.id,
                        relatedFieldName: params.relatedFieldName,
                        page: params.page,
                        size: params.size,
                        sort: params.sort
                    };
                    connectionParams = {
                        target: 'DATABASE',
                        action: action,
                        urlParams: urlParams,
                        data: requestData || '',
                        config: {
                            'url': params.url
                        }
                    };
                    connectionParams = parseConfig(connectionParams);
                    // TODO: Remove after backend fix
                    connectionParams.url = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.removeExtraSlashes)(connectionParams.url);
                    return connectionParams;
                };
                var initiateAction = function (action, params, successCallback, failureCallback, noproxy) {
                    var connectionParams, urlParams, requestData, param, val, config, headers, httpDetails;
                    /*
                    config      = getClonedObject(config[action]);
                    headers     = config && config.headers;
                
                    requestData = params.data;
                
                    urlParams = {
                        projectID        : params.projectID,
                        service          : !_.isUndefined(params.service) ? params.service : 'services',
                        dataModelName    : params.dataModelName,
                        entityName       : params.entityName,
                        queryName        : params.queryName,
                        queryParams      : params.queryParams,
                        procedureName    : params.procedureName,
                        procedureParams  : params.procedureParams,
                        id               : params.id,
                        relatedFieldName : params.relatedFieldName,
                        page             : params.page,
                        size             : params.size,
                        sort             : params.sort
                    };
                    */
                    if (params.url && isStudioMode && !noproxy) {
                        /*
                                /!* Check for url parameters to replace the URL.
                                 * So the variable parameters in the URL will be replaced by the actual parameter values.*!/
                                if (urlParams) {
                                    for (param in urlParams) {
                                        if (urlParams.hasOwnProperty(param)) {
                                            val = urlParams[param];
                                            if (!_.isUndefined(val) && val !== null) {
                                                config.url = config.url.replace(new RegExp(':' + param, 'g'), val);
                                            }
                                        }
                                    }
                                }
                                headers = headers || {};
                                headers.skipSecurity = 'true';
                                headers['Content-Type'] = headers['Content-Type'] || 'application/json';
                                /!*(!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy is added in endpointAddress to differentiate desktop from saas*!/
                                if (action === 'testRunQuery') {
                                    headers['Content-Type'] = undefined;
                                    httpDetails = {
                                        'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,
                                        'method'            : config.method,
                                        'content-Type'      : 'multipart/form-data',
                                        'headers'           : headers
                                    };
                                    requestData.append(SWAGGER_CONSTANTS.WM_HTTP_JSON, new Blob([JSON.stringify(httpDetails)], {
                                        type: 'application/json'
                                    }));
                                    connectionParams = {
                                        'data': requestData,
                                        'headers': headers,
                                        'urlParams'         : {
                                            projectID: $rootScope.project.id
                                        }
                                    };
                                } else {
                                    connectionParams = {
                                        'data': {
                                            'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,
                                            'method'            : config.method,
                                            'requestBody'       : JSON.stringify(requestData),
                                            'headers'           : headers
                                        },
                                        'urlParams'         : {
                                            projectID: $rootScope.project.id
                                        }
                                    };
                                }
                                WebService.testRestService(connectionParams, function (response) {
                                    var parsedData = getValidJSON(response.responseBody),
                                        errMsg,
                                        localeObject;
                                    if (parsedData.hasOwnProperty('result')) {
                                        triggerFn(successCallback, parsedData.result);
                                    } else if (parsedData.hasOwnProperty('error')) {
                                        triggerFn(failureCallback, (parsedData.error && parsedData.error.message) || parsedData.error);
                                    } else if (parsedData.hasOwnProperty('errorDetails')) {
                                        localeObject = $rootScope.locale || $rootScope.appLocale;
                                        errMsg = getClonedObject(localeObject[parsedData.errorDetails.code]);
                                        triggerFn(failureCallback, replace(errMsg, parsedData.errorDetails.data) || parsedData.errorDetails);
                                    } else {
                                        triggerFn(successCallback, parsedData);
                                    }
                                }, failureCallback);*/
                    }
                    else {
                        connectionParams = generateConnectionParams(params, action);
                        params.operation = action;
                        return _variables_utils__WEBPACK_IMPORTED_MODULE_2__.httpService.sendCallAsObservable({
                            url: connectionParams.url,
                            method: connectionParams.method,
                            data: connectionParams.data,
                            headers: connectionParams.headers
                        }, params);
                    }
                };
                var LVService = {
                    searchTableDataWithQuery: function (params, successCallback, failureCallback) { return initiateAction('searchTableDataWithQuery', params, successCallback, failureCallback); },
                    executeAggregateQuery: function (params, successCallback, failureCallback) { return initiateAction('executeAggregateQuery', params, successCallback, failureCallback); },
                    searchTableData: function (params, successCallback, failureCallback) { return initiateAction('searchTableData', params, successCallback, failureCallback); },
                    readTableData: function (params, successCallback, failureCallback) { return initiateAction('readTableData', params, successCallback, failureCallback); },
                    insertTableData: function (params, successCallback, failureCallback) { return initiateAction('insertTableData', params, successCallback, failureCallback); },
                    insertMultiPartTableData: function (params, successCallback, failureCallback) { return initiateAction('insertMultiPartTableData', params, successCallback, failureCallback); },
                    updateTableData: function (params, successCallback, failureCallback) { return initiateAction('updateTableData', params, successCallback, failureCallback); },
                    updateCompositeTableData: function (params, successCallback, failureCallback) { return initiateAction('updateCompositeTableData', params, successCallback, failureCallback); },
                    periodUpdateCompositeTableData: function (params, successCallback, failureCallback) { return initiateAction('periodUpdateCompositeTableData', params, successCallback, failureCallback); },
                    updateMultiPartTableData: function (params, successCallback, failureCallback) { return initiateAction('updateMultiPartTableData', params, successCallback, failureCallback); },
                    updateMultiPartCompositeTableData: function (params, successCallback, failureCallback) { return initiateAction('updateMultiPartCompositeTableData', params, successCallback, failureCallback); },
                    deleteTableData: function (params, successCallback, failureCallback) { return initiateAction('deleteTableData', params, successCallback, failureCallback); },
                    deleteCompositeTableData: function (params, successCallback, failureCallback) { return initiateAction('deleteCompositeTableData', params, successCallback, failureCallback); },
                    periodDeleteCompositeTableData: function (params, successCallback, failureCallback) { return initiateAction('periodDeleteCompositeTableData', params, successCallback, failureCallback); },
                    exportTableData: function (params) { return initiateAction('exportTableData', params); },
                    getDistinctDataByFields: function (params) { return initiateAction('getDistinctDataByFields', params); },
                    countTableDataWithQuery: function (params, successCallback, failureCallback) { return initiateAction('countTableDataWithQuery', params, successCallback, failureCallback); }
                };
                /***/ 
            }),
            /***/ "./src/util/variable/live-variable.utils.ts": 
            /*!**************************************************!*\
              !*** ./src/util/variable/live-variable.utils.ts ***!
              \**************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "LiveVariableUtils": function () { return ( /* binding */LiveVariableUtils); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variables.utils */ "./src/util/variable/variables.utils.ts");
                var LiveVariableUtils = /** @class */ (function () {
                    function LiveVariableUtils() {
                    }
                    LiveVariableUtils.isCompositeKey = function (primaryKey) {
                        return !primaryKey || (primaryKey && (!primaryKey.length || primaryKey.length > 1));
                    };
                    LiveVariableUtils.isNoPrimaryKey = function (primaryKey) {
                        return (!primaryKey || (primaryKey && !primaryKey.length));
                    };
                    // Generate the URL based on the primary keys and their values
                    LiveVariableUtils.getCompositeIDURL = function (primaryKeysData) {
                        var compositeId = '';
                        //  Loop over the 'compositeKeysData' and construct the 'compositeId'.
                        _.forEach(primaryKeysData, function (paramValue, paramName) {
                            compositeId += paramName + '=' + encodeURIComponent(paramValue) + '&';
                        });
                        compositeId = compositeId.slice(0, -1);
                        return compositeId;
                    };
                    // Check if table has blob column
                    LiveVariableUtils.hasBlob = function (variable) {
                        return _.find(_.get(variable, ['propertiesMap', 'columns']), { 'type': 'blob' });
                    };
                    LiveVariableUtils.getPrimaryKey = function (variable) {
                        if (!variable.propertiesMap) {
                            return [];
                        }
                        if (variable.propertiesMap.primaryFields) {
                            return variable.propertiesMap.primaryFields;
                        }
                        /*Old projects do not have primary fields. Get primary key from the columns*/
                        var primaryKey = [];
                        /*Loop through the propertiesMap and get the primary key column.*/
                        _.forEach(variable.propertiesMap.columns, function (index, column) {
                            if (column.isPrimaryKey) {
                                if (column.isRelated && (!_.includes(column.relatedFieldName, primaryKey))) {
                                    primaryKey.push(column.relatedFieldName);
                                }
                                else if (!_.includes(column.fieldName, primaryKey)) {
                                    primaryKey.push(column.fieldName);
                                }
                            }
                        });
                        return primaryKey;
                    };
                    //  Construct the URL for blob columns and set it in the data, so that widgets can use this
                    LiveVariableUtils.processBlobColumns = function (responseData, variable) {
                        if (!responseData) {
                            return;
                        }
                        var blobCols = _.map(_.filter(variable.propertiesMap.columns, { 'type': 'blob' }), 'fieldName'), deployedUrl = _.trim(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.$rootScope.project.deployedUrl);
                        var href = '', primaryKeys;
                        if (_.isEmpty(blobCols)) {
                            return;
                        }
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.hasCordova)()) {
                            href += _.endsWith(deployedUrl, '/') ? deployedUrl : deployedUrl + '/';
                        }
                        href += ((variable._prefabName !== '' && variable._prefabName !== undefined) ? 'prefabs/' + variable._prefabName : 'services') + '/' + variable.liveSource + '/' + variable.type + '/';
                        primaryKeys = variable.propertiesMap.primaryFields || variable.propertiesMap.primaryKeys;
                        _.forEach(responseData, function (data) {
                            if (data) {
                                _.forEach(blobCols, function (col) {
                                    var compositeKeysData = {};
                                    if (data[col] === null || !_.isEmpty(_.trim(data[col]))) {
                                        return;
                                    }
                                    if (LiveVariableUtils.isCompositeKey(primaryKeys)) {
                                        primaryKeys.forEach(function (key) {
                                            compositeKeysData[key] = data[key];
                                        });
                                        data[col] = href + 'composite-id/content/' + col + '?' + LiveVariableUtils.getCompositeIDURL(compositeKeysData);
                                    }
                                    else {
                                        data[col] = href + data[_.join(primaryKeys)] + '/content/' + col;
                                    }
                                });
                            }
                        });
                    };
                    LiveVariableUtils.getHibernateOrSqlType = function (variable, fieldName, type, entityName) {
                        var columns = variable.propertiesMap.columns;
                        var column, relatedCols, relatedCol, columnParts;
                        if (_.includes(fieldName, '.')) {
                            columnParts = fieldName.split('.');
                            if (columnParts.length > 2) {
                                return undefined;
                            }
                            column = _.find(columns, function (col) {
                                return col.fieldName === columnParts[0];
                            });
                            relatedCols = column && column.columns;
                            relatedCol = _.find(relatedCols, function (col) {
                                return col.fieldName === columnParts[1];
                            });
                            return relatedCol && relatedCol[type];
                        }
                        column = _.find(columns, function (col) {
                            return col.fieldName === fieldName || col.relatedColumnName === fieldName;
                        });
                        if (!column && entityName) {
                            var entity = _.find(columns, function (col) { return col.relatedEntityName === entityName; });
                            column = _.find(entity.columns, function (col) {
                                return col.fieldName === fieldName || col.relatedColumnName === fieldName;
                            });
                        }
                        return column && column[type];
                    };
                    /*Function to get the sqlType of the specified field.*/
                    LiveVariableUtils.getSqlType = function (variable, fieldName, entityName) {
                        return LiveVariableUtils.getHibernateOrSqlType(variable, fieldName, 'type', entityName);
                    };
                    /*Function to check if the specified field has a one-to-many relation or not.*/
                    LiveVariableUtils.isRelatedFieldMany = function (variable, fieldName) {
                        var columns = variable.propertiesMap.columns, columnsCount = columns.length;
                        var index, column;
                        /*Loop through the columns of the liveVariable*/
                        for (index = 0; index < columnsCount; index += 1) {
                            column = columns[index];
                            /*If the specified field is found in the columns of the variable,
                            * then it has a many-to-one relation.*/
                            if (column.fieldName === fieldName) {
                                return false;
                            }
                        }
                        return true;
                    };
                    LiveVariableUtils.isStringType = function (type) {
                        return _.includes(['text', 'string'], _.toLower(type));
                    };
                    LiveVariableUtils.getSQLFieldType = function (variable, options) {
                        if (_.includes(['timestamp', 'datetime', 'date'], options.type)) {
                            return options.type;
                        }
                        return LiveVariableUtils.getSqlType(variable, options.fieldName) || options.type;
                    };
                    LiveVariableUtils.getAttributeName = function (variable, fieldName) {
                        var attrName = fieldName;
                        variable.propertiesMap.columns.forEach(function (column) {
                            if (column.fieldName === fieldName && column.isRelated) {
                                attrName = column.relatedFieldName;
                            }
                        });
                        return attrName;
                    };
                    LiveVariableUtils.getFilterCondition = function (filterCondition) {
                        if (_.includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_RANGE_MATCH_MODES, filterCondition)) {
                            return filterCondition;
                        }
                        return _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES.exact;
                    };
                    LiveVariableUtils.getFilterOption = function (variable, fieldOptions, options) {
                        var attributeName, fieldValue = fieldOptions.value, filterOption, filterCondition;
                        var matchModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES, fieldName = fieldOptions.fieldName, fieldRequired = fieldOptions.required || false, fieldType = LiveVariableUtils.getSQLFieldType(variable, fieldOptions);
                        filterCondition = matchModes[fieldOptions.matchMode] || matchModes[fieldOptions.filterCondition] || fieldOptions.filterCondition;
                        fieldOptions.type = fieldType;
                        /* if the field value is an object(complex type), loop over each field inside and push only first level fields */
                        if (_.isObject(fieldValue) && !_.isArray(fieldValue)) {
                            var firstLevelValues_1 = [];
                            _.forEach(fieldValue, function (subFieldValue, subFieldName) {
                                if (subFieldValue && !_.isObject(subFieldValue)) {
                                    firstLevelValues_1.push(fieldName + '.' + subFieldName + '=' + subFieldValue);
                                }
                            });
                            return firstLevelValues_1;
                        }
                        if (_.includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition)) {
                            attributeName = LiveVariableUtils.getAttributeName(variable, fieldName);
                            // For non string types empty match modes are not supported, so convert them to null match modes.
                            if (fieldType && !LiveVariableUtils.isStringType(fieldType)) {
                                filterCondition = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_NULL_EMPTY_MATCH[filterCondition];
                            }
                            filterOption = {
                                'attributeName': attributeName,
                                'attributeValue': '',
                                'attributeType': _.toUpper(fieldType),
                                'filterCondition': filterCondition,
                                'required': fieldRequired
                            };
                            if (options.searchWithQuery) {
                                filterOption.isVariableFilter = fieldOptions.isVariableFilter;
                            }
                            return filterOption;
                        }
                        if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(fieldValue) && fieldValue !== null && fieldValue !== '') {
                            /*Based on the sqlType of the field, format the value & set the filter condition.*/
                            if (fieldType) {
                                switch (fieldType) {
                                    case 'integer':
                                        fieldValue = _.isArray(fieldValue) ? _.reduce(fieldValue, function (result, value) {
                                            value = parseInt(value, 10);
                                            if (!_.isNaN(value)) {
                                                result.push(value);
                                            }
                                            return result;
                                        }, []) : parseInt(fieldValue, 10);
                                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];
                                        break;
                                    case 'date':
                                    case 'datetime':
                                    case 'timestamp':
                                        // ToDo - variable seperation
                                        fieldValue = (0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatDate)(fieldValue, fieldType);
                                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];
                                        break;
                                    case 'text':
                                    case 'string':
                                        if (_.isArray(fieldValue)) {
                                            filterCondition = _.includes([matchModes['in'], matchModes['notin']], filterCondition) ? filterCondition : matchModes['exact'];
                                        }
                                        else {
                                            filterCondition = filterCondition || matchModes['anywhereignorecase'];
                                        }
                                        break;
                                    default:
                                        filterCondition = filterCondition ? LiveVariableUtils.getFilterCondition(filterCondition) : matchModes['exact'];
                                        break;
                                }
                            }
                            else {
                                filterCondition = _.isString(fieldValue) ? matchModes['anywhereignorecase'] : matchModes['exact'];
                            }
                            attributeName = LiveVariableUtils.getAttributeName(variable, fieldName);
                            filterOption = {
                                'attributeName': attributeName,
                                'attributeValue': fieldValue,
                                'attributeType': _.toUpper(fieldType),
                                'filterCondition': filterCondition,
                                'required': fieldRequired
                            };
                            if (options.searchWithQuery) {
                                filterOption.isVariableFilter = fieldOptions.isVariableFilter;
                            }
                            return filterOption;
                        }
                    };
                    LiveVariableUtils.getFilterOptions = function (variable, filterFields, options) {
                        var filterOptions = [];
                        _.each(filterFields, function (fieldOptions) {
                            var filterOption = LiveVariableUtils.getFilterOption(variable, fieldOptions, options);
                            if (!_.isNil(filterOption)) {
                                if (_.isArray(filterOption)) {
                                    filterOptions = filterOptions.concat(filterOption);
                                }
                                else {
                                    filterOptions.push(filterOption);
                                }
                            }
                        });
                        return filterOptions;
                    };
                    // Wrap the field name and value in lower() in ignore case scenario
                    // TODO: Change the function name to represent the added functionality of identifiers for datetime, timestamp and float types. Previously only lower was warapped.
                    LiveVariableUtils.wrapInLowerCase = function (value, options, ignoreCase, isField) {
                        var type = _.toLower(options.attributeType);
                        // If ignore case is true and type is string/ text and match mode is string type, wrap in lower()
                        if (ignoreCase && (!type || LiveVariableUtils.isStringType(type)) && _.includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_STRING_MODES, options.filterCondition)) {
                            return 'lower(' + value + ')';
                        }
                        return value;
                    };
                    LiveVariableUtils.encodeAndAddQuotes = function (value, type, skipEncode) {
                        var encodedValue = skipEncode ? value : encodeURIComponent(value);
                        type = _.toLower(type);
                        encodedValue = _.replace(encodedValue, /'/g, '\'\'');
                        // For number types, don't wrap the value in quotes
                        if (((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isNumberType)(type) && type !== 'float')) {
                            return encodedValue;
                        }
                        return '\'' + encodedValue + '\'';
                    };
                    LiveVariableUtils.getParamValue = function (value, options, ignoreCase, skipEncode) {
                        var param;
                        var filterCondition = options.filterCondition, dbModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES, type = options.attributeType;
                        if (_.includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition)) {
                            // For empty matchmodes, no value is required
                            return '';
                        }
                        switch (filterCondition) {
                            case dbModes.startignorecase:
                            case dbModes.start:
                                param = LiveVariableUtils.encodeAndAddQuotes(value + '%', type, skipEncode);
                                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);
                                break;
                            case dbModes.endignorecase:
                            case dbModes.end:
                                param = LiveVariableUtils.encodeAndAddQuotes('%' + value, type, skipEncode);
                                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);
                                break;
                            case dbModes.nowhereignorecase:
                            case dbModes.nowhere:
                            case dbModes.anywhereignorecase:
                            case dbModes.anywhere:
                                param = LiveVariableUtils.encodeAndAddQuotes('%' + value + '%', type, skipEncode);
                                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);
                                break;
                            case dbModes.between:
                                param = _.join(_.map(value, function (val) {
                                    return LiveVariableUtils.wrapInLowerCase(LiveVariableUtils.encodeAndAddQuotes(val, type, skipEncode), options, ignoreCase);
                                }), ' and ');
                                break;
                            case dbModes.in:
                            case dbModes.notin:
                                param = _.join(_.map(value, function (val) {
                                    return LiveVariableUtils.wrapInLowerCase(LiveVariableUtils.encodeAndAddQuotes(val, type, skipEncode), options, ignoreCase);
                                }), ', ');
                                param = '(' + param + ')';
                                break;
                            /*case dbModes.exactignorecase:
                            case dbModes.exact:
                            case dbModes.notequals:
                            The above three cases will be handled by default*/
                            default:
                                param = LiveVariableUtils.encodeAndAddQuotes(value, type, skipEncode);
                                param = LiveVariableUtils.wrapInLowerCase(param, options, ignoreCase);
                                break;
                        }
                        return (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(param) ? param : '';
                    };
                    LiveVariableUtils.getSearchQuery = function (filterOptions, operator, ignoreCase, skipEncode) {
                        var query;
                        var params = [];
                        _.forEach(filterOptions, function (fieldValue) {
                            var value = fieldValue.attributeValue, dbModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES, isValArray = _.isArray(value);
                            var fieldName = fieldValue.attributeName, filterCondition = fieldValue.filterCondition, matchModeExpr, paramValue;
                            // If value is an empty array, do not generate the query
                            // If values is NaN and number type, do not generate query for this field
                            if ((isValArray && _.isEmpty(value)) || (!isValArray && isNaN(value) && ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isNumberType)(fieldValue.attributeType))) || (!isValArray && (isNaN(value) && !moment(value).isValid() && (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(_.toLower(fieldValue.attributeType))))) {
                                return;
                            }
                            if (isValArray) {
                                // If array is value and mode is between, pass between. Else pass as in query
                                filterCondition = filterCondition === dbModes.between || filterCondition === dbModes.notin ? filterCondition : dbModes.in;
                                fieldValue.filterCondition = filterCondition;
                            }
                            matchModeExpr = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES_WITH_QUERY[filterCondition];
                            paramValue = LiveVariableUtils.getParamValue(value, fieldValue, ignoreCase, skipEncode);
                            fieldName = LiveVariableUtils.wrapInLowerCase(fieldName, fieldValue, ignoreCase);
                            params.push((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.replace)(matchModeExpr, [fieldName, paramValue]));
                        });
                        query = _.join(params, operator); // empty space added intentionally around OR
                        return query;
                    };
                    /**
                     * creating the proper values from the actual object like for between,in matchModes value has to be an array like [1,2]
                     * @param rules recursive filterexpressions object
                     * @param variable variable object
                     * @param options options
                     */
                    LiveVariableUtils.processFilterFields = function (rules, variable, options) {
                        _.remove(rules, function (rule) {
                            return rule && (_.isString(rule.value) && rule.value.indexOf('bind:') === 0 || (rule.matchMode === 'between' ? (_.isString(rule.secondvalue) && rule.secondvalue.indexOf('bind:') === 0) : false));
                        });
                        _.forEach(rules, function (rule, index) {
                            if (rule) {
                                if (rule.rules) {
                                    LiveVariableUtils.processFilterFields(rule.rules, variable, options);
                                }
                                else {
                                    if (!_.isNull(rule.target)) {
                                        var value = rule.matchMode.toLowerCase() === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES.between.toLowerCase()
                                            ? (_.isArray(rule.value) ? rule.value : [rule.value, rule.secondvalue])
                                            : (rule.matchMode.toLowerCase() === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES["in"].toLowerCase() || rule.matchMode.toLowerCase() === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES.notin.toLowerCase()
                                                ? (_.isArray(rule.value) ? rule.value : (rule.value ? rule.value.split(',').map(function (val) { return val.trim(); }) : ''))
                                                : rule.value);
                                        rules[index] = LiveVariableUtils.getFilterOption(variable, {
                                            'fieldName': rule.target,
                                            'type': rule.type,
                                            'value': value,
                                            'required': rule.required,
                                            'filterCondition': rule.matchMode || options.matchMode || variable.matchMode
                                        }, options);
                                    }
                                }
                            }
                        });
                    };
                    LiveVariableUtils.getSearchField = function (fieldValue, ignoreCase, skipEncode) {
                        var fieldName = fieldValue.attributeName;
                        var matchModeExpr;
                        var paramValue;
                        var filterCondition = fieldValue.filterCondition;
                        var value = fieldValue.attributeValue;
                        var isValArray = _.isArray(value);
                        var dbModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES;
                        // If value is an empty array, do not generate the query
                        // If values is NaN and number type, do not generate query for this field
                        if ((isValArray && _.isEmpty(value)) ||
                            (isValArray && _.some(value, function (val) { return (_.isNull(val) || _.isNaN(val) || val === ''); })) ||
                            (!isValArray && (isNaN(value) && ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isNumberType)(fieldValue.attributeType)))) ||
                            (!isValArray && (isNaN(value) && !moment(value).isValid() && (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(_.toLower(fieldValue.attributeType))))) {
                            return;
                        }
                        if (isValArray) {
                            // If array is value and mode is between, pass between. Else pass as in query
                            filterCondition = filterCondition === dbModes.between || filterCondition === dbModes.notin ? filterCondition : dbModes.in;
                            fieldValue.filterCondition = filterCondition;
                        }
                        matchModeExpr = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES_WITH_QUERY[filterCondition];
                        paramValue = LiveVariableUtils.getParamValue(value, fieldValue, ignoreCase, skipEncode);
                        fieldName = LiveVariableUtils.wrapInLowerCase(fieldName, fieldValue, ignoreCase);
                        return (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.replace)(matchModeExpr, [fieldName, paramValue]);
                    };
                    /**
                     * this is used to identify whether to use ignorecase at each criteria level and not use the variable
                     * level isIgnoreCase flag and apply it to all the rules.
                     * Instead of adding an extra param to the criteria object, we have added few other matchmodes for string types like
                     * anywhere with anywhereignorecase, start with startignorecase, end with endignorecase, exact with exactignorecase,
                     * So while creating the criteria itseld user can choose whether to use ignore case or not for a particular column while querying
                     * @param matchMode
                     * @param ignoreCase
                     * @returns {*} boolean
                     */
                    LiveVariableUtils.getIgnoreCase = function (matchMode, ignoreCase) {
                        var matchModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES;
                        if (_.indexOf([matchModes['anywhere'], matchModes['nowhere'], matchModes['start'], matchModes['end'], matchModes['exact']], matchMode) !== -1) {
                            return false;
                        }
                        if (_.indexOf([matchModes['anywhereignorecase'], matchModes['nowhereignorecase'], matchModes['startignorecase'], matchModes['endignorecase'], matchModes['exactignorecase']], matchMode) !== -1) {
                            return true;
                        }
                        return ignoreCase;
                    };
                    LiveVariableUtils.generateSearchQuery = function (rules, condition, ignoreCase, skipEncode) {
                        var params = [];
                        _.forEach(rules, function (rule) {
                            if (rule) {
                                if (rule.rules) {
                                    var query = LiveVariableUtils.generateSearchQuery(rule.rules, rule.condition, ignoreCase, skipEncode);
                                    if (query !== '') {
                                        params.push('(' + query + ')');
                                    }
                                }
                                else {
                                    var searchField = LiveVariableUtils.getSearchField(rule, LiveVariableUtils.getIgnoreCase(rule.filterCondition, ignoreCase), skipEncode);
                                    if (!_.isNil(searchField)) {
                                        params.push(searchField);
                                    }
                                }
                            }
                        });
                        return _.join(params, ' ' + condition + ' ');
                    };
                    LiveVariableUtils.prepareTableOptionsForFilterExps = function (variable, options, clonedFields) {
                        if (!(0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(options.searchWithQuery)) {
                            options.searchWithQuery = true; // Using query api instead of  search api
                        }
                        var filterOptions = [];
                        var matchModes = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES;
                        var orderByFields, orderByOptions, query;
                        var clonedObj = clonedFields || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(variable.filterExpressions);
                        // if filterexpression from live filter is present use it to query
                        if (options.filterExpr && !_.isEmpty(options.filterExpr)) {
                            clonedObj = options.filterExpr;
                        }
                        // merge live filter runtime values
                        var filterRules = {};
                        if (!_.isEmpty(options.filterFields)) {
                            var operator = '';
                            for (var field in options.filterFields) {
                                operator = options.filterFields[field]['logicalOp'] || '';
                                break;
                            }
                            filterRules = { 'condition': options.logicalOp || operator || 'AND', 'rules': [] };
                            _.forEach(options.filterFields, function (filterObj, filterName) {
                                var filterCondition = matchModes[filterObj.matchMode] || matchModes[filterObj.filterCondition] || filterObj.filterCondition;
                                if (_.includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_EMPTY_MATCH_MODES, filterCondition) ||
                                    (!_.isNil(filterObj.value) && filterObj.value !== '')) {
                                    var type = filterObj.type || LiveVariableUtils.getSqlType(variable, filterName, options.entityName);
                                    var ruleObj = {
                                        'target': filterName,
                                        'type': type,
                                        'matchMode': filterObj.matchMode || (LiveVariableUtils.isStringType(type) ? 'startignorecase' : 'exact'),
                                        'value': filterObj.value,
                                        'required': filterObj.required || false
                                    };
                                    filterRules.rules.push(ruleObj);
                                }
                            });
                        }
                        if (!_.isEmpty(clonedObj)) {
                            if (!_.isNil(filterRules.rules) && filterRules.rules.length) {
                                // combine both the rules using 'AND'
                                var tempRules = { 'condition': 'AND', 'rules': [] };
                                tempRules.rules.push((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(clonedObj));
                                tempRules.rules.push(filterRules);
                                clonedObj = tempRules;
                            }
                        }
                        else {
                            clonedObj = filterRules;
                        }
                        LiveVariableUtils.processFilterFields(clonedObj.rules, variable, options);
                        query = LiveVariableUtils.generateSearchQuery(clonedObj.rules, clonedObj.condition, variable.ignoreCase, options.skipEncode);
                        orderByFields = (0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.getEvaluatedOrderBy)(variable.orderBy, options.orderBy);
                        orderByOptions = orderByFields ? 'sort=' + orderByFields : '';
                        return {
                            'filter': filterOptions,
                            'sort': orderByOptions,
                            'query': query
                        };
                    };
                    LiveVariableUtils.prepareTableOptions = function (variable, options, clonedFields) {
                        if (variable.operation === 'read') {
                            return LiveVariableUtils.prepareTableOptionsForFilterExps(variable, options, clonedFields);
                        }
                        if (!(0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(options.searchWithQuery)) {
                            options.searchWithQuery = true; //  Using query api instead of  search api
                        }
                        var filterFields = [];
                        var filterOptions = [], orderByFields, orderByOptions, query, optionsQuery;
                        clonedFields = clonedFields || variable.filterFields;
                        // get the filter fields from the variable
                        _.forEach(clonedFields, function (value, key) {
                            if (_.isObject(value) && (!options.filterFields || !options.filterFields[key] || options.filterFields[key].logicalOp === 'AND')) {
                                value.fieldName = key;
                                if (LiveVariableUtils.isStringType(LiveVariableUtils.getSQLFieldType(variable, value))) {
                                    value.filterCondition = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES[value.matchMode || variable.matchMode];
                                }
                                value.isVariableFilter = true;
                                filterFields.push(value);
                            }
                        });
                        // get the filter fields from the options
                        _.forEach(options.filterFields, function (value, key) {
                            value.fieldName = key;
                            value.filterCondition = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.DB_CONSTANTS.DATABASE_MATCH_MODES[value.matchMode || options.matchMode || variable.matchMode];
                            filterFields.push(value);
                        });
                        if (variable.operation === 'read' || options.operation === 'read') {
                            filterOptions = LiveVariableUtils.getFilterOptions(variable, filterFields, options);
                        }
                        /*if searchWithQuery is true, then convert the input params into query string. For example if firstName and lastName
                         should be sent as params then query string will be q='firstName containing 'someValue' OR lastName containing 'someValue''
                         */
                        if (options.searchWithQuery && filterOptions.length) {
                            // Generate query for variable filter fields. This has AND logical operator
                            query = LiveVariableUtils.getSearchQuery(_.filter(filterOptions, { 'isVariableFilter': true }), ' AND ', variable.ignoreCase, options.skipEncode);
                            // Generate query for option filter fields. This has default logical operator as OR
                            optionsQuery = LiveVariableUtils.getSearchQuery(_.filter(filterOptions, { 'isVariableFilter': undefined }), ' ' + (options.logicalOp || 'AND') + ' ', variable.ignoreCase, options.skipEncode);
                            if (optionsQuery) {
                                // If both variable and option query are present, merge them with AND
                                query = query ? (query + ' AND ( ' + optionsQuery + ' )') : optionsQuery;
                            }
                        }
                        orderByFields = (0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.getEvaluatedOrderBy)(variable.orderBy, options.orderBy);
                        orderByOptions = orderByFields ? 'sort=' + orderByFields : '';
                        return {
                            'filter': filterOptions,
                            'sort': orderByOptions,
                            'query': query
                        };
                    };
                    /* Function to check if specified field is of type date*/
                    LiveVariableUtils.getFieldType = function (fieldName, variable, relatedField) {
                        var fieldType, columns, result;
                        if (variable.propertiesMap) {
                            columns = variable.propertiesMap.columns || [];
                            result = _.find(columns, function (obj) {
                                return obj.fieldName === fieldName;
                            });
                            // if related field name passed, get its type from columns inside the current field
                            if (relatedField && result) {
                                result = _.find(result.columns, function (obj) {
                                    return obj.fieldName === relatedField;
                                });
                            }
                            fieldType = result && result.type;
                        }
                        return fieldType;
                    };
                    // Prepare formData for blob columns
                    LiveVariableUtils.prepareFormData = function (variableDetails, rowObject) {
                        var formData = new FormData();
                        formData.rowData = _.clone(rowObject);
                        _.forEach(rowObject, function (colValue, colName) {
                            if (LiveVariableUtils.getFieldType(colName, variableDetails) === 'blob') {
                                if (_.isObject(colValue)) {
                                    if (_.isArray(colValue)) {
                                        _.forEach(colValue, function (fileObject) {
                                            formData.append(colName, fileObject, fileObject.name);
                                        });
                                    }
                                    else {
                                        formData.append(colName, colValue, colValue.name);
                                    }
                                }
                                rowObject[colName] = colValue !== null ? '' : null;
                            }
                        });
                        formData.append(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.SWAGGER_CONSTANTS.WM_DATA_JSON, new Blob([JSON.stringify(rowObject)], {
                            type: 'application/json'
                        }));
                        return formData;
                    };
                    LiveVariableUtils.traverseFilterExpressions = function (filterExpressions, traverseCallbackFn) {
                        if (filterExpressions && filterExpressions.rules) {
                            _.forEach(filterExpressions.rules, function (filExpObj, i) {
                                if (filExpObj.rules) {
                                    LiveVariableUtils.traverseFilterExpressions(filExpObj, traverseCallbackFn);
                                }
                                else {
                                    return (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.triggerFn)(traverseCallbackFn, filterExpressions, filExpObj);
                                }
                            });
                        }
                    };
                    /**
                     * Traverses recursively the filterExpressions object and if there is any required field present with no value,
                     * then we will return without proceeding further. Its upto the developer to provide the mandatory value,
                     * if he wants to assign it in teh onbefore<delete/insert/update>function then make that field in
                     * the filter query section as optional
                     * @param filterExpressions - recursive rule Object
                     * @returns {Object} object or boolean. Object if everything gets validated or else just boolean indicating failure in the validations
                     */
                    LiveVariableUtils.getFilterExprFields = function (filterExpressions) {
                        var isRequiredFieldAbsent = false;
                        var traverseCallbackFn = function (parentFilExpObj, filExpObj) {
                            if (filExpObj
                                && filExpObj.required
                                && ((_.indexOf(['null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'], filExpObj.matchMode) === -1) && filExpObj.value === '')) {
                                isRequiredFieldAbsent = true;
                                return false;
                            }
                        };
                        LiveVariableUtils.traverseFilterExpressions(filterExpressions, traverseCallbackFn);
                        return isRequiredFieldAbsent ? !isRequiredFieldAbsent : filterExpressions;
                    };
                    /**
                     *
                     * @param variable
                     * @param options
                     * @returns {function(*=): *} returns a function which should be called for the where clause.
                     * This return function can take a function as argument. This argument function can modify the filter fields
                     * before generating where clause.
                     */
                    LiveVariableUtils.getWhereClauseGenerator = function (variable, options, updatedFilterFields) {
                        return function (modifier, skipEncode) {
                            var clonedFields = LiveVariableUtils.getFilterExprFields((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getClonedObject)(updatedFilterFields || variable.filterExpressions));
                            // this flag skips the encoding of the query
                            if ((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(skipEncode)) {
                                options.skipEncode = skipEncode;
                            }
                            if (modifier) {
                                // handling the scenario where variable can also have filterFields
                                if (options.filterFields) {
                                    modifier(clonedFields, options);
                                }
                                else {
                                    modifier(clonedFields);
                                }
                            }
                            return LiveVariableUtils.prepareTableOptions(variable, options, clonedFields).query;
                        };
                    };
                    return LiveVariableUtils;
                }());
                /***/ 
            }),
            /***/ "./src/util/variable/pagination.utils.ts": 
            /*!***********************************************!*\
              !*** ./src/util/variable/pagination.utils.ts ***!
              \***********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "PaginationUtils": function () { return ( /* binding */PaginationUtils); }
                    /* harmony export */ 
                });
                /* harmony import */ var _metrichor_jmespath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @metrichor/jmespath */ "./node_modules/@metrichor/jmespath/dist/jmespath.esm.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
                // declare const _: any;
                var PaginationUtils = /** @class */ (function () {
                    function PaginationUtils() {
                    }
                    /**
                     * Modifies the query values with the pagination info which is retrieved from the previous API response.
                     * @param variable withholds variable information
                     * @param operationInfo has metadata of the variable
                     * @param paginationInfo has metadata of the variable pagination data
                     * @returns {void} This method does not return anything
                     */
                    PaginationUtils.setPaginationQueryParams = function (variable, operationInfo, paginationInfo) {
                        operationInfo.parameters.forEach(function (element) {
                            // pagination input information varies based on the type
                            var inputParam;
                            if (paginationInfo.type === 'offset' || paginationInfo.input.offset) {
                                inputParam = 'offset';
                            }
                            else {
                                inputParam = 'page';
                            }
                            // modifies query values based on the pagination of variable
                            // compare parameter name with the input parameter's starting naming key (ex: channelcontext in channelcontext.pagination)
                            if (element.name === paginationInfo.input[inputParam].split('.')[0]) {
                                element.sampleValue = variable.pagination['page'];
                            }
                            else if (element.name === paginationInfo.input.size.split('.')[0]) {
                                element.sampleValue = variable.pagination['size'];
                            }
                        });
                    };
                    /**
                     * Sets pagination on the variable based on the response of the triggered api call.
                     * @param variable withholds variable information
                     * @param response has data of the api call's response
                     * @param options has info of the api's query params
                     * @returns {void} This method does not return anything
                     */
                    PaginationUtils.setVariablePagination = function (variable, response, options) {
                        if (!variable.pagination) {
                            variable.pagination = {
                                empty: false
                            };
                        }
                        variable.pagination['size'] = response.size;
                        variable.pagination['page'] = response.page || 0;
                        variable.pagination['totalElements'] = response.totalElements;
                        variable.pagination['numberOfElements'] = variable.pagination['size'];
                        variable.pagination['number'] = options['page'] ? options['page'] - 1 : 0;
                        /**
                         * Deduce totalPages from totalElements by size.
                         * If the total elements are evenly split among the pages, assign the same to totalPages
                         * Else assign totalPages + 1
                         */
                        variable.pagination['totalPages'] = variable.pagination['totalElements'] / variable.pagination['size'];
                        if (variable.pagination['totalElements'] % variable.pagination['size'] === 0) {
                            variable.pagination['totalPages'] = parseInt(variable.pagination['totalPages']);
                        }
                        else {
                            variable.pagination['totalPages'] = parseInt(variable.pagination['totalPages']) + 1;
                        }
                        // If pagination type is cursor, fill next & prev
                        if (response.next) {
                            variable.pagination['next'] = response.next;
                            variable.pagination['prev'] = response.prev;
                            variable.pagination['last'] = response.next ? false : true;
                            variable.pagination['first'] = response.prev ? false : true;
                        }
                        else {
                            variable.pagination['first'] = variable.pagination['page'] <= 1 ? true : false;
                            // calculate last based on current page index against total pages
                            variable.pagination['last'] = response.hasMoreItems === '' ? !(variable.pagination['page'] < variable.pagination['totalPages']) : !response.hasMoreItems;
                        }
                    };
                    /**
                     * Resolves the expression given in pagination metadata's output
                     * @param item has value of each key which is inside output pagination metadata
                     * @param response has data of the api call's response
                     * @param resHeaders has data of the api call's response headers
                     * @param res holds the information of pagination which has to be stored on the variable
                     * @param key has key name against which data has to be stored in pagination
                     * @returns {void} This method does not return anything
                     */
                    PaginationUtils.setPaginationItems = function (item, response, res, key, resHeaders) {
                        var _a;
                        // if the item has body, resolve the expression against the response
                        if (lodash__WEBPACK_IMPORTED_MODULE_1___default().startsWith(item, '$body')) {
                            var bodyKey = item.replace('$body.', '');
                            try {
                                res[key] = _metrichor_jmespath__WEBPACK_IMPORTED_MODULE_0__.jmespath.search(response, bodyKey);
                            }
                            catch (_b) {
                                console.warn(item + " expression needs to be corrected as per JMES guidelines");
                            }
                        }
                        else if (lodash__WEBPACK_IMPORTED_MODULE_1___default().startsWith(item, '$header')) { // if the item has header, resolve the expression against the response headers 
                            var headerKey = item.replace('$header.', '');
                            var headers = Object.fromEntries(resHeaders.headers);
                            var headerParams = headerKey.split('.');
                            try {
                                res[key] = _metrichor_jmespath__WEBPACK_IMPORTED_MODULE_0__.jmespath.search(headers, headerParams[0].toLowerCase());
                            }
                            catch (_c) {
                                console.warn(item + " expression needs to be corrected as per JMES guidelines");
                            }
                            if ((_a = res[key]) === null || _a === void 0 ? void 0 : _a.length) {
                                var headerVal = res[key].join();
                                if (headerParams.length === 1) {
                                    /**
                                     * If the headerParams has only 1 key (which is not an object) name assing headerVal to the res[key]
                                     */
                                    res[key] = headerVal;
                                }
                                else {
                                    /**
                                     * If the headerParams has more than 1 key (an object), parse the stringified headerVal which is an object
                                     * Resolve the expression against headerVal object amd assign it to res[key]
                                     */
                                    var keyName = headerParams.slice(1).join('.');
                                    var headerResp = JSON.parse(headerVal);
                                    var specialChar = /[!@#$%^&*()+\=\[\]{};':"\\|,<>\/?]+/;
                                    if (specialChar.test(keyName)) {
                                        // If key name has expression (ex: comparission expression) 
                                        // add root key name to keyName for JMES to resolve the expression
                                        keyName = 'headerResp.' + keyName;
                                    }
                                    try {
                                        res[key] = _metrichor_jmespath__WEBPACK_IMPORTED_MODULE_0__.jmespath.search(headerResp, keyName);
                                    }
                                    catch (_d) {
                                        console.warn(item + " expression needs to be corrected as per JMES guidelines");
                                    }
                                }
                            }
                        }
                    };
                    /**
                     * Return the pagination information of the service based on its existence on swagger or on the variable
                     * @param variable withholds variable information
                     * @param operationInfo has metadata of the variable
                     * @returns {object} This method return pagination metadata
                     */
                    PaginationUtils.getPaginationInfo = function (operationInfo, variable) {
                        if (operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.paginationInfo) {
                            return operationInfo.paginationInfo;
                        }
                        else {
                            return variable._paginationConfig;
                        }
                    };
                    /**
                     * Set query params with the pagination info, if pagination metadata is present in query params
                     * @param variable withholds variable information
                     * @param operationInfo has metadata of the variable
                     * @param options has info of the api's query params
                     * @returns {void} This method does not return anything
                     */
                    PaginationUtils.checkPaginationAtQuery = function (operationInfo, variable, options) {
                        var _a;
                        var paginationInfo = this.getPaginationInfo(operationInfo, variable);
                        // If page is not first, pagination is present on the variable and paginationInfo's input meta has size set pagination in query params
                        var hasPagination = options && options['page'] && (paginationInfo === null || paginationInfo === void 0 ? void 0 : paginationInfo.input.size) && variable.pagination;
                        if (!hasPagination) {
                            return;
                        }
                        var inputParam;
                        // if pagination type is offset, asssign inputParam to offset else page
                        if (paginationInfo.type === 'offset' || paginationInfo.input.offset) {
                            inputParam = 'offset';
                        }
                        else {
                            inputParam = 'page';
                        }
                        var paramName = paginationInfo.input[inputParam].split('.')[0];
                        var paramObj = lodash__WEBPACK_IMPORTED_MODULE_1___default().find(operationInfo.parameters, function (obj) { return obj.name === paramName; });
                        // check if the variable has query params and they are not empty
                        if (!lodash__WEBPACK_IMPORTED_MODULE_1___default().isEmpty(variable.dataBinding) && paramObj && paramObj.parameterType === 'query') {
                            /**
                             * For pagination type other than offset, assign page which is recieved from options
                             * For offset type, calculate page from size and options[page]
                             */
                            if (!((_a = paginationInfo.output) === null || _a === void 0 ? void 0 : _a.page) && paginationInfo.type !== 'offset') {
                                variable.pagination['page'] = options['page'];
                            }
                            else {
                                variable.pagination['page'] = this.getOffsetInfo(variable, options);
                            }
                            this.setPaginationQueryParams(variable, operationInfo, paginationInfo);
                        }
                    };
                    /**
                     * Deduces the offset information from the size and page params
                     * @param variable withholds variable information
                     * @param options has info of the api's query params
                     * @returns {object} Returns the next offset number
                     */
                    PaginationUtils.getOffsetInfo = function (variable, options) {
                        return variable.pagination['size'] * (options['page'] ? (options['page'] - 1) : 1);
                    };
                    /**
                     * Sets Pagination data on the request information
                     * @param variable withholds variable information
                     * @param operationInfo has metadata of the variable
                     * @param options has info of the api's query params
                     * @param paginationInfo has pagination information of the variable
                     * @param headers has request headers
                     * @param requestBody has request body
                     * @param url has request url
                     * @returns {object} Returns the request object which has pagination info
                     */
                    PaginationUtils.setPaginationAtReq = function (paginationInfo, operationInfo, variable, headers, requestBody, url, options) {
                        var reqObj = {};
                        var inputParam;
                        var resObj = {};
                        // pagination input information varies based on the type
                        if (paginationInfo.type === 'offset' || paginationInfo.input.offset) {
                            inputParam = 'offset';
                        }
                        else {
                            inputParam = 'page';
                        }
                        var paramName = paginationInfo.input[inputParam].split('.')[0];
                        // check if paramName is present in parameters of operation info 
                        var paramObj = lodash__WEBPACK_IMPORTED_MODULE_1___default().find(operationInfo.parameters, function (obj) { return obj.name === paramName; });
                        // set page/offset and size from pagination if matched parameter's type is header  
                        if ((paramObj === null || paramObj === void 0 ? void 0 : paramObj.parameterType) === 'header') {
                            lodash__WEBPACK_IMPORTED_MODULE_1___default().set(reqObj, paginationInfo.input[inputParam], variable.pagination['page']);
                            lodash__WEBPACK_IMPORTED_MODULE_1___default().set(reqObj, paginationInfo.input.size, variable.pagination['size']);
                            headers[paramName] = JSON.stringify(reqObj[paramName]);
                            resObj['headers'] = headers;
                        }
                        else if ((paramObj === null || paramObj === void 0 ? void 0 : paramObj.parameterType) === 'body') {
                            // set page/offset and size from pagination if matched parameter's type is body 
                            // assign bodyVal to updated pagination info object
                            var bodyVal = JSON.parse(paramObj.sampleValue);
                            var bodyParam = paginationInfo.input[inputParam].split('.')[1];
                            if (bodyVal && bodyVal[bodyParam]) {
                                var inputBodyParam = paginationInfo.input[inputParam].split('.').splice(1).join('.');
                                if (inputParam !== 'offset') {
                                    lodash__WEBPACK_IMPORTED_MODULE_1___default().set(reqObj, inputBodyParam, variable.pagination['page']);
                                }
                                else {
                                    lodash__WEBPACK_IMPORTED_MODULE_1___default().set(reqObj, inputBodyParam, this.getOffsetInfo(variable, options));
                                }
                                lodash__WEBPACK_IMPORTED_MODULE_1___default().set(reqObj, paginationInfo.input.size.split('.').splice(1).join('.'), variable.pagination['size']);
                                bodyVal[bodyParam] = reqObj[bodyParam];
                                requestBody = JSON.stringify(bodyVal);
                                resObj['requestBody'] = requestBody;
                            }
                        }
                        else if (variable.pagination.next && paramObj) {
                            /**
                             * For cursor type pagination, if pagination info is present in the path
                             * Based on whether user clicks on the next or prev button modify the url
                             */
                            if (paramObj.parameterType === 'path') {
                                var urlParams = operationInfo.relativePath.split('/'), paramConfig = '{' + paramObj.name + '}', paramIndex = urlParams.indexOf(paramConfig);
                                var invokeUrl = void 0;
                                if (variable.pagination.isNext) {
                                    invokeUrl = variable.pagination.next.split('/');
                                }
                                else {
                                    invokeUrl = variable.pagination.prev.split('/');
                                }
                                var urlPathParmas = void 0;
                                var urlPath = void 0;
                                if (operationInfo.directPath) { // For direct path, as url has hostname, derivate pathname using URL object
                                    urlPath = new URL(url);
                                    urlPathParmas = urlPath.pathname.split('/');
                                    urlPathParmas[paramIndex] = invokeUrl[paramIndex];
                                    urlPath.pathname = urlPathParmas.join('/');
                                    url = urlPath.href;
                                    resObj['url'] = url;
                                }
                                else { // Else modify the url with index as +1 (following proxy pattern)
                                    urlPathParmas = url.split('/');
                                    urlPathParmas[paramIndex + 1] = invokeUrl[paramIndex];
                                    url = urlPathParmas.join('/');
                                    resObj['url'] = url;
                                }
                            }
                            else if (paramObj.parameterType === 'query') {
                                /**
                                 * For cursor type pagination, if pagination info is present in the query
                                 * Based on whether user clicks on the next or prev button modify the url's query params
                                 */
                                var urlParams = url.split('?');
                                var invokeUrl = void 0;
                                if (variable.pagination.isNext) {
                                    invokeUrl = variable.pagination.next.split('?');
                                }
                                else {
                                    invokeUrl = variable.pagination.prev.split('?');
                                }
                                urlParams[1] = invokeUrl[1];
                                url = urlParams.join('?');
                                resObj['url'] = url;
                            }
                        }
                        return resObj;
                    };
                    /**
                     * Sets the pagination info recieved from api's response in the res object
                     * @param operationInfo has metadata of the variable
                     * @param res holds the information of pagination which has to be stored on the variable
                     * @param paramName has key name against which data has to be stored in pagination
                     * @param variable withholds variable information
                     * @returns {void} This method does not return anything
                     */
                    PaginationUtils.setParameterVal = function (paramName, res, operationInfo, variable) {
                        var paginationInfo = this.getPaginationInfo(operationInfo, variable);
                        var param = paginationInfo.input[paramName].split('.')[0];
                        var sizeObj = lodash__WEBPACK_IMPORTED_MODULE_1___default().find(operationInfo.parameters, function (obj) { return obj.name === param; });
                        res[paramName] = lodash__WEBPACK_IMPORTED_MODULE_1___default().result(sizeObj, 'sampleValue');
                    };
                    /**
                     * Creates res object from the response recieved from the api triggered
                     * @param variable withholds variable information
                     * @param operationInfo has metadata of the variable
                     * @param paginationInfo has metadata of the variable's pagination
                     * @param response has data of the api call's response
                     * @param options has info of the api's query params
                     * @param resHeaders has data of the api call's response headers
                     * @returns {object} An object which holds the information of pagination which has to be stored on the variable
                     */
                    PaginationUtils.generatePaginationRes = function (operationInfo, paginationInfo, response, resHeaders, options, variable) {
                        var res = {};
                        var resOutput = paginationInfo.output;
                        // If pagination type is not cursor, create the following metadata 
                        if (!(resOutput === null || resOutput === void 0 ? void 0 : resOutput.next)) {
                            /**
                             * If size is present in the pagination's output metadata deduce size from api's response
                             * Else deduce size from the pagination's input metadata size key
                             */
                            if (resOutput === null || resOutput === void 0 ? void 0 : resOutput.size) {
                                this.setPaginationItems(resOutput.size, response, res, 'size', resHeaders);
                            }
                            else {
                                this.setParameterVal('size', res, operationInfo, variable);
                            }
                            /**
                             * If page is present in the pagination's output metadata deduce page from api's response
                             * Else deduce page from the pagination's input metadata page key
                             */
                            if (resOutput === null || resOutput === void 0 ? void 0 : resOutput.page) {
                                this.setPaginationItems(resOutput.page, response, res, 'page', resHeaders);
                            }
                            else if (paginationInfo.type !== 'offset') {
                                this.setParameterVal('page', res, operationInfo, variable);
                            }
                            /**
                             * If totalElements has $minValue in it, set totalElements as $minValue
                             * If the rendered elements are greater than $minValue, set totalElements as Number of elements rendered + 1
                             
                                * If totalElements is present in the pagination's output metadata deduce totalElements from api's response
                                
                                * If Pagination type is offset, deduce totalElements from size and options[page] else deduce from size and res[page]
                                */
                            if (lodash__WEBPACK_IMPORTED_MODULE_1___default().startsWith(resOutput === null || resOutput === void 0 ? void 0 : resOutput.totalElements, '$minValue')) {
                                var totalEl = resOutput.totalElements.replace('$minValue=', '');
                                var pageParam = res['page'] ? res['page'] : options['page'];
                                var elRendered = res['size'] * pageParam;
                                if (!variable.pagination || variable.pagination['totalElements'] > elRendered) {
                                    res['totalElements'] = parseInt(totalEl);
                                }
                                else {
                                    res['totalElements'] = elRendered + 1;
                                }
                            }
                            else if (resOutput === null || resOutput === void 0 ? void 0 : resOutput.totalElements) {
                                this.setPaginationItems(resOutput.totalElements, response, res, 'totalElements', resHeaders);
                            }
                            else {
                                if (paginationInfo.type === 'offset' || paginationInfo.input.offset) {
                                    res['totalElements'] = (res['size'] * (options['page'] ? options['page'] : 1)) + 1;
                                }
                                else {
                                    res['totalElements'] = (res['size'] * res['page']) + 1;
                                }
                            }
                            /**
                             * If hasMoreItems is present in the pagination's output metadata deduce hasMoreItems from api's response
                             * Else assign it as empty which will be calculated at pagination object generation
                             */
                            if (resOutput === null || resOutput === void 0 ? void 0 : resOutput.hasMoreItems) {
                                this.setPaginationItems(resOutput.hasMoreItems, response, res, 'hasMoreItems', resHeaders);
                            }
                            else {
                                res['hasMoreItems'] = '';
                            }
                        }
                        else if (resOutput) { // For cursor type pagination set next and prev keys in res object
                            this.setPaginationItems(resOutput.next, response, res, 'next', resHeaders);
                            this.setPaginationItems(resOutput.prev, response, res, 'prev', resHeaders);
                        }
                        return res;
                    };
                    return PaginationUtils;
                }());
                /***/ 
            }),
            /***/ "./src/util/variable/service-variable.utils.ts": 
            /*!*****************************************************!*\
              !*** ./src/util/variable/service-variable.utils.ts ***!
              \*****************************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "ServiceVariableUtils": function () { return ( /* binding */ServiceVariableUtils); }
                    /* harmony export */ 
                });
                /* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/utils */ "./src/util/utils.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var _variables_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variables.utils */ "./src/util/variable/variables.utils.ts");
                /* harmony import */ var _oAuth_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../oAuth.utils */ "./src/util/oAuth.utils.ts");
                /* harmony import */ var _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/variable/pagination.utils */ "./src/util/variable/pagination.utils.ts");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_5__);
                // declare const _: any;
                /**
                 * returns true if a Service variable is:
                 *  - for a query/procedure
                 *  - performs a PUT/POST operation, i.e, takes a Request Body as input
                 * @param variable
                 * @returns {any}
                 */
                var isBodyTypeQueryOrProcedure = function (variable) {
                    return (lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(['QueryExecution', 'ProcedureExecution'], variable.controller)) && (lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(['put', 'post'], variable.operationType));
                };
                /**
                 * returns true if the variable is a Query service variable
                 * @param {string} controller
                 * @param {string} serviceType
                 * @returns {boolean}
                 */
                var isQueryServiceVar = function (controller, serviceType) {
                    return controller === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY && serviceType === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.DATA;
                };
                /**
                 * Append given value to the formdata
                 * @param formData
                 * @param param - Param from which value has to be taken
                 * @param paramValue - Value which is to be appended to formdata
                 */
                var getFormData = function (formData, param, paramValue) {
                    var paramType = lodash__WEBPACK_IMPORTED_MODULE_5___default().toLower((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.extractType)(lodash__WEBPACK_IMPORTED_MODULE_5___default().get(param, 'items.type') || param.type)), paramContentType = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS.isStudioMode ? param['x-WM-CONTENT_TYPE'] : param.contentType;
                    if ((0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.isFileUploadSupported)()) {
                        if ((paramType !== 'file') && (paramContentType === 'string' || !paramContentType)) {
                            if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isObject(paramValue)) {
                                paramValue = JSON.stringify(paramValue);
                            }
                            formData.append(param.name, paramValue);
                        }
                        else {
                            if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isArray(paramValue) && paramType === 'file') {
                                lodash__WEBPACK_IMPORTED_MODULE_5___default().forEach(paramValue, function (fileObject) {
                                    formData.append(param.name, (fileObject && fileObject.content) || (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getBlob)(fileObject), fileObject.name);
                                });
                            }
                            else {
                                formData.append(param.name, (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.getBlob)(paramValue, paramContentType), paramValue && paramValue.name);
                            }
                        }
                        return formData;
                    }
                };
                /**
                 * Check for missing required params and format the date/time param values
                 * @param inputData
                 * @param params
                 * @returns {{requestBody: {}; missingParams: any[]}}
                 */
                var processRequestBody = function (inputData, params) {
                    var requestBody = {}, missingParams = [];
                    var paramValue;
                    lodash__WEBPACK_IMPORTED_MODULE_5___default().forEach(params, function (param) {
                        paramValue = lodash__WEBPACK_IMPORTED_MODULE_5___default().get(inputData, param.name);
                        if (!lodash__WEBPACK_IMPORTED_MODULE_5___default().isUndefined(paramValue) && paramValue !== '' && paramValue !== null && !param.readOnly) {
                            // ToDo - variable seperation
                            paramValue = (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(param.type) ? (0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatDate)(paramValue, param.type) : paramValue;
                            // Construct ',' separated string if param is not array type but value is an array
                            if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isArray(paramValue) && lodash__WEBPACK_IMPORTED_MODULE_5___default().toLower((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.extractType)(param.type)) === 'string') {
                                paramValue = lodash__WEBPACK_IMPORTED_MODULE_5___default().join(paramValue, ',');
                            }
                            requestBody[param.name] = paramValue;
                        }
                        else if (param.required) {
                            missingParams.push(param.name || param.id);
                        }
                    });
                    return {
                        'requestBody': requestBody,
                        'missingParams': missingParams
                    };
                };
                /**
                 * Done only for HTTP calls made via the proxy server
                 * Goes though request headers, appends 'X-' to certain headers
                 * these headers need not be processed at proxy server and should directly be passed to the server
                 * e.g. Authorization, Cookie, etc.
                 * @param headers
                 * @returns {{}}
                 */
                var cloakHeadersForProxy = function (headers) {
                    var _headers = {}, UNCLOAKED_HEADERS = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.UNCLOAKED_HEADERS, CLOAK_PREFIX = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.CLOAK_HEADER_KEY;
                    lodash__WEBPACK_IMPORTED_MODULE_5___default().forEach(headers, function (val, key) {
                        if (lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(UNCLOAKED_HEADERS, key.toUpperCase())) {
                            _headers[key] = val;
                        }
                        else {
                            _headers[CLOAK_PREFIX + key] = val;
                        }
                    });
                    return _headers;
                };
                var ServiceVariableUtils = /** @class */ (function () {
                    function ServiceVariableUtils() {
                    }
                    /**
                     * prepares the HTTP request info for a Service Variable
                     * @param variable
                     * @param operationInfo
                     * @param inputFields
                     * @returns {any}
                     */
                    ServiceVariableUtils.constructRequestParams = function (variable, operationInfo, inputFields, options) {
                        variable = variable || {};
                        // operationInfo is specifically null for un_authorized access
                        if (operationInfo === null) {
                            return {
                                'error': {
                                    'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED,
                                    'message': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.USER_UNAUTHORISED,
                                    'field': '_wmServiceOperationInfo'
                                }
                            };
                        }
                        else if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isEmpty(operationInfo)) {
                            return {
                                'error': {
                                    'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING,
                                    'message': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.METADATA_MISSING,
                                    'field': '_wmServiceOperationInfo'
                                }
                            };
                        }
                        else if (operationInfo && operationInfo.invalid) {
                            return {
                                'error': {
                                    'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING,
                                    'message': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.CRUD_OPERATION_MISSING,
                                    'field': '_wmServiceOperationInfo'
                                }
                            };
                        }
                        var directPath = operationInfo.directPath || '', relativePath = operationInfo.basePath ? operationInfo.basePath + operationInfo.relativePath : operationInfo.relativePath, isBodyTypeQueryProcedure = isBodyTypeQueryOrProcedure(variable);
                        var queryParams = '', bodyInfo, headers = {}, requestBody, url, requiredParamMissing = [], target, pathParamRex, invokeParams, authDetails = null, uname, pswd, method, formData, isProxyCall, paramValueInfo, params, securityDefnObj, accessToken, withCredentials;
                        function getFormDataObj() {
                            if (formData) {
                                return formData;
                            }
                            formData = new FormData();
                            return formData;
                        }
                        securityDefnObj = lodash__WEBPACK_IMPORTED_MODULE_5___default().get(operationInfo.securityDefinitions, '0');
                        if (securityDefnObj) {
                            switch (securityDefnObj.type) {
                                case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2:
                                    accessToken = (0, _oAuth_utils__WEBPACK_IMPORTED_MODULE_3__.getAccessToken)(securityDefnObj[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);
                                    if (accessToken) {
                                        headers[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.OAUTH + ' ' + accessToken;
                                    }
                                    else {
                                        return {
                                            'error': {
                                                'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN,
                                                'message': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_ACCESSTOKEN
                                            },
                                            'securityDefnObj': securityDefnObj
                                        };
                                    }
                                    break;
                                case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.BASIC:
                                    uname = inputFields['wm_auth_username'];
                                    pswd = inputFields['wm_auth_password'];
                                    if (uname && pswd) {
                                        // TODO[VIBHU]: bas64 encoding alternative.
                                        headers[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.BASIC + ' ' + btoa(uname + ':' + pswd);
                                        authDetails = {
                                            'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.AUTH_TYPE.BASIC
                                        };
                                    }
                                    else {
                                        return {
                                            'error': {
                                                'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_CREDENTIALS,
                                                'message': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_CREDENTIALS
                                            },
                                            'securityDefnObj': securityDefnObj
                                        };
                                    }
                                    break;
                            }
                        }
                        // set query params, if pagination info is present and the info should be present in query
                        _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_4__.PaginationUtils.checkPaginationAtQuery(operationInfo, variable, options);
                        operationInfo.proxySettings = operationInfo.proxySettings || { web: true, mobile: false };
                        method = operationInfo.httpMethod || operationInfo.methodType;
                        isProxyCall = (function () {
                            // ToDo - variable seperation
                            // if (CONSTANTS.hasCordova) {
                            return operationInfo.proxySettings.mobile;
                            // }
                            return operationInfo.proxySettings.web;
                        }());
                        withCredentials = operationInfo.proxySettings.withCredentials;
                        url = isProxyCall ? relativePath : directPath;
                        /* loop through all the parameters */
                        lodash__WEBPACK_IMPORTED_MODULE_5___default().forEach(operationInfo.parameters, function (param) {
                            // Set params based on current workspace
                            function setParamsOfChildNode() {
                                if (inputFields) {
                                    // specific case for body type query/procedure variable with query params
                                    if (inputFields[param.name] && lodash__WEBPACK_IMPORTED_MODULE_5___default().isObject(inputFields[param.name])) {
                                        paramValueInfo = inputFields[param.name];
                                    }
                                    else {
                                        paramValueInfo = inputFields;
                                    }
                                    params = lodash__WEBPACK_IMPORTED_MODULE_5___default().get(operationInfo, ['definitions', param.type]);
                                }
                                else {
                                    // For Api Designer
                                    paramValueInfo = paramValue || {};
                                    params = param.children;
                                }
                            }
                            var paramValue = param.sampleValue;
                            if (((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDefined)(paramValue) && paramValue !== null && paramValue !== '') || (isBodyTypeQueryProcedure && param.type !== 'file')) {
                                // Format dateTime params for dataService variables
                                if (variable.serviceType === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.DATA && (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.isDateTimeType)(param.type)) {
                                    // ToDo - variable seperation
                                    paramValue = (0, _variables_utils__WEBPACK_IMPORTED_MODULE_2__.formatDate)(paramValue, param.type);
                                }
                                // Construct ',' separated string if param is not array type but value is an array
                                if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isArray(paramValue) && lodash__WEBPACK_IMPORTED_MODULE_5___default().toLower((0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.extractType)(param.type)) === 'string' && variable.serviceType === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.DATA) {
                                    paramValue = lodash__WEBPACK_IMPORTED_MODULE_5___default().join(paramValue, ',');
                                }
                                switch (param.parameterType.toUpperCase()) {
                                    case 'QUERY':
                                        // Ignore null valued query params for queryService variable
                                        if (lodash__WEBPACK_IMPORTED_MODULE_5___default().isNull(paramValue) && isQueryServiceVar(variable.controller, variable.serviceType)) {
                                            break;
                                        }
                                        if (!queryParams) {
                                            queryParams = '?' + param.name + '=' + encodeURIComponent(paramValue);
                                        }
                                        else {
                                            queryParams += '&' + param.name + '=' + encodeURIComponent(paramValue);
                                        }
                                        break;
                                    case 'PATH':
                                        /* replacing the path param based on the regular expression in the relative path */
                                        pathParamRex = new RegExp('\\s*\\{\\s*' + param.name + '(:\\.\\+)?\\s*\\}\\s*');
                                        url = url.replace(pathParamRex, paramValue);
                                        break;
                                    case 'HEADER':
                                        headers[param.name] = paramValue;
                                        break;
                                    case 'BODY':
                                        // For post/put query methods wrap the input
                                        if (isBodyTypeQueryProcedure) {
                                            setParamsOfChildNode();
                                            bodyInfo = processRequestBody(paramValueInfo, params);
                                            requestBody = bodyInfo.requestBody;
                                            requiredParamMissing = lodash__WEBPACK_IMPORTED_MODULE_5___default().concat(requiredParamMissing, bodyInfo.missingParams);
                                        }
                                        else {
                                            requestBody = paramValue;
                                        }
                                        break;
                                    case 'FORMDATA':
                                        if (isBodyTypeQueryProcedure && param.name === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.SWAGGER_CONSTANTS.WM_DATA_JSON) {
                                            setParamsOfChildNode();
                                            // Process query/procedure formData non-file params params
                                            bodyInfo = processRequestBody(paramValueInfo, params);
                                            requestBody = getFormData(getFormDataObj(), param, bodyInfo.requestBody);
                                            requiredParamMissing = lodash__WEBPACK_IMPORTED_MODULE_5___default().concat(requiredParamMissing, bodyInfo.missingParams);
                                        }
                                        else {
                                            requestBody = getFormData(getFormDataObj(), param, paramValue);
                                        }
                                        break;
                                }
                            }
                            else if (param.required) {
                                requiredParamMissing.push(param.name || param.id);
                            }
                        });
                        // if required param not found, return error
                        if (requiredParamMissing.length) {
                            return {
                                'error': {
                                    'type': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.REQUIRED_FIELD_MISSING,
                                    'field': requiredParamMissing.join(','),
                                    'message': (0, _util_utils__WEBPACK_IMPORTED_MODULE_0__.replace)(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.REQUIRED_FIELD_MISSING, [requiredParamMissing.join(',')]),
                                    'skipDefaultNotification': true
                                }
                            };
                        }
                        // Setting appropriate content-Type for request accepting request body like POST, PUT, etc
                        if (!lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CONSTANTS.NON_BODY_HTTP_METHODS, lodash__WEBPACK_IMPORTED_MODULE_5___default().toUpper(method))) {
                            /*Based on the formData browser will automatically set the content type to 'multipart/form-data' and webkit boundary*/
                            if (!(operationInfo.consumes && (operationInfo.consumes[0] === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CONSTANTS.CONTENT_TYPES.MULTIPART_FORMDATA))) {
                                headers['Content-Type'] = (operationInfo.consumes && operationInfo.consumes[0]) || 'application/json';
                            }
                        }
                        // if the consumes has application/x-www-form-urlencoded and
                        // if the http request of given method type can have body send the queryParams as Form Data
                        if (lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(operationInfo.consumes, _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED)
                            && !lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CONSTANTS.NON_BODY_HTTP_METHODS, (method || '').toUpperCase())) {
                            // remove the '?' at the start of the queryParams
                            if (queryParams) {
                                requestBody = (requestBody ? requestBody + '&' : '') + queryParams.substring(1);
                            }
                            headers['Content-Type'] = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED;
                        }
                        else {
                            url += queryParams;
                        }
                        /*
                         * for proxy calls:
                         *  - cloak the proper headers (required only for REST services)
                         *  - prepare complete url from relativeUrl
                         */
                        if (isProxyCall) {
                            // avoiding cloakHeadersForProxy when the method is invoked from apidesigner.
                            headers = (variable.serviceType !== _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.REST && variable.serviceType !== _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.OPENAPI) || operationInfo.skipCloakHeaders ? headers : cloakHeadersForProxy(headers);
                            if (variable.getPrefabName() && _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.REST_SUPPORTED_SERVICES.indexOf(variable.serviceType) !== -1) {
                                /* if it is a prefab variable (used in a normal project), modify the url */
                                url = 'prefabs/' + variable.getPrefabName() + url;
                                target = 'invokePrefabRestService';
                            }
                            else if (!variable.getPrefabName()) {
                                url = 'services' + url;
                            }
                            url = _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.$rootScope.project.deployedUrl + url;
                        }
                        // If pagination info exists, process info in request headers or body based on the metadata
                        var paginationInfo = _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_4__.PaginationUtils.getPaginationInfo(operationInfo, variable);
                        if (paginationInfo && variable.pagination) {
                            var resp = _util_variable_pagination_utils__WEBPACK_IMPORTED_MODULE_4__.PaginationUtils.setPaginationAtReq(paginationInfo, operationInfo, variable, headers, requestBody, url, options);
                            if (resp) {
                                if (resp['headers']) {
                                    headers = resp['headers'];
                                }
                                else if (resp['requestBody']) {
                                    requestBody = resp['requestBody'];
                                }
                                else if (resp['url']) {
                                    url = resp['url'];
                                }
                            }
                        }
                        /*creating the params needed to invoke the service. url is generated from the relative path for the operation*/
                        invokeParams = {
                            'projectID': _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.$rootScope.project.id,
                            'url': url,
                            'target': target,
                            'method': method,
                            'headers': headers,
                            'data': requestBody,
                            'authDetails': authDetails,
                            'isDirectCall': !isProxyCall,
                            'isExtURL': variable.serviceType === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.SERVICE_TYPE.REST,
                            'withCredentials': withCredentials
                        };
                        return invokeParams;
                    };
                    ServiceVariableUtils.isFileUploadRequest = function (variable) {
                        // temporary fix, have to find proper solution for deciding weather to upload file through variable
                        return variable.service === 'FileService' && variable.operation === 'uploadFile';
                    };
                    /**
                     * This method returns array of query param names for variable other then page,size,sort
                     * @params {params} params of the variable
                     */
                    ServiceVariableUtils.excludePaginationParams = function (params) {
                        return lodash__WEBPACK_IMPORTED_MODULE_5___default().map(lodash__WEBPACK_IMPORTED_MODULE_5___default().reject(params, function (param) {
                            return lodash__WEBPACK_IMPORTED_MODULE_5___default().includes(_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.PAGINATION_PARAMS, param.name);
                        }), function (param) {
                            return param.name;
                        });
                    };
                    return ServiceVariableUtils;
                }());
                /***/ 
            }),
            /***/ "./src/util/variable/variables.utils.ts": 
            /*!**********************************************!*\
              !*** ./src/util/variable/variables.utils.ts ***!
              \**********************************************/
            /***/ (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                    /* harmony export */ "appManager": function () { return ( /* binding */appManager); },
                    /* harmony export */ "debounceVariableCall": function () { return ( /* binding */debounceVariableCall); },
                    /* harmony export */ "decodeData": function () { return ( /* binding */decodeData); },
                    /* harmony export */ "dialogService": function () { return ( /* binding */dialogService); },
                    /* harmony export */ "formatDate": function () { return ( /* binding */formatDate); },
                    /* harmony export */ "formatExportExpression": function () { return ( /* binding */formatExportExpression); },
                    /* harmony export */ "getBlob": function () { return ( /* binding */getBlob); },
                    /* harmony export */ "getErrMessage": function () { return ( /* binding */getErrMessage); },
                    /* harmony export */ "getEvaluatedOrderBy": function () { return ( /* binding */getEvaluatedOrderBy); },
                    /* harmony export */ "getTarget": function () { return ( /* binding */getTarget); },
                    /* harmony export */ "getTargetNodeKey": function () { return ( /* binding */getTargetNodeKey); },
                    /* harmony export */ "getTargetObj": function () { return ( /* binding */getTargetObj); },
                    /* harmony export */ "httpService": function () { return ( /* binding */httpService); },
                    /* harmony export */ "initiateCallback": function () { return ( /* binding */initiateCallback); },
                    /* harmony export */ "internalBoundNodeMap": function () { return ( /* binding */internalBoundNodeMap); },
                    /* harmony export */ "isFileUploadSupported": function () { return ( /* binding */isFileUploadSupported); },
                    /* harmony export */ "metadataService": function () { return ( /* binding */metadataService); },
                    /* harmony export */ "navigationService": function () { return ( /* binding */navigationService); },
                    /* harmony export */ "oauthService": function () { return ( /* binding */oauthService); },
                    /* harmony export */ "routerService": function () { return ( /* binding */routerService); },
                    /* harmony export */ "securityService": function () { return ( /* binding */securityService); },
                    /* harmony export */ "setInput": function () { return ( /* binding */setInput); },
                    /* harmony export */ "setValueToNode": function () { return ( /* binding */setValueToNode); },
                    /* harmony export */ "toasterService": function () { return ( /* binding */toasterService); },
                    /* harmony export */ "updateInternalNodes": function () { return ( /* binding */updateInternalNodes); },
                    /* harmony export */ "wmSetDependency": function () { return ( /* binding */wmSetDependency); }
                    /* harmony export */ 
                });
                /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/util/utils.ts");
                /* harmony import */ var _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants/variables.constants */ "./src/constants/variables.constants.ts");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
                /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
                /* harmony import */ var he__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! he */ "./node_modules/he/he.js");
                /* harmony import */ var he__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(he__WEBPACK_IMPORTED_MODULE_3__);
                var appManager;
                var httpService;
                var metadataService;
                var navigationService;
                var routerService;
                var toasterService;
                var oauthService;
                var securityService;
                var dialogService;
                var internalBoundNodeMap = new Map();
                var timers = new Map();
                var DOT_EXPR_REX = /^\[("|')[\w\W]*(\1)\]$/;
                var _invoke = function (variable, op) {
                    var debouncedFn, cancelFn = (lodash__WEBPACK_IMPORTED_MODULE_2___default().noop), retVal;
                    if (timers.has(variable)) {
                        cancelFn = timers.get(variable).cancel;
                    }
                    cancelFn();
                    debouncedFn = lodash__WEBPACK_IMPORTED_MODULE_2___default().debounce(function () {
                        retVal = variable[op]();
                        // handle promises to avoid uncaught promise errors in console
                        if (retVal instanceof Promise) {
                            retVal.catch((lodash__WEBPACK_IMPORTED_MODULE_2___default().noop));
                        }
                    }, 100);
                    timers.set(variable, debouncedFn);
                    debouncedFn();
                };
                var wmSetDependency = function (type, ref) {
                    switch (type) {
                        case 'appManager':
                            appManager = ref;
                            break;
                        case 'http':
                            httpService = ref;
                            break;
                        case 'metadata':
                            metadataService = ref;
                            break;
                        case 'navigationService':
                            navigationService = ref;
                            break;
                        case 'router':
                            routerService = ref;
                            break;
                        case 'toaster':
                            toasterService = ref;
                            break;
                        case 'oAuth':
                            oauthService = ref;
                            break;
                        case 'security':
                            securityService = ref;
                            break;
                        case 'dialog':
                            dialogService = ref;
                            break;
                    }
                };
                var debounceVariableCall = _invoke;
                /**
                 * returns true if HTML5 File API is available else false
                 * @returns {{prototype: Blob; new(blobParts?: any[], options?: BlobPropertyBag): Blob}}
                 */
                var isFileUploadSupported = function () {
                    // ToDo - variable seperation
                    return (window.File && window.FileReader && window.FileList && window.Blob);
                };
                /**
                 * formatting the expression as required by backend which was enclosed by ${<expression>}.
                 * @param fieldDefs
                 * returns fieldDefs
                 */
                var formatExportExpression = function (fieldDefs) {
                    lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(fieldDefs, function (fieldDef) {
                        if (fieldDef.expression) {
                            fieldDef.expression = '${' + fieldDef.expression + '}';
                        }
                    });
                    return fieldDefs;
                };
                /**
                 * prepare a blob object based on the content and content type provided
                 * if content is blob itself, simply returns it back
                 * @param val
                 * @param valContentType
                 * @returns {*}
                 */
                var getBlob = function (val, valContentType) {
                    if (val instanceof Blob) {
                        return val;
                    }
                    var jsonVal = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.getValidJSON)(val);
                    if (jsonVal && jsonVal instanceof Object) {
                        val = new Blob([JSON.stringify(jsonVal)], { type: valContentType || 'application/json' });
                    }
                    else {
                        val = new Blob([val], { type: valContentType || 'text/plain' });
                    }
                    return val;
                };
                /**
                 * sets the value against passed key on the "inputFields" object in the variable
                 * @param targetObj: the object in which the key, value is to be set
                 * @param variable
                 * @param key: can be:
                 *  - a string e.g. "username"
                 *  - an object, e.g. {"username": "john", "ssn": "11111"}
                 * @param val
                 * - if key is string, the value against it (for that data type)
                 * - if key is object, not required
                 * @param options
                 * @returns {any}
                 */
                var setInput = function (targetObj, key, val, options) {
                    targetObj = targetObj || {};
                    var keys, lastKey, paramObj = {};
                    // content type check
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(options)) {
                        switch (options.type) {
                            case 'file':
                                val = getBlob(val, options.contentType);
                                break;
                            case 'number':
                                val = lodash__WEBPACK_IMPORTED_MODULE_2___default().isNumber(val) ? val : parseInt(val, 10);
                                break;
                        }
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(key)) {
                        // check if the passed parameter is an object itself
                        paramObj = key;
                    }
                    else if (key.indexOf('.') > -1) {
                        // check for '.' in key e.g. 'employee.department'
                        keys = key.split('.');
                        lastKey = keys.pop();
                        // Finding the object based on the key
                        targetObj = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.findValueOf)(targetObj, keys.join('.'), true);
                        key = lastKey;
                        paramObj[key] = val;
                    }
                    else {
                        paramObj[key] = val;
                    }
                    lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(paramObj, function (paramVal, paramKey) {
                        targetObj[paramKey] = paramVal;
                    });
                    return targetObj;
                };
                /**
                 * This method decodes the variable data which is encoded from backend before showing in the widgets.
                 * It takes variable response content as input and iterates recursively,
                 * if the value is string type then it will decode the data.
                 * @param responseContent (Array of objects)
                 */
                var decodeData = function (responseContent) {
                    if (!responseContent) {
                        return responseContent;
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isArray(responseContent)) {
                        lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(responseContent, function (data) {
                            if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isString(data)) {
                                data = htmlDecode(data);
                            }
                            else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(data)) {
                                lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(data, function (value, key) {
                                    if (value && lodash__WEBPACK_IMPORTED_MODULE_2___default().isString(value)) {
                                        data[key] = htmlDecode(value);
                                    }
                                    else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(value)) {
                                        decodeData(value);
                                    }
                                });
                            }
                        });
                    }
                    else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(responseContent)) {
                        lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(responseContent, function (value, key) {
                            if (value && lodash__WEBPACK_IMPORTED_MODULE_2___default().isString(value)) {
                                responseContent[key] = htmlDecode(value);
                            }
                            else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isObject(value)) {
                                decodeData(value);
                            }
                        });
                    }
                    else if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isString(responseContent)) {
                        responseContent = htmlDecode(responseContent);
                        return responseContent;
                    }
                };
                function htmlDecode(input) {
                    return he__WEBPACK_IMPORTED_MODULE_3___default().unescape(input);
                }
                /**
                 *
                 * @param varOrder
                 * @param optionsOrder
                 * @returns {any}
                 */
                var getEvaluatedOrderBy = function (varOrder, optionsOrder) {
                    var optionFields, varOrderBy;
                    // If options order by is not defined, return variable order
                    if (!optionsOrder || lodash__WEBPACK_IMPORTED_MODULE_2___default().isEmpty(optionsOrder)) {
                        return varOrder;
                    }
                    // If variable order by is not defined, return options order
                    if (!varOrder) {
                        return optionsOrder;
                    }
                    // If both are present, combine the options order and variable order, with options order as precedence
                    varOrder = lodash__WEBPACK_IMPORTED_MODULE_2___default().split(varOrder, ',');
                    optionsOrder = lodash__WEBPACK_IMPORTED_MODULE_2___default().split(optionsOrder, ',');
                    optionFields = lodash__WEBPACK_IMPORTED_MODULE_2___default().map(optionsOrder, function (order) {
                        return lodash__WEBPACK_IMPORTED_MODULE_2___default().split(lodash__WEBPACK_IMPORTED_MODULE_2___default().trim(order), ' ')[0];
                    });
                    // If a field is present in both options and variable, remove the variable orderby
                    lodash__WEBPACK_IMPORTED_MODULE_2___default().remove(varOrder, function (orderBy) {
                        return lodash__WEBPACK_IMPORTED_MODULE_2___default().includes(optionFields, lodash__WEBPACK_IMPORTED_MODULE_2___default().split(lodash__WEBPACK_IMPORTED_MODULE_2___default().trim(orderBy), ' ')[0]);
                    });
                    varOrderBy = varOrder.length ? ',' + lodash__WEBPACK_IMPORTED_MODULE_2___default().join(varOrder, ',') : '';
                    return lodash__WEBPACK_IMPORTED_MODULE_2___default().join(optionsOrder, ',') + varOrderBy;
                };
                var processVariablePostBindUpdate = function (nodeName, nodeVal, nodeType, variable, noUpdate) {
                    switch (variable.category) {
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.LIVE:
                            if (variable.operation === 'read') {
                                if (nodeName === 'dataBinding') {
                                    lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(nodeVal, function (val, key) {
                                        variable.filterFields[key] = {
                                            'value': val
                                        };
                                    });
                                }
                                else {
                                    variable.filterFields[nodeName] = {
                                        'value': nodeVal,
                                        'type': nodeType
                                    };
                                }
                                /* if auto-update set for the variable with read operation only, get its data */
                                if (variable.autoUpdate && !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(nodeVal) && lodash__WEBPACK_IMPORTED_MODULE_2___default().isFunction(variable.listRecords) && !noUpdate) {
                                    _invoke(variable, 'listRecords');
                                }
                            }
                            else {
                                if (nodeName === 'dataBinding') {
                                    variable.inputFields = nodeVal;
                                }
                                else {
                                    variable.inputFields[nodeName] = nodeVal;
                                }
                                /* if auto-update set for the variable with read operation only, get its data */
                                if (variable.autoUpdate && !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(nodeVal) && lodash__WEBPACK_IMPORTED_MODULE_2___default().isFunction(variable[variable.operation + 'Record']) && !noUpdate) {
                                    _invoke(variable, variable.operation + 'Record');
                                }
                            }
                            break;
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.CRUD:
                            if (variable.operationType === 'list' && variable.autoUpdate && !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(nodeVal) && lodash__WEBPACK_IMPORTED_MODULE_2___default().isFunction(variable.invoke) && !noUpdate) {
                                _invoke(variable, 'invoke');
                            }
                            break;
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.SERVICE:
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.LOGIN:
                            if (variable.autoUpdate && !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(nodeVal) && lodash__WEBPACK_IMPORTED_MODULE_2___default().isFunction(variable.invoke) && !noUpdate) {
                                _invoke(variable, 'invoke');
                            }
                            break;
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.DEVICE:
                            variable[nodeName] = nodeVal;
                            if (variable.autoUpdate && !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(nodeVal) && lodash__WEBPACK_IMPORTED_MODULE_2___default().isFunction(variable.invoke) && !noUpdate) {
                                _invoke(variable, 'invoke');
                            }
                            break;
                    }
                };
                /**
                * Returns the object node for a bind object, where the value has to be updated
                * obj.target = "a"
                    * @param obj
                * @param root
                * @param variable
                * @returns {*}
                */
                var getTargetObj = function (obj, root, variable) {
                    /*
                     * if the target key is in the form as "['my.param']"
                     * keep the target key as "my.param" and do not split further
                     * this is done, so that, the computed value against this binding is assigned as
                     *      {"my.param": "value"}
                     * and not as
                     *      {
                     *          "my": {
                     *              "param": "value"
                     *          }
                     *      }
                     */
                    var target = obj.target, targetObj;
                    var rootNode = variable[root];
                    if (DOT_EXPR_REX.test(target)) {
                        targetObj = rootNode;
                    }
                    else {
                        target = target.substr(0, target.lastIndexOf('.'));
                        if (obj.target === root) {
                            targetObj = variable;
                        }
                        else if (target) {
                            targetObj = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.findValueOf)(rootNode, target, true);
                        }
                        else {
                            targetObj = rootNode;
                        }
                    }
                    return targetObj;
                };
                /**
                 * Gets the key for the target object
                 * the computed value will be updated against this key in the targetObject(computed by getTargetObj())
                 * @param target
                 * @param regex
                 * @returns {*}
                 */
                var getTargetNodeKey = function (target) {
                    /*
                     * if the target key is in the form as "['my.param']"
                     * keep the target key as "my.param" and do not split further
                     * this is done, so that, the computed value against this binding is assigned as
                     *      {"my.param": "value"}
                     * and not as
                     *      {
                     *          "my": {
                     *              "param": "value"
                     *          }
                     *      }
                     */
                    var targetNodeKey;
                    if (DOT_EXPR_REX.test(target)) {
                        targetNodeKey = target.replace(/^(\[["'])|(["']\])$/g, '');
                    }
                    else {
                        targetNodeKey = target.split('.').pop();
                    }
                    return targetNodeKey;
                };
                var setValueToNode = function (target, obj, root, variable, value, noUpdate) {
                    var targetNodeKey = getTargetNodeKey(target), targetObj = getTargetObj(obj, root, variable);
                    value = !lodash__WEBPACK_IMPORTED_MODULE_2___default().isUndefined(value) ? value : obj.value;
                    /* sanity check, user can bind parent nodes to non-object values, so child node bindings may fail */
                    if (targetObj) {
                        targetObj[targetNodeKey] = value;
                    }
                    processVariablePostBindUpdate(targetNodeKey, value, obj.type, variable, noUpdate);
                };
                var getTarget = function (variable) {
                    var target;
                    switch (variable.category) {
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.MODEL:
                            target = 'dataSet';
                            break;
                        case _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.CATEGORY.LIVE:
                            target = variable.operation === 'read' ? 'filterFields' : 'inputFields';
                            break;
                        default:
                            target = 'dataBinding';
                            break;
                    }
                    return target;
                };
                /**
                 * The model internalBoundNodeMap stores the reference to latest computed values against internal(nested) bound nodes
                 * This is done so that the internal node's computed value is not lost, once its parent node's value is computed at a later point
                 * E.g.
                 * Variable.employeeVar has following bindings
                 * "dataBinding": [
                 {
                         "target": "department.budget",
                         "value": "bind:Variables.budgetVar.dataSet"
                     },
                 {
                         "target": "department",
                         "value": "bind:Variables.departmentVar.dataSet"
                     }
                 ]
                 * When department.budget is computed, employeeVar.dataSet = {
                 *  "department": {
                 *      "budget": {"q1": 1111}
                 *  }
                 * }
                 *
                 * When department is computed
                 *  "department": {
                 *      "name": "HR",
                 *      "location": "Hyderabad"
                 *  }
                 * The budget field (computed earlier) is LOST.
                 *
                 * To avoid this, the latest values against internal nodes (in this case department.budget) are stored in a map
                 * These values are assigned back to internal fields if the parent is computed (in this case department)
                 * @param target
                 * @param root
                 * @param variable
                 */
                var updateInternalNodes = function (target, root, variable) {
                    var boundInternalNodes = lodash__WEBPACK_IMPORTED_MODULE_2___default().keys(lodash__WEBPACK_IMPORTED_MODULE_2___default().get(internalBoundNodeMap.get(variable), [variable.name, root])), targetNodeKey = getTargetNodeKey(target);
                    var internalNodes;
                    function findInternalNodeBound() {
                        return lodash__WEBPACK_IMPORTED_MODULE_2___default().filter(boundInternalNodes, function (node) {
                            // the later condition in check (targetNodeKey === root || targetNodeKey === 'dataBinding') is specifically for live variable of insert/update types
                            return (node !== targetNodeKey && lodash__WEBPACK_IMPORTED_MODULE_2___default().includes(node, targetNodeKey)) || ((targetNodeKey === root || targetNodeKey === 'dataBinding') && node !== targetNodeKey);
                        });
                    }
                    internalNodes = findInternalNodeBound();
                    if ((internalNodes.length)) {
                        lodash__WEBPACK_IMPORTED_MODULE_2___default().forEach(internalNodes, function (node) {
                            setValueToNode(node, { target: node }, root, variable, lodash__WEBPACK_IMPORTED_MODULE_2___default().get(internalBoundNodeMap.get(variable), [variable.name, root, node]));
                        });
                    }
                };
                var initiateCallback = function (type, variable, data, options, skipDefaultNotification) {
                    /*checking if event is available and variable has event property and variable event property bound to function*/
                    var eventValues = variable[type], callBackScope = variable._context;
                    var errorVariable;
                    /**
                     * For error event:
                     * trigger app level error handler.
                     * if no event is assigned, trigger default appNotification variable.
                     */
                    if (type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.EVENT.ERROR && !skipDefaultNotification) {
                        if (!eventValues) {
                            /* in case of error, if no event assigned, handle through default notification variable */
                            errorVariable = callBackScope.Actions[_constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION];
                            if (errorVariable) {
                                data = errorVariable.getMessage() || data;
                                data = lodash__WEBPACK_IMPORTED_MODULE_2___default().isString(data) ? data : 'An error has occured. Please check the app logs.';
                                errorVariable.invoke({ 'message': data }, undefined, undefined);
                                // $rootScope.$evalAsync(function () {
                                // $rootScope.$emit("invoke-service", VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION, {scope: callBackScope, message: response});
                                // });
                            }
                        }
                    }
                    // TODO: [Vibhu], check whether to support legacy event calling mechanism (ideally, it should have been migrated)
                    // ToDo - variable seperation
                    // const fn = $parseEvent(variable[type]);
                    var fn = variable[type] || _utils__WEBPACK_IMPORTED_MODULE_0__.noop;
                    if (type === _constants_variables_constants__WEBPACK_IMPORTED_MODULE_1__.VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE) {
                        if (variable.category === 'wm.LiveVariable' && variable.operation === 'read') {
                            return fn(variable._context, { variable: variable, dataFilter: data, options: options });
                        }
                        else {
                            return fn(variable._context, { variable: variable, inputData: data, options: options });
                        }
                    }
                    else {
                        return fn(variable._context, { variable: variable, data: data, options: options });
                    }
                };
                var getDateTimeFormatForType = function (type) {
                    return _utils__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FORMATS[lodash__WEBPACK_IMPORTED_MODULE_2___default().toUpper(type)];
                };
                // Format value for datetime types
                var _formatDate = function (dateValue, type) {
                    var epoch;
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isDate(dateValue)) {
                        epoch = dateValue.getTime();
                    }
                    else {
                        if (!isNaN(dateValue)) {
                            dateValue = parseInt(dateValue, 10);
                        }
                        epoch = dateValue && moment(dateValue).valueOf();
                    }
                    if (isNaN(epoch) && type !== _utils__WEBPACK_IMPORTED_MODULE_0__.DataType.TIME) {
                        return epoch;
                    }
                    if (type === _utils__WEBPACK_IMPORTED_MODULE_0__.DataType.TIMESTAMP) {
                        return epoch;
                    }
                    if (type === _utils__WEBPACK_IMPORTED_MODULE_0__.DataType.TIME && !epoch) {
                        epoch = moment(new Date().toDateString() + ' ' + dateValue).valueOf();
                    }
                    return dateValue && appManager.getPipe('date').transform(epoch, getDateTimeFormatForType(type));
                };
                // Function to convert values of date time types into default formats
                var formatDate = function (value, type) {
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().includes(type, '.')) {
                        type = lodash__WEBPACK_IMPORTED_MODULE_2___default().toLower((0, _utils__WEBPACK_IMPORTED_MODULE_0__.extractType)(type));
                    }
                    if (lodash__WEBPACK_IMPORTED_MODULE_2___default().isArray(value)) {
                        return lodash__WEBPACK_IMPORTED_MODULE_2___default().map(value, function (val) {
                            return _formatDate(val, type);
                        });
                    }
                    return _formatDate(value, type);
                };
                var parseErrors = function (errors) {
                    var errMsg = '';
                    if (errors && errors.error && errors.error.length) {
                        errors.error.forEach(function (errorDetails, i) {
                            errMsg += parseError(errorDetails) + (i > 0 ? '\n' : '');
                        });
                    }
                    return errMsg;
                };
                var parseError = function (errorObj) {
                    var errMsg;
                    errMsg = errorObj.message ? (0, _utils__WEBPACK_IMPORTED_MODULE_0__.replace)(errorObj.message, errorObj.parameters, true) : ((errorObj.parameters && errorObj.parameters[0]) || '');
                    return errMsg;
                };
                /**
                 * This method filters and returns error message from the failed network call response.
                 * @param err, error form network call failure
                 */
                var getErrMessage = function (err, localeObject) {
                    var HTTP_STATUS_MSG = {
                        404: localeObject['MESSAGE_404_ERROR'] || 'Requested resource not found',
                        401: localeObject['MESSAGE_401_ERROR'] || 'Requested resource requires authentication',
                        403: localeObject['LABEL_FORBIDDEN_MESSAGE'] || 'The requested resource access/action is forbidden.'
                    };
                    // check if error message present for responded http status
                    var errMsg = HTTP_STATUS_MSG[err.status];
                    var errorDetails = err.error;
                    errorDetails = (0, _utils__WEBPACK_IMPORTED_MODULE_0__.getValidJSON)(errorDetails) || errorDetails;
                    // WM services have the format of error response as errorDetails.error
                    if (errorDetails && errorDetails.errors) {
                        errMsg = parseErrors(errorDetails.errors) || errMsg || 'Service Call Failed';
                    }
                    else {
                        errMsg = errMsg || 'Service Call Failed';
                    }
                    return errMsg;
                };
                /***/ 
            }),
            /***/ "./node_modules/x2js/x2js.js": 
            /*!***********************************!*\
              !*** ./node_modules/x2js/x2js.js ***!
              \***********************************/
            /***/ (function (module, exports) {
                var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*
                    Copyright 2015 Axinom
                    Copyright 2011-2013 Abdulla Abdurakhmanov
                    Original sources are available at https://code.google.com/p/x2js/
                
                    Licensed under the Apache License, Version 2.0 (the "License");
                    you may not use this file except in compliance with the License.
                    You may obtain a copy of the License at
                
                    http://www.apache.org/licenses/LICENSE-2.0
                
                    Unless required by applicable law or agreed to in writing, software
                    distributed under the License is distributed on an "AS IS" BASIS,
                    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                    See the License for the specific language governing permissions and
                    limitations under the License.
                */
                /*
                    Supported export methods:
                    * AMD
                    * <script> (window.X2JS)
                    * Node.js
                
                    Limitations:
                    * Attribute namespace prefixes are not parsed as such.
                    * Overall the serialization/deserializaton code is "best effort" and not foolproof.
                */
                // Module definition pattern used is returnExports from https://github.com/umdjs/umd
                (function (root, factory) {
                    "use strict";
                    /* global define */
                    if (true) {
                        // AMD. Register as an anonymous module.
                        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                            __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                                (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                    }
                    else { }
                })(this, function (CustomDOMParser) {
                    "use strict";
                    // We return a constructor that can be used to make X2JS instances.
                    return function X2JS(config) {
                        var VERSION = "3.4.4";
                        config = config || {};
                        function initConfigDefaults() {
                            // If set to "property" then <element>_asArray will be created
                            // to allow you to access any element as an array (even if there is only one of it).
                            config.arrayAccessForm = config.arrayAccessForm || "none";
                            // If "text" then <empty></empty> will be transformed to "".
                            // If "object" then <empty></empty> will be transformed to {}.
                            config.emptyNodeForm = config.emptyNodeForm || "text";
                            // Function that will be called for each elements, if the function returns true, the element will be skipped
                            // function(name, value) { return true; };
                            config.jsAttributeFilter = config.jsAttributeFilter;
                            // Function that will be called for each elements, the element value will be replaced by the returned value
                            // function(name, value) { return parseFloat(value); };
                            config.jsAttributeConverter = config.jsAttributeConverter;
                            // Allows attribute values to be converted on the fly during parsing to objects.
                            // 	"test": function(name, value) { return true; }
                            //	"convert": function(name, value) { return parseFloat(value); };
                            // convert() will be called for every attribute where test() returns true
                            // and the return value from convert() will replace the original value of the attribute.
                            config.attributeConverters = config.attributeConverters || [];
                            // Any elements that match the paths here will have their text parsed
                            // as an XML datetime value (2011-11-12T13:00:00-07:00 style).
                            // The path can be a plain string (parent.child1.child2),
                            // a regex (/.*\.child2/) or function(elementPath).
                            config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];
                            // Any elements that match the paths listed here will be stored in JavaScript objects
                            // as arrays even if there is only one of them. The path can be a plain string
                            // (parent.child1.child2), a regex (/.*\.child2/) or function(elementName, elementPath).
                            config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];
                            // xmldom constructor arguments
                            // @see https://github.com/jindw/xmldom#api-reference
                            config.xmldomOptions = config.xmldomOptions || {};
                            // If true, a toString function is generated to print nodes containing text or cdata.
                            // Useful if you want to accept both plain text and CData as equivalent inputs.
                            if (config.enableToStringFunc === undefined) {
                                config.enableToStringFunc = true;
                            }
                            // If true, empty text tags are ignored for elements with child nodes.
                            if (config.skipEmptyTextNodesForObj === undefined) {
                                config.skipEmptyTextNodesForObj = true;
                            }
                            // If true, whitespace is trimmed from text nodes.
                            if (config.stripWhitespaces === undefined) {
                                config.stripWhitespaces = true;
                            }
                            // If true, double quotes are used in generated XML.
                            if (config.useDoubleQuotes === undefined) {
                                config.useDoubleQuotes = true;
                            }
                            // If true, the root element of the XML document is ignored when converting to objects.
                            // The result will directly have the root element's children as its own properties.
                            if (config.ignoreRoot === undefined) {
                                config.ignoreRoot = false;
                            }
                            // Whether XML characters in text are escaped when reading/writing XML.
                            if (config.escapeMode === undefined) {
                                config.escapeMode = true;
                            }
                            // Prefix to use for properties that are created to represent XML attributes.
                            if (config.attributePrefix === undefined) {
                                config.attributePrefix = "_";
                            }
                            // If true, empty elements will created as self closing elements (<element />)
                            // If false, empty elements will be created with start and end tags (<element></element>)
                            if (config.selfClosingElements === undefined) {
                                config.selfClosingElements = true;
                            }
                            // If this property defined as false and an XML element has CData node ONLY, it will be converted to text without additional property "__cdata"
                            if (config.keepCData === undefined) {
                                config.keepCData = false;
                            }
                            // If this property defined as true, use { __text: 'abc' } over 'abc'
                            if (config.keepText === undefined) {
                                config.keepText = false;
                            }
                            // If true, will output dates in UTC
                            if (config.jsDateUTC === undefined) {
                                config.jsDateUTC = false;
                            }
                        }
                        function initRequiredPolyfills() {
                            function pad(number) {
                                var r = String(number);
                                if (r.length === 1) {
                                    r = '0' + r;
                                }
                                return r;
                            }
                            // Hello IE8-
                            if (typeof String.prototype.trim !== 'function') {
                                String.prototype.trim = function trim() {
                                    return this.replace(/^\s+|^\n+|(\s|\n)+$/g, '');
                                };
                            }
                            if (typeof Date.prototype.toISOString !== 'function') {
                                // Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript
                                Date.prototype.toISOString = function toISOString() {
                                    var MS_IN_S = 1000;
                                    return this.getUTCFullYear()
                                        + '-' + pad(this.getUTCMonth() + 1)
                                        + '-' + pad(this.getUTCDate())
                                        + 'T' + pad(this.getUTCHours())
                                        + ':' + pad(this.getUTCMinutes())
                                        + ':' + pad(this.getUTCSeconds())
                                        + '.' + String((this.getUTCMilliseconds() / MS_IN_S).toFixed(3)).slice(2, 5)
                                        + 'Z';
                                };
                            }
                        }
                        initConfigDefaults();
                        initRequiredPolyfills();
                        var DOMNodeTypes = {
                            "ELEMENT_NODE": 1,
                            "TEXT_NODE": 3,
                            "CDATA_SECTION_NODE": 4,
                            "COMMENT_NODE": 8,
                            "DOCUMENT_NODE": 9
                        };
                        function getDomNodeLocalName(domNode) {
                            var localName = domNode.localName;
                            if (localName == null) {
                                // Yeah, this is IE!!
                                localName = domNode.baseName;
                            }
                            if (localName == null || localName === "") {
                                // ==="" is IE too
                                localName = domNode.nodeName;
                            }
                            return localName;
                        }
                        function getDomNodeNamespacePrefix(node) {
                            return node.prefix;
                        }
                        function escapeXmlChars(str) {
                            if (typeof str === "string")
                                return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;');
                            else
                                return str;
                        }
                        function unescapeXmlChars(str) {
                            return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&amp;/g, '&');
                        }
                        function ensureProperArrayAccessForm(element, childName, elementPath) {
                            switch (config.arrayAccessForm) {
                                case "property":
                                    if (!(element[childName] instanceof Array))
                                        element[childName + "_asArray"] = [element[childName]];
                                    else
                                        element[childName + "_asArray"] = element[childName];
                                    break;
                            }
                            if (!(element[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
                                var match = false;
                                for (var i = 0; i < config.arrayAccessFormPaths.length; i++) {
                                    var arrayPath = config.arrayAccessFormPaths[i];
                                    if (typeof arrayPath === "string") {
                                        if (arrayPath === elementPath) {
                                            match = true;
                                            break;
                                        }
                                    }
                                    else if (arrayPath instanceof RegExp) {
                                        if (arrayPath.test(elementPath)) {
                                            match = true;
                                            break;
                                        }
                                    }
                                    else if (typeof arrayPath === "function") {
                                        if (arrayPath(childName, elementPath)) {
                                            match = true;
                                            break;
                                        }
                                    }
                                }
                                if (match)
                                    element[childName] = [element[childName]];
                            }
                        }
                        function xmlDateTimeToDate(prop) {
                            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
                            // Improved to support full spec and optional parts
                            var MINUTES_PER_HOUR = 60;
                            var bits = prop.split(/[-T:+Z]/g);
                            var d = new Date(bits[0], bits[1] - 1, bits[2]);
                            var secondBits = bits[5].split("\.");
                            d.setHours(bits[3], bits[4], secondBits[0]);
                            if (secondBits.length > 1)
                                d.setMilliseconds(secondBits[1]);
                            // Get supplied time zone offset in minutes
                            if (bits[6] && bits[7]) {
                                var offsetMinutes = bits[6] * MINUTES_PER_HOUR + Number(bits[7]);
                                var sign = /\d\d-\d\d:\d\d$/.test(prop) ? '-' : '+';
                                // Apply the sign
                                offsetMinutes = 0 + (sign === '-' ? -1 * offsetMinutes : offsetMinutes);
                                // Apply offset and local timezone
                                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());
                            }
                            else if (prop.indexOf("Z", prop.length - 1) !== -1) {
                                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
                            }
                            // d is now a local time equivalent to the supplied time
                            return d;
                        }
                        function convertToDateIfRequired(value, childName, fullPath) {
                            if (config.datetimeAccessFormPaths.length > 0) {
                                var pathWithoutTextNode = fullPath.split("\.#")[0];
                                for (var i = 0; i < config.datetimeAccessFormPaths.length; i++) {
                                    var candidatePath = config.datetimeAccessFormPaths[i];
                                    if (typeof candidatePath === "string") {
                                        if (candidatePath === pathWithoutTextNode)
                                            return xmlDateTimeToDate(value);
                                    }
                                    else if (candidatePath instanceof RegExp) {
                                        if (candidatePath.test(pathWithoutTextNode))
                                            return xmlDateTimeToDate(value);
                                    }
                                    else if (typeof candidatePath === "function") {
                                        if (candidatePath(pathWithoutTextNode))
                                            return xmlDateTimeToDate(value);
                                    }
                                }
                            }
                            return value;
                        }
                        function deserializeRootElementChildren(rootElement) {
                            var result = {};
                            var children = rootElement.childNodes;
                            // Alternative for firstElementChild which is not supported in some environments
                            for (var i = 0; i < children.length; i++) {
                                var child = children.item(i);
                                if (child.nodeType === DOMNodeTypes.ELEMENT_NODE) {
                                    var childName = getDomNodeLocalName(child);
                                    if (config.ignoreRoot)
                                        result = deserializeDomChildren(child, childName);
                                    else
                                        result[childName] = deserializeDomChildren(child, childName);
                                }
                            }
                            return result;
                        }
                        function deserializeElementChildren(element, elementPath) {
                            var result = {};
                            result.__cnt = 0;
                            var nodeChildren = element.childNodes;
                            // Child nodes.
                            for (var iChild = 0; iChild < nodeChildren.length; iChild++) {
                                var child = nodeChildren.item(iChild);
                                var childName = getDomNodeLocalName(child);
                                if (child.nodeType === DOMNodeTypes.COMMENT_NODE)
                                    continue;
                                result.__cnt++;
                                // We deliberately do not accept everything falsey here because
                                // elements that resolve to empty string should still be preserved.
                                if (result[childName] == null) {
                                    result[childName] = deserializeDomChildren(child, elementPath + "." + childName);
                                    ensureProperArrayAccessForm(result, childName, elementPath + "." + childName);
                                }
                                else {
                                    if (!(result[childName] instanceof Array)) {
                                        result[childName] = [result[childName]];
                                        ensureProperArrayAccessForm(result, childName, elementPath + "." + childName);
                                    }
                                    result[childName][result[childName].length] = deserializeDomChildren(child, elementPath + "." + childName);
                                }
                            }
                            // Attributes
                            for (var iAttribute = 0; iAttribute < element.attributes.length; iAttribute++) {
                                var attribute = element.attributes.item(iAttribute);
                                result.__cnt++;
                                var adjustedValue = attribute.value;
                                for (var iConverter = 0; iConverter < config.attributeConverters.length; iConverter++) {
                                    var converter = config.attributeConverters[iConverter];
                                    if (converter.test.call(null, attribute.name, attribute.value))
                                        adjustedValue = converter.convert.call(null, attribute.name, attribute.value);
                                }
                                result[config.attributePrefix + attribute.name] = adjustedValue;
                            }
                            // Node namespace prefix
                            var namespacePrefix = getDomNodeNamespacePrefix(element);
                            if (namespacePrefix) {
                                result.__cnt++;
                                result.__prefix = namespacePrefix;
                            }
                            if (result["#text"]) {
                                result.__text = result["#text"];
                                if (result.__text instanceof Array) {
                                    result.__text = result.__text.join("\n");
                                }
                                if (config.escapeMode)
                                    result.__text = unescapeXmlChars(result.__text);
                                if (config.stripWhitespaces)
                                    result.__text = result.__text.trim();
                                delete result["#text"];
                                if (config.arrayAccessForm === "property")
                                    delete result["#text_asArray"];
                                result.__text = convertToDateIfRequired(result.__text, "#text", elementPath + ".#text");
                            }
                            if (result.hasOwnProperty('#cdata-section')) {
                                result.__cdata = result["#cdata-section"];
                                delete result["#cdata-section"];
                                if (config.arrayAccessForm === "property")
                                    delete result["#cdata-section_asArray"];
                            }
                            if (result.__cnt === 1 && result.__text && !config.keepText) {
                                result = result.__text;
                            }
                            else if (result.__cnt === 0 && config.emptyNodeForm === "text") {
                                result = '';
                            }
                            else if (result.__cnt > 1 && result.__text !== undefined && config.skipEmptyTextNodesForObj) {
                                if (config.stripWhitespaces && result.__text === "" || result.__text.trim() === "") {
                                    delete result.__text;
                                }
                            }
                            delete result.__cnt;
                            /**
                             * We are checking if we are creating a __cdata property or if we just add the content of cdata inside result.
                             * But, if we have a property inside xml tag (<tag PROPERTY="1"></tag>), and a cdata inside, we can't ignore it.
                             * In this case we are keeping __cdata property.
                             */
                            if (!config.keepCData && (!result.hasOwnProperty('__text') && result.hasOwnProperty('__cdata') && Object.keys(result).length === 1)) {
                                return (result.__cdata ? result.__cdata : '');
                            }
                            if (config.enableToStringFunc && (result.__text || result.__cdata)) {
                                result.toString = function toString() {
                                    return (this.__text ? this.__text : '') + (this.__cdata ? this.__cdata : '');
                                };
                            }
                            return result;
                        }
                        function deserializeDomChildren(node, parentPath) {
                            if (node.nodeType === DOMNodeTypes.DOCUMENT_NODE) {
                                return deserializeRootElementChildren(node);
                            }
                            else if (node.nodeType === DOMNodeTypes.ELEMENT_NODE) {
                                return deserializeElementChildren(node, parentPath);
                            }
                            else if (node.nodeType === DOMNodeTypes.TEXT_NODE || node.nodeType === DOMNodeTypes.CDATA_SECTION_NODE) {
                                return node.nodeValue;
                            }
                            else {
                                return null;
                            }
                        }
                        function serializeStartTag(jsObject, elementName, attributeNames, selfClosing) {
                            var resultStr = "<" + ((jsObject && jsObject.__prefix) ? (jsObject.__prefix + ":") : "") + elementName;
                            if (attributeNames) {
                                for (var i = 0; i < attributeNames.length; i++) {
                                    var attributeName = attributeNames[i];
                                    var attributeValue = jsObject[attributeName];
                                    if (config.escapeMode)
                                        attributeValue = escapeXmlChars(attributeValue);
                                    resultStr += " " + attributeName.substr(config.attributePrefix.length) + "=";
                                    if (config.useDoubleQuotes)
                                        resultStr += '"' + attributeValue + '"';
                                    else
                                        resultStr += "'" + attributeValue + "'";
                                }
                            }
                            if (!selfClosing)
                                resultStr += ">";
                            else
                                resultStr += " />";
                            return resultStr;
                        }
                        function serializeEndTag(jsObject, elementName) {
                            return "</" + ((jsObject && jsObject.__prefix) ? (jsObject.__prefix + ":") : "") + elementName + ">";
                        }
                        function endsWith(str, suffix) {
                            return str.indexOf(suffix, str.length - suffix.length) !== -1;
                        }
                        function isSpecialProperty(jsonObj, propertyName) {
                            if ((config.arrayAccessForm === "property" && endsWith(propertyName.toString(), ("_asArray")))
                                || propertyName.toString().indexOf(config.attributePrefix) === 0
                                || propertyName.toString().indexOf("__") === 0
                                || (jsonObj[propertyName] instanceof Function))
                                return true;
                            else
                                return false;
                        }
                        function getDataElementCount(jsObject) {
                            var count = 0;
                            if (jsObject instanceof Object) {
                                for (var propertyName in jsObject) {
                                    if (isSpecialProperty(jsObject, propertyName))
                                        continue;
                                    count++;
                                }
                            }
                            return count;
                        }
                        function getDataAttributeNames(jsObject) {
                            var names = [];
                            if (jsObject instanceof Object) {
                                for (var attributeName in jsObject) {
                                    if (attributeName.toString().indexOf("__") === -1
                                        && attributeName.toString().indexOf(config.attributePrefix) === 0) {
                                        names.push(attributeName);
                                    }
                                }
                            }
                            return names;
                        }
                        function serializeComplexTextNodeContents(textNode) {
                            var result = "";
                            if (textNode.__cdata) {
                                result += "<![CDATA[" + textNode.__cdata + "]]>";
                            }
                            if (textNode.__text || typeof (textNode.__text) === 'number' || typeof (textNode.__text) === 'boolean') {
                                if (config.escapeMode)
                                    result += escapeXmlChars(textNode.__text);
                                else
                                    result += textNode.__text;
                            }
                            return result;
                        }
                        function serializeTextNodeContents(textNode) {
                            var result = "";
                            if (textNode instanceof Object) {
                                result += serializeComplexTextNodeContents(textNode);
                            }
                            else if (textNode !== null) {
                                if (config.escapeMode)
                                    result += escapeXmlChars(textNode);
                                else
                                    result += textNode;
                            }
                            return result;
                        }
                        function serializeArray(elementArray, elementName, attributes) {
                            var result = "";
                            if (elementArray.length === 0) {
                                result += serializeStartTag(elementArray, elementName, attributes, true);
                            }
                            else {
                                for (var i = 0; i < elementArray.length; i++) {
                                    result += serializeJavaScriptObject(elementArray[i], elementName, getDataAttributeNames(elementArray[i]));
                                }
                            }
                            return result;
                        }
                        function serializeJavaScriptObject(element, elementName, attributes) {
                            var result = "";
                            // Filter out elements
                            if (config.jsAttributeFilter && config.jsAttributeFilter.call(null, elementName, element)) {
                                return result;
                            }
                            // Convert element
                            if (config.jsAttributeConverter) {
                                element = config.jsAttributeConverter.call(null, elementName, element);
                            }
                            if ((element === undefined || element === null || element === '') && config.selfClosingElements) {
                                result += serializeStartTag(element, elementName, attributes, true);
                            }
                            else if (typeof element === 'object') {
                                if (Object.prototype.toString.call(element) === '[object Array]') {
                                    result += serializeArray(element, elementName, attributes);
                                }
                                else if (element instanceof Date) {
                                    result += serializeStartTag(element, elementName, attributes, false);
                                    // Serialize date
                                    result += config.jsDateUTC ? element.toUTCString() : element.toISOString();
                                    result += serializeEndTag(element, elementName);
                                }
                                else {
                                    var childElementCount = getDataElementCount(element);
                                    if (childElementCount > 0 || typeof (element.__text) === 'number' || typeof (element.__text) === 'boolean' || element.__text || element.__cdata) {
                                        result += serializeStartTag(element, elementName, attributes, false);
                                        result += serializeJavaScriptObjectChildren(element);
                                        result += serializeEndTag(element, elementName);
                                    }
                                    else if (config.selfClosingElements) {
                                        result += serializeStartTag(element, elementName, attributes, true);
                                    }
                                    else {
                                        result += serializeStartTag(element, elementName, attributes, false);
                                        result += serializeEndTag(element, elementName);
                                    }
                                }
                            }
                            else {
                                result += serializeStartTag(element, elementName, attributes, false);
                                result += serializeTextNodeContents(element);
                                result += serializeEndTag(element, elementName);
                            }
                            return result;
                        }
                        function serializeJavaScriptObjectChildren(jsObject) {
                            var result = "";
                            var elementCount = getDataElementCount(jsObject);
                            if (elementCount > 0) {
                                for (var elementName in jsObject) {
                                    if (isSpecialProperty(jsObject, elementName))
                                        continue;
                                    var element = jsObject[elementName];
                                    var attributes = getDataAttributeNames(element);
                                    result += serializeJavaScriptObject(element, elementName, attributes);
                                }
                            }
                            result += serializeTextNodeContents(jsObject);
                            return result;
                        }
                        function parseXml(xml) {
                            if (xml === undefined) {
                                return null;
                            }
                            if (typeof xml !== "string") {
                                return null;
                            }
                            var parser = null;
                            var domNode = null;
                            if (CustomDOMParser) {
                                // This branch is used for node.js, with the xmldom parser.
                                parser = new CustomDOMParser(config.xmldomOptions);
                                domNode = parser.parseFromString(xml, "text/xml");
                            }
                            else if (window && window.DOMParser) {
                                parser = new window.DOMParser();
                                var parsererrorNS = null;
                                var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
                                // IE9+ now is here
                                if (!isIEParser && document.all && !document.addEventListener) {
                                    try {
                                        parsererrorNS = parser.parseFromString("INVALID", "text/xml").childNodes[0].namespaceURI;
                                    }
                                    catch (err) {
                                        parsererrorNS = null;
                                    }
                                }
                                try {
                                    domNode = parser.parseFromString(xml, "text/xml");
                                    if (parsererrorNS !== null && domNode.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0) {
                                        domNode = null;
                                    }
                                }
                                catch (err) {
                                    domNode = null;
                                }
                            }
                            else {
                                // IE :(
                                if (xml.indexOf("<?") === 0) {
                                    xml = xml.substr(xml.indexOf("?>") + 2);
                                }
                                /* global ActiveXObject */
                                domNode = new ActiveXObject("Microsoft.XMLDOM");
                                domNode.async = "false";
                                domNode.loadXML(xml);
                            }
                            return domNode;
                        }
                        this.asArray = function asArray(prop) {
                            if (prop === undefined || prop === null) {
                                return [];
                            }
                            else if (prop instanceof Array) {
                                return prop;
                            }
                            else {
                                return [prop];
                            }
                        };
                        this.toXmlDateTime = function toXmlDateTime(dt) {
                            if (dt instanceof Date) {
                                return dt.toISOString();
                            }
                            else if (typeof (dt) === 'number') {
                                return new Date(dt).toISOString();
                            }
                            else {
                                return null;
                            }
                        };
                        this.asDateTime = function asDateTime(prop) {
                            if (typeof (prop) === "string") {
                                return xmlDateTimeToDate(prop);
                            }
                            else {
                                return prop;
                            }
                        };
                        /*
                            Internally the logic works in a cycle:
                            DOM->JS - implemented by custom logic (deserialization).
                            JS->XML - implemented by custom logic (serialization).
                            XML->DOM - implemented by browser.
                        */
                        // Transformns an XML string into DOM-tree
                        this.xml2dom = function xml2dom(xml) {
                            return parseXml(xml);
                        };
                        // Transforms a DOM tree to JavaScript objects.
                        this.dom2js = function dom2js(domNode) {
                            return deserializeDomChildren(domNode, null);
                        };
                        // Transforms JavaScript objects to a DOM tree.
                        this.js2dom = function js2dom(jsObject) {
                            var xml = this.js2xml(jsObject);
                            return parseXml(xml);
                        };
                        // Transformns an XML string into JavaScript objects.
                        this.xml2js = function xml2js(xml) {
                            var domNode = parseXml(xml);
                            if (domNode != null)
                                return this.dom2js(domNode);
                            else
                                return null;
                        };
                        // Transforms JavaScript objects into an XML string.
                        this.js2xml = function js2xml(jsObject) {
                            return serializeJavaScriptObjectChildren(jsObject);
                        };
                        this.getVersion = function getVersion() {
                            return VERSION;
                        };
                    };
                });
                /***/ 
            })
            /******/ 
        });
        /************************************************************************/
        /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/
        /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
                /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ id: moduleId,
                /******/ loaded: false,
                /******/ exports: {}
                /******/ 
            };
            /******/
            /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ // Flag the module as loaded
            /******/ module.loaded = true;
            /******/
            /******/ // Return the exports of the module
            /******/ return module.exports;
            /******/ 
        }
        /******/
        /************************************************************************/
        /******/ /* webpack/runtime/compat get default export */
        /******/ (function () {
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __webpack_require__.n = function (module) {
                /******/ var getter = module && module.__esModule ?
                    /******/ function () { return (module['default']); } :
                    /******/ function () { return (module); };
                /******/ __webpack_require__.d(getter, { a: getter });
                /******/ return getter;
                /******/ 
            };
            /******/ 
        })();
        /******/
        /******/ /* webpack/runtime/define property getters */
        /******/ (function () {
            /******/ // define getter functions for harmony exports
            /******/ __webpack_require__.d = function (exports, definition) {
                /******/ for (var key in definition) {
                    /******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                        /******/ Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
                        /******/ }
                    /******/ }
                /******/ 
            };
            /******/ 
        })();
        /******/
        /******/ /* webpack/runtime/global */
        /******/ (function () {
            /******/ __webpack_require__.g = (function () {
                /******/ if (typeof globalThis === 'object')
                    return globalThis;
                /******/ try {
                    /******/ return this || new Function('return this')();
                    /******/ }
                catch (e) {
                    /******/ if (typeof window === 'object')
                        return window;
                    /******/ }
                /******/ 
            })();
            /******/ 
        })();
        /******/
        /******/ /* webpack/runtime/hasOwnProperty shorthand */
        /******/ (function () {
            /******/ __webpack_require__.o = function (obj, prop) { return (Object.prototype.hasOwnProperty.call(obj, prop)); };
            /******/ 
        })();
        /******/
        /******/ /* webpack/runtime/make namespace object */
        /******/ (function () {
            /******/ // define __esModule on exports
            /******/ __webpack_require__.r = function (exports) {
                /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                    /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                    /******/ }
                /******/ Object.defineProperty(exports, '__esModule', { value: true });
                /******/ 
            };
            /******/ 
        })();
        /******/
        /******/ /* webpack/runtime/node module decorator */
        /******/ (function () {
            /******/ __webpack_require__.nmd = function (module) {
                /******/ module.paths = [];
                /******/ if (!module.children)
                    module.children = [];
                /******/ return module;
                /******/ 
            };
            /******/ 
        })();
        /******/
        /************************************************************************/
        var __webpack_exports__ = {};
        // This entry need to be wrapped in an IIFE because it need to be in strict mode.
        (function () {
            "use strict";
            /*!******************!*\
              !*** ./index.ts ***!
              \******************/
            __webpack_require__.r(__webpack_exports__);
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
                /* harmony export */ "$rootScope": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.$rootScope); },
                /* harmony export */ "ApiAwareVariable": function () { return ( /* reexport safe */_src_model_variable_api_aware_variable__WEBPACK_IMPORTED_MODULE_3__.ApiAwareVariable); },
                /* harmony export */ "BaseAction": function () { return ( /* reexport safe */_src_model_base_action__WEBPACK_IMPORTED_MODULE_2__.BaseAction); },
                /* harmony export */ "CONSTANTS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS); },
                /* harmony export */ "CrudVariable": function () { return ( /* reexport safe */_src_model_variable_crud_variable__WEBPACK_IMPORTED_MODULE_7__.CrudVariable); },
                /* harmony export */ "DB_CONSTANTS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.DB_CONSTANTS); },
                /* harmony export */ "LVService": function () { return ( /* reexport safe */_src_util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_10__.LVService); },
                /* harmony export */ "LiveVariable": function () { return ( /* reexport safe */_src_model_variable_live_variable__WEBPACK_IMPORTED_MODULE_8__.LiveVariable); },
                /* harmony export */ "LiveVariableUtils": function () { return ( /* reexport safe */_src_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_11__.LiveVariableUtils); },
                /* harmony export */ "ModelVariable": function () { return ( /* reexport safe */_src_model_variable_model_variable__WEBPACK_IMPORTED_MODULE_5__.ModelVariable); },
                /* harmony export */ "SWAGGER_CONSTANTS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.SWAGGER_CONSTANTS); },
                /* harmony export */ "ServiceVariable": function () { return ( /* reexport safe */_src_model_variable_service_variable__WEBPACK_IMPORTED_MODULE_6__.ServiceVariable); },
                /* harmony export */ "TEST": function () { return ( /* binding */TEST); },
                /* harmony export */ "TimerAction": function () { return ( /* reexport safe */_src_model_action_timer_action__WEBPACK_IMPORTED_MODULE_4__.TimerAction); },
                /* harmony export */ "VARIABLE_CONSTANTS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.VARIABLE_CONSTANTS); },
                /* harmony export */ "VARIABLE_URLS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.VARIABLE_URLS); },
                /* harmony export */ "WS_CONSTANTS": function () { return ( /* reexport safe */_src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__.WS_CONSTANTS); },
                /* harmony export */ "appManager": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.appManager); },
                /* harmony export */ "debounceVariableCall": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.debounceVariableCall); },
                /* harmony export */ "decodeData": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.decodeData); },
                /* harmony export */ "dialogService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.dialogService); },
                /* harmony export */ "formatDate": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.formatDate); },
                /* harmony export */ "formatExportExpression": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.formatExportExpression); },
                /* harmony export */ "generateConnectionParams": function () { return ( /* reexport safe */_src_util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_10__.generateConnectionParams); },
                /* harmony export */ "getBlob": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getBlob); },
                /* harmony export */ "getErrMessage": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getErrMessage); },
                /* harmony export */ "getEvaluatedOrderBy": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getEvaluatedOrderBy); },
                /* harmony export */ "getTarget": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getTarget); },
                /* harmony export */ "getTargetNodeKey": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getTargetNodeKey); },
                /* harmony export */ "getTargetObj": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.getTargetObj); },
                /* harmony export */ "httpService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.httpService); },
                /* harmony export */ "initiateCallback": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.initiateCallback); },
                /* harmony export */ "internalBoundNodeMap": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.internalBoundNodeMap); },
                /* harmony export */ "isFileUploadSupported": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.isFileUploadSupported); },
                /* harmony export */ "metadataService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.metadataService); },
                /* harmony export */ "navigationService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.navigationService); },
                /* harmony export */ "oauthService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.oauthService); },
                /* harmony export */ "parseConfig": function () { return ( /* reexport safe */_src_util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_10__.parseConfig); },
                /* harmony export */ "routerService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.routerService); },
                /* harmony export */ "securityService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.securityService); },
                /* harmony export */ "setInput": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.setInput); },
                /* harmony export */ "setValueToNode": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.setValueToNode); },
                /* harmony export */ "toasterService": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.toasterService); },
                /* harmony export */ "updateInternalNodes": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.updateInternalNodes); },
                /* harmony export */ "wmSetDependency": function () { return ( /* reexport safe */_src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__.wmSetDependency); }
                /* harmony export */ 
            });
            /* harmony import */ var _src_constants_variables_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/constants/variables.constants */ "./src/constants/variables.constants.ts");
            /* harmony import */ var _src_util_variable_variables_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/util/variable/variables.utils */ "./src/util/variable/variables.utils.ts");
            /* harmony import */ var _src_model_base_action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/model/base-action */ "./src/model/base-action.ts");
            /* harmony import */ var _src_model_variable_api_aware_variable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/model/variable/api-aware-variable */ "./src/model/variable/api-aware-variable.ts");
            /* harmony import */ var _src_model_action_timer_action__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/model/action/timer-action */ "./src/model/action/timer-action.ts");
            /* harmony import */ var _src_model_variable_model_variable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/model/variable/model-variable */ "./src/model/variable/model-variable.ts");
            /* harmony import */ var _src_model_variable_service_variable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/model/variable/service-variable */ "./src/model/variable/service-variable.ts");
            /* harmony import */ var _src_model_variable_crud_variable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/model/variable/crud-variable */ "./src/model/variable/crud-variable.ts");
            /* harmony import */ var _src_model_variable_live_variable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/model/variable/live-variable */ "./src/model/variable/live-variable.ts");
            /* harmony import */ var _src_types_http_client_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/types/http-client.service */ "./src/types/http-client.service.ts");
            /* harmony import */ var _src_util_variable_live_variable_http_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/util/variable/live-variable.http.utils */ "./src/util/variable/live-variable.http.utils.ts");
            /* harmony import */ var _src_util_variable_live_variable_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/util/variable/live-variable.utils */ "./src/util/variable/live-variable.utils.ts");
            var TEST = 'hello from variables';
        })();
        /******/ return __webpack_exports__;
        /******/ 
    })();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=index.js.map