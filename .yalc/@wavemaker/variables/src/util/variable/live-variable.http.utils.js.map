{"version":3,"file":"live-variable.http.utils.js","sourceRoot":"./","sources":["src/util/variable/live-variable.http.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { getClonedObject, removeExtraSlashes } from '../utils';\n\nimport { VARIABLE_URLS } from '../../constants/variables.constants';\nimport { httpService } from './variables.utils';\n\ndeclare const _;\n\nconst isStudioMode = false;\n\nexport const parseConfig = (serviceParams: any): any => {\n\n    let val, param, config;\n    const urlParams = serviceParams.urlParams;\n\n    /*get the config out of baseServiceManager*/\n    if (VARIABLE_URLS.hasOwnProperty(serviceParams.target) && VARIABLE_URLS[serviceParams.target].hasOwnProperty(serviceParams.action)) {\n        config = getClonedObject(VARIABLE_URLS[serviceParams.target][serviceParams.action]);\n\n        /*To handle dynamic urls, append the serviceParams.config.url with the static url(i.e., config.url)*/\n        if (serviceParams.config) {\n            config.url = (serviceParams.config.url || '') + config.url;\n            config.method = serviceParams.config.method || config.method;\n            config.headers = config.headers || {};\n\n            // TODO[Shubham] - change to for - of\n            for (const key in serviceParams.config.headers) {\n                val = serviceParams.config.headers[key];\n                config.headers[key] = val;\n            }\n        }\n        /* check for url parameters to replace the url */\n        if (urlParams) {\n            for (param in urlParams) {\n                if (urlParams.hasOwnProperty(param)) {\n                    val = urlParams[param];\n                    if (!_.isUndefined(val) && val !== null) {\n                        config.url = config.url.replace(new RegExp(':' + param, 'g'), val);\n                    }\n                }\n            }\n        }\n\n        /* check for data */\n        if (serviceParams.params) {\n            config.params = serviceParams.params;\n        }\n        /* check for data */\n        if (!_.isUndefined(serviceParams.data)) {\n            config.data = serviceParams.data;\n        }\n        /* check for data parameters, written to support old service calls (.json calls) */\n        if (serviceParams.dataParams) {\n            config.data.params = serviceParams.dataParams;\n        }\n        /* check for headers */\n        if (serviceParams.headers) {\n            config.headers = serviceParams.headers;\n        }\n\n        /* set extra config flags */\n        config.byPassResult    = serviceParams.byPassResult;\n        config.isDirectCall    = serviceParams.isDirectCall;\n        config.isExtURL        = serviceParams.isExtURL;\n        config.preventMultiple = serviceParams.preventMultiple;\n        config.responseType    = serviceParams.responseType;\n\n        return config;\n    }\n\n    return null;\n};\n\nexport const generateConnectionParams = (params, action) => {\n    let connectionParams,\n        urlParams,\n        requestData;\n    requestData = params.data;\n\n    urlParams = {\n        projectID        : params.projectID,\n        service          : !_.isUndefined(params.service) ? params.service : 'services',\n        dataModelName    : params.dataModelName,\n        entityName       : params.entityName,\n        queryName        : params.queryName,\n        queryParams      : params.queryParams,\n        procedureName    : params.procedureName,\n        procedureParams  : params.procedureParams,\n        id               : params.id,\n        relatedFieldName : params.relatedFieldName,\n        page             : params.page,\n        size             : params.size,\n        sort             : params.sort\n    };\n    connectionParams = {\n        target    : 'DATABASE',\n        action    : action,\n        urlParams : urlParams,\n        data      : requestData || '',\n        config    : {\n            'url' : params.url\n        }\n    };\n\n    connectionParams = parseConfig(connectionParams);\n    // TODO: Remove after backend fix\n    connectionParams.url = removeExtraSlashes(connectionParams.url);\n\n    return connectionParams;\n};\n\nconst initiateAction = (action, params, successCallback?, failureCallback?, noproxy?) => {\n    let connectionParams,\n        urlParams,\n        requestData,\n        param,\n        val,\n        config,\n        headers,\n        httpDetails;\n\n    /*\n    config      = getClonedObject(config[action]);\n    headers     = config && config.headers;\n\n    requestData = params.data;\n\n    urlParams = {\n        projectID        : params.projectID,\n        service          : !_.isUndefined(params.service) ? params.service : 'services',\n        dataModelName    : params.dataModelName,\n        entityName       : params.entityName,\n        queryName        : params.queryName,\n        queryParams      : params.queryParams,\n        procedureName    : params.procedureName,\n        procedureParams  : params.procedureParams,\n        id               : params.id,\n        relatedFieldName : params.relatedFieldName,\n        page             : params.page,\n        size             : params.size,\n        sort             : params.sort\n    };\n    */\n    if (params.url && isStudioMode && !noproxy) {\n/*\n        /!* Check for url parameters to replace the URL.\n         * So the variable parameters in the URL will be replaced by the actual parameter values.*!/\n        if (urlParams) {\n            for (param in urlParams) {\n                if (urlParams.hasOwnProperty(param)) {\n                    val = urlParams[param];\n                    if (!_.isUndefined(val) && val !== null) {\n                        config.url = config.url.replace(new RegExp(':' + param, 'g'), val);\n                    }\n                }\n            }\n        }\n        headers = headers || {};\n        headers.skipSecurity = 'true';\n        headers['Content-Type'] = headers['Content-Type'] || 'application/json';\n        /!*(!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy is added in endpointAddress to differentiate desktop from saas*!/\n        if (action === 'testRunQuery') {\n            headers['Content-Type'] = undefined;\n            httpDetails = {\n                'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,\n                'method'            : config.method,\n                'content-Type'      : 'multipart/form-data',\n                'headers'           : headers\n            };\n            requestData.append(SWAGGER_CONSTANTS.WM_HTTP_JSON, new Blob([JSON.stringify(httpDetails)], {\n                type: 'application/json'\n            }));\n            connectionParams = {\n                'data': requestData,\n                'headers': headers,\n                'urlParams'         : {\n                    projectID: $rootScope.project.id\n                }\n            };\n        } else {\n            connectionParams = {\n                'data': {\n                    'endpointAddress'   : $window.location.protocol + (!$rootScope.preferences.workspace.loadXDomainAppDataUsingProxy ? ('//' + $window.location.host) : '') + params.url + config.url,\n                    'method'            : config.method,\n                    'requestBody'       : JSON.stringify(requestData),\n                    'headers'           : headers\n                },\n                'urlParams'         : {\n                    projectID: $rootScope.project.id\n                }\n            };\n        }\n        WebService.testRestService(connectionParams, function (response) {\n            var parsedData = getValidJSON(response.responseBody),\n                errMsg,\n                localeObject;\n            if (parsedData.hasOwnProperty('result')) {\n                triggerFn(successCallback, parsedData.result);\n            } else if (parsedData.hasOwnProperty('error')) {\n                triggerFn(failureCallback, (parsedData.error && parsedData.error.message) || parsedData.error);\n            } else if (parsedData.hasOwnProperty('errorDetails')) {\n                localeObject = $rootScope.locale || $rootScope.appLocale;\n                errMsg = getClonedObject(localeObject[parsedData.errorDetails.code]);\n                triggerFn(failureCallback, replace(errMsg, parsedData.errorDetails.data) || parsedData.errorDetails);\n            } else {\n                triggerFn(successCallback, parsedData);\n            }\n        }, failureCallback);*/\n    } else {\n        connectionParams = generateConnectionParams(params, action);\n        params.operation = action;\n        return httpService.sendCallAsObservable({\n            url: connectionParams.url,\n            method: connectionParams.method,\n            data: connectionParams.data,\n            headers: connectionParams.headers\n        }, params);\n    }\n};\n\nexport const LVService = {\n    searchTableDataWithQuery: (params, successCallback, failureCallback) => initiateAction('searchTableDataWithQuery', params, successCallback, failureCallback),\n    executeAggregateQuery: (params, successCallback, failureCallback) => initiateAction('executeAggregateQuery', params, successCallback, failureCallback),\n    searchTableData: (params, successCallback, failureCallback) => initiateAction('searchTableData', params, successCallback, failureCallback),\n    readTableData: (params, successCallback, failureCallback) => initiateAction('readTableData', params, successCallback, failureCallback),\n    insertTableData: (params, successCallback, failureCallback) => initiateAction('insertTableData', params, successCallback, failureCallback),\n    insertMultiPartTableData: (params, successCallback, failureCallback) => initiateAction('insertMultiPartTableData', params, successCallback, failureCallback),\n    updateTableData: (params, successCallback, failureCallback) => initiateAction('updateTableData', params, successCallback, failureCallback),\n    updateCompositeTableData: (params, successCallback, failureCallback) => initiateAction('updateCompositeTableData', params, successCallback, failureCallback),\n    periodUpdateCompositeTableData: (params, successCallback, failureCallback) => initiateAction('periodUpdateCompositeTableData', params, successCallback, failureCallback),\n    updateMultiPartTableData: (params, successCallback, failureCallback) => initiateAction('updateMultiPartTableData', params, successCallback, failureCallback),\n    updateMultiPartCompositeTableData: (params, successCallback, failureCallback) => initiateAction('updateMultiPartCompositeTableData', params, successCallback, failureCallback),\n    deleteTableData: (params, successCallback, failureCallback) => initiateAction('deleteTableData', params, successCallback, failureCallback),\n    deleteCompositeTableData: (params, successCallback, failureCallback) => initiateAction('deleteCompositeTableData', params, successCallback, failureCallback),\n    periodDeleteCompositeTableData: (params, successCallback, failureCallback) => initiateAction('periodDeleteCompositeTableData', params, successCallback, failureCallback),\n    exportTableData: params => initiateAction('exportTableData', params),\n    getDistinctDataByFields: params => initiateAction('getDistinctDataByFields', params),\n    countTableDataWithQuery: (params, successCallback, failureCallback) => initiateAction('countTableDataWithQuery', params, successCallback, failureCallback)\n};\n"]}