{"version":3,"file":"service-variable.utils.js","sourceRoot":"./","sources":["src/util/variable/service-variable.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { extractType, isDefined, isDateTimeType, getBlob, replace } from \"../../util/utils\";\n\nimport { $rootScope, CONSTANTS, SWAGGER_CONSTANTS, VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\nimport { isFileUploadSupported } from './variables.utils';\nimport { getAccessToken } from './../oAuth.utils';\nimport { formatDate} from \"./variables.utils\";\nimport { PaginationUtils } from '../../util/variable/pagination.utils';\n\n// declare const _: any;\nimport _ from 'lodash';\n\n\n/**\n * returns true if a Service variable is:\n *  - for a query/procedure\n *  - performs a PUT/POST operation, i.e, takes a Request Body as input\n * @param variable\n * @returns {any}\n */\nconst isBodyTypeQueryOrProcedure = (variable) => {\n    return (_.includes(['QueryExecution', 'ProcedureExecution'], variable.controller)) && (_.includes(['put', 'post'], variable.operationType));\n};\n\n/**\n * returns true if the variable is a Query service variable\n * @param {string} controller\n * @param {string} serviceType\n * @returns {boolean}\n */\nconst isQueryServiceVar = (controller: string, serviceType: string) => {\n    return controller === VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY && serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA;\n};\n\n/**\n * Append given value to the formdata\n * @param formData\n * @param param - Param from which value has to be taken\n * @param paramValue - Value which is to be appended to formdata\n */\nconst getFormData = (formData, param, paramValue) => {\n    const paramType = _.toLower(extractType(_.get(param, 'items.type') || param.type)),\n        paramContentType = CONSTANTS.isStudioMode ? param['x-WM-CONTENT_TYPE'] : param.contentType;\n    if (isFileUploadSupported()) {\n        if ((paramType !== 'file') && (paramContentType === 'string' || !paramContentType)) {\n            if (_.isObject(paramValue)) {\n                paramValue = JSON.stringify(paramValue);\n            }\n            formData.append(param.name, paramValue);\n        } else {\n            if (_.isArray(paramValue) && paramType === 'file') {\n                _.forEach(paramValue, function (fileObject) {\n                    formData.append(param.name, (fileObject && fileObject.content) || getBlob(fileObject), fileObject.name);\n                });\n            } else {\n                formData.append(param.name, getBlob(paramValue, paramContentType), paramValue && paramValue.name);\n            }\n        }\n        return formData;\n    }\n};\n\n/**\n * Check for missing required params and format the date/time param values\n * @param inputData\n * @param params\n * @returns {{requestBody: {}; missingParams: any[]}}\n */\nconst processRequestBody = (inputData, params) => {\n    const requestBody = {},\n        missingParams = [];\n    let paramValue;\n    _.forEach(params, function (param) {\n        paramValue = _.get(inputData, param.name);\n        if (!_.isUndefined(paramValue) && paramValue !== '' && paramValue !== null && !param.readOnly) {\n            // ToDo - variable seperation\n            paramValue = isDateTimeType(param.type) ? formatDate(paramValue, param.type) : paramValue;\n            // Construct ',' separated string if param is not array type but value is an array\n            if (_.isArray(paramValue) && _.toLower(extractType(param.type)) === 'string') {\n                paramValue = _.join(paramValue, ',');\n            }\n            requestBody[param.name] = paramValue;\n        } else if (param.required) {\n            missingParams.push(param.name || param.id);\n        }\n    });\n    return {\n        'requestBody': requestBody,\n        'missingParams': missingParams\n    };\n};\n\n/**\n * Done only for HTTP calls made via the proxy server\n * Goes though request headers, appends 'X-' to certain headers\n * these headers need not be processed at proxy server and should directly be passed to the server\n * e.g. Authorization, Cookie, etc.\n * @param headers\n * @returns {{}}\n */\nconst cloakHeadersForProxy = (headers) => {\n    const _headers = {},\n        UNCLOAKED_HEADERS = VARIABLE_CONSTANTS.REST_SERVICE.UNCLOAKED_HEADERS,\n        CLOAK_PREFIX = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.CLOAK_HEADER_KEY;\n    _.forEach(headers, function (val, key) {\n        if (_.includes(UNCLOAKED_HEADERS, key.toUpperCase())) {\n            _headers[key] = val;\n        } else {\n            _headers[CLOAK_PREFIX + key] = val;\n        }\n    });\n\n    return _headers;\n};\n\nexport class ServiceVariableUtils {\n    /**\n     * prepares the HTTP request info for a Service Variable\n     * @param variable\n     * @param operationInfo\n     * @param inputFields\n     * @returns {any}\n     */\n    static constructRequestParams(variable, operationInfo, inputFields, options?) {\n        variable = variable || {};\n\n        // operationInfo is specifically null for un_authorized access\n        if (operationInfo === null) {\n            return {\n                'error' : {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED,\n                    'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.USER_UNAUTHORISED,\n                    'field': '_wmServiceOperationInfo'\n                }\n            };\n        } else if (_.isEmpty(operationInfo)) {\n            return {\n                'error' : {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING,\n                    'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.METADATA_MISSING,\n                    'field': '_wmServiceOperationInfo'\n                }\n            };\n        } else if (operationInfo && operationInfo.invalid) {\n            return {\n                'error' : {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING,\n                    'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.CRUD_OPERATION_MISSING,\n                    'field': '_wmServiceOperationInfo'\n                }\n            };\n        }\n\n        const directPath = operationInfo.directPath || '',\n            relativePath = operationInfo.basePath ? operationInfo.basePath + operationInfo.relativePath : operationInfo.relativePath,\n            isBodyTypeQueryProcedure = isBodyTypeQueryOrProcedure(variable);\n        let queryParams = '',\n            bodyInfo,\n            headers = {},\n            requestBody,\n            url,\n            requiredParamMissing = [],\n            target,\n            pathParamRex,\n            invokeParams,\n            authDetails = null,\n            uname,\n            pswd,\n            method,\n            formData,\n            isProxyCall,\n            paramValueInfo,\n            params,\n            securityDefnObj,\n            accessToken,\n            withCredentials;\n\n        function getFormDataObj() {\n            if (formData) {\n                return formData;\n            }\n            formData = new FormData();\n            return formData;\n        }\n\n        securityDefnObj = _.get(operationInfo.securityDefinitions, '0');\n\n        if (securityDefnObj) {\n            switch (securityDefnObj.type) {\n                case VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2:\n                    accessToken = getAccessToken(securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);\n                    if (accessToken) {\n                        headers[VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.OAUTH + ' ' + accessToken;\n                    } else {\n                        return {\n                            'error': {\n                                'type' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN,\n                                'message' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_ACCESSTOKEN\n                            },\n                            'securityDefnObj': securityDefnObj\n                        };\n                    }\n                    break;\n                case VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.BASIC:\n                    uname = inputFields['wm_auth_username'];\n                    pswd = inputFields['wm_auth_password'];\n                    if (uname && pswd) {\n                        // TODO[VIBHU]: bas64 encoding alternative.\n                        headers[VARIABLE_CONSTANTS.REST_SERVICE.AUTH_HDR_KEY] = VARIABLE_CONSTANTS.REST_SERVICE.PREFIX.AUTH_HDR_VAL.BASIC + ' ' + btoa(uname + ':' + pswd);\n                        authDetails = {\n                            'type': VARIABLE_CONSTANTS.REST_SERVICE.AUTH_TYPE.BASIC\n                        };\n                    } else {\n                        return {\n                            'error': {\n                                'type' : VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_CREDENTIALS,\n                                'message': VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.NO_CREDENTIALS\n                            },\n                            'securityDefnObj': securityDefnObj\n                        };\n                    }\n                    break;\n            }\n        }\n        // set query params, if pagination info is present and the info should be present in query\n        PaginationUtils.checkPaginationAtQuery(operationInfo, variable, options);\n\n        operationInfo.proxySettings = operationInfo.proxySettings || {web: true, mobile: false};\n        method = operationInfo.httpMethod || operationInfo.methodType;\n        isProxyCall = (function () {\n            // ToDo - variable seperation\n            // if (CONSTANTS.hasCordova) {\n                return operationInfo.proxySettings.mobile;\n            // }\n            return operationInfo.proxySettings.web;\n        }());\n        withCredentials = operationInfo.proxySettings.withCredentials;\n        url = isProxyCall ? relativePath : directPath;\n\n        /* loop through all the parameters */\n        _.forEach(operationInfo.parameters, function (param) {\n            // Set params based on current workspace\n            function setParamsOfChildNode() {\n                if (inputFields) {\n                    // specific case for body type query/procedure variable with query params\n                    if (inputFields[param.name] && _.isObject(inputFields[param.name])) {\n                        paramValueInfo = inputFields[param.name];\n                    } else {\n                        paramValueInfo = inputFields;\n                    }\n                    params = _.get(operationInfo, ['definitions', param.type]);\n                } else {\n                    // For Api Designer\n                    paramValueInfo = paramValue || {};\n                    params = param.children;\n                }\n            }\n\n            let paramValue = param.sampleValue;\n\n            if ((isDefined(paramValue) && paramValue !== null && paramValue !== '') || (isBodyTypeQueryProcedure && param.type !== 'file')) {\n                // Format dateTime params for dataService variables\n                if (variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA && isDateTimeType(param.type)) {\n                    // ToDo - variable seperation\n                    paramValue = formatDate(paramValue, param.type);\n                }\n                // Construct ',' separated string if param is not array type but value is an array\n                if (_.isArray(paramValue) && _.toLower(extractType(param.type)) === 'string' && variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.DATA) {\n                    paramValue = _.join(paramValue, ',');\n                }\n                switch (param.parameterType.toUpperCase()) {\n                    case 'QUERY':\n                        // Ignore null valued query params for queryService variable\n                        if (_.isNull(paramValue) && isQueryServiceVar(variable.controller, variable.serviceType)) {\n                            break;\n                        }\n                        if (!queryParams) {\n                            queryParams = '?' + param.name + '=' + encodeURIComponent(paramValue);\n                        } else {\n                            queryParams += '&' + param.name + '=' + encodeURIComponent(paramValue);\n                        }\n                        break;\n                    case 'PATH':\n                        /* replacing the path param based on the regular expression in the relative path */\n                        pathParamRex = new RegExp('\\\\s*\\\\{\\\\s*' + param.name + '(:\\\\.\\\\+)?\\\\s*\\\\}\\\\s*');\n                        url = url.replace(pathParamRex, paramValue);\n                        break;\n                    case 'HEADER':\n                        headers[param.name] = paramValue;\n                        break;\n                    case 'BODY':\n                        // For post/put query methods wrap the input\n                        if (isBodyTypeQueryProcedure) {\n                            setParamsOfChildNode();\n                            bodyInfo = processRequestBody(paramValueInfo, params);\n                            requestBody = bodyInfo.requestBody;\n                            requiredParamMissing = _.concat(requiredParamMissing, bodyInfo.missingParams);\n                        } else {\n                            requestBody = paramValue;\n                        }\n                        break;\n                    case 'FORMDATA':\n                        if (isBodyTypeQueryProcedure && param.name === SWAGGER_CONSTANTS.WM_DATA_JSON) {\n                            setParamsOfChildNode();\n                            // Process query/procedure formData non-file params params\n                            bodyInfo = processRequestBody(paramValueInfo, params);\n                            requestBody = getFormData(getFormDataObj(), param, bodyInfo.requestBody);\n                            requiredParamMissing = _.concat(requiredParamMissing, bodyInfo.missingParams);\n                        } else {\n                            requestBody = getFormData(getFormDataObj(), param, paramValue);\n                        }\n                        break;\n                }\n            } else if (param.required) {\n                requiredParamMissing.push(param.name || param.id);\n            }\n        });\n\n        // if required param not found, return error\n        if (requiredParamMissing.length) {\n            return {\n                'error': {\n                    'type': VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.REQUIRED_FIELD_MISSING,\n                    'field': requiredParamMissing.join(','),\n                    'message': replace(VARIABLE_CONSTANTS.REST_SERVICE.ERR_MSG.REQUIRED_FIELD_MISSING, [requiredParamMissing.join(',')]),\n                    'skipDefaultNotification': true\n                }\n            };\n        }\n\n        // Setting appropriate content-Type for request accepting request body like POST, PUT, etc\n        if (!_.includes(WS_CONSTANTS.NON_BODY_HTTP_METHODS, _.toUpper(method))) {\n            /*Based on the formData browser will automatically set the content type to 'multipart/form-data' and webkit boundary*/\n            if (!(operationInfo.consumes && (operationInfo.consumes[0] === WS_CONSTANTS.CONTENT_TYPES.MULTIPART_FORMDATA))) {\n                headers['Content-Type'] = (operationInfo.consumes && operationInfo.consumes[0]) || 'application/json';\n            }\n        }\n\n        // if the consumes has application/x-www-form-urlencoded and\n        // if the http request of given method type can have body send the queryParams as Form Data\n        if (_.includes(operationInfo.consumes, WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED)\n            && !_.includes(WS_CONSTANTS.NON_BODY_HTTP_METHODS, (method || '').toUpperCase())) {\n            // remove the '?' at the start of the queryParams\n            if (queryParams) {\n                requestBody = (requestBody ? requestBody + '&' : '') + queryParams.substring(1);\n            }\n            headers['Content-Type'] = WS_CONSTANTS.CONTENT_TYPES.FORM_URL_ENCODED;\n        } else {\n            url += queryParams;\n        }\n\n        /*\n         * for proxy calls:\n         *  - cloak the proper headers (required only for REST services)\n         *  - prepare complete url from relativeUrl\n         */\n        if (isProxyCall) {\n            // avoiding cloakHeadersForProxy when the method is invoked from apidesigner.\n            headers = variable.serviceType !== VARIABLE_CONSTANTS.SERVICE_TYPE.REST || operationInfo.skipCloakHeaders ? headers : cloakHeadersForProxy(headers);\n            if (variable.getPrefabName() && VARIABLE_CONSTANTS.REST_SUPPORTED_SERVICES.indexOf(variable.serviceType) !== -1) {\n                /* if it is a prefab variable (used in a normal project), modify the url */\n                url = 'prefabs/' + variable.getPrefabName() + url;\n                target = 'invokePrefabRestService';\n            } else if (!variable.getPrefabName()) {\n                url = 'services' + url;\n            }\n            url = $rootScope.project.deployedUrl + url;\n        }\n\n        // If pagination info exists, process info in request headers or body based on the metadata\n        const paginationInfo = PaginationUtils.getPaginationInfo(operationInfo, variable);\n        if (paginationInfo && variable.pagination) {\n            const resp = PaginationUtils.setPaginationAtReq(paginationInfo, operationInfo, variable, headers, requestBody, url, options);\n            if (resp) {\n                if (resp['headers']) {\n                    headers = resp['headers'];\n                } else if (resp['requestBody']) {\n                    requestBody = resp['requestBody']\n                } else if (resp['url']) {\n                    url = resp['url']\n                }\n            }\n        }\n\n        /*creating the params needed to invoke the service. url is generated from the relative path for the operation*/\n        invokeParams = {\n            'projectID': $rootScope.project.id,\n            'url': url,\n            'target': target,\n            'method': method,\n            'headers': headers,\n            'data': requestBody,\n            'authDetails': authDetails,\n            'isDirectCall': !isProxyCall,\n            'isExtURL': variable.serviceType === VARIABLE_CONSTANTS.SERVICE_TYPE.REST,\n            'withCredentials': withCredentials\n        };\n\n        return invokeParams;\n    }\n\n    static isFileUploadRequest(variable) {\n        // temporary fix, have to find proper solution for deciding weather to upload file through variable\n        return variable.service === 'FileService' && variable.operation === 'uploadFile';\n    }\n\n    /**\n     * This method returns array of query param names for variable other then page,size,sort\n     * @params {params} params of the variable\n     */\n    static excludePaginationParams(params) {\n        return _.map(_.reject(params, (param) => {\n            return _.includes(VARIABLE_CONSTANTS.PAGINATION_PARAMS, param.name);\n        }), function (param) {\n            return param.name;\n        });\n    }\n}\n"]}