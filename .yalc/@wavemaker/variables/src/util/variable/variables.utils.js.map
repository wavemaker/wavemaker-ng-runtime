{"version":3,"file":"variables.utils.js","sourceRoot":"./","sources":["src/util/variable/variables.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {findValueOf, getValidJSON, noop, extractType, DataType, DEFAULT_FORMATS, replace} from '../utils';\n\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\n\ndeclare const window: any, moment;\nimport _ from 'lodash';\nimport he from 'he';\n\nexport let appManager: any;\nexport let httpService: any;\nexport let metadataService: any;\nexport let navigationService: any;\nexport let routerService: any;\nexport let toasterService: any;\nexport let oauthService: any;\nexport let securityService: any;\nexport let dialogService: any;\nexport let internalBoundNodeMap = new Map();\nconst timers = new Map();\nconst DOT_EXPR_REX = /^\\[(\"|')[\\w\\W]*(\\1)\\]$/;\nconst _invoke = (variable, op) => {\n    let debouncedFn,\n        cancelFn = _.noop,\n        retVal;\n    if (timers.has(variable)) {\n        cancelFn = timers.get(variable).cancel;\n    }\n    cancelFn();\n    debouncedFn = _.debounce(function () {\n        retVal = variable[op]();\n        // handle promises to avoid uncaught promise errors in console\n        if (retVal instanceof Promise) {\n            retVal.catch(_.noop);\n        }\n    }, 100);\n    timers.set(variable, debouncedFn);\n    debouncedFn();\n};\n\nexport const wmSetDependency = (type: string, ref: any) => {\n    switch (type) {\n        case 'appManager':\n            appManager = ref;\n            break;\n        case 'http':\n            httpService = ref;\n            break;\n        case 'metadata':\n            metadataService = ref;\n            break;\n        case 'navigationService':\n            navigationService = ref;\n            break;\n        case 'router':\n            routerService = ref;\n            break;\n        case 'toaster':\n            toasterService =  ref;\n            break;\n        case 'oAuth':\n            oauthService =  ref;\n            break;\n        case 'security':\n            securityService =  ref;\n            break;\n        case 'dialog':\n            dialogService = ref;\n            break;\n    }\n};\nexport const debounceVariableCall = _invoke;\n/**\n * returns true if HTML5 File API is available else false\n * @returns {{prototype: Blob; new(blobParts?: any[], options?: BlobPropertyBag): Blob}}\n */\nexport const isFileUploadSupported = () => {\n    // ToDo - variable seperation\n    return (window.File && window.FileReader && window.FileList && window.Blob);\n};\n\n/**\n * formatting the expression as required by backend which was enclosed by ${<expression>}.\n * @param fieldDefs\n * returns fieldDefs\n */\nexport const formatExportExpression = (fieldDefs: any) => {\n    _.forEach(fieldDefs, function (fieldDef: any) {\n        if (fieldDef.expression) {\n            fieldDef.expression = '${' + fieldDef.expression + '}';\n        }\n    });\n    return fieldDefs;\n};\n/**\n * prepare a blob object based on the content and content type provided\n * if content is blob itself, simply returns it back\n * @param val\n * @param valContentType\n * @returns {*}\n */\nexport const getBlob = (val: any, valContentType?: any) => {\n    if (val instanceof Blob) {\n        return val;\n    }\n    const jsonVal = getValidJSON(val);\n    if (jsonVal && jsonVal instanceof Object) {\n        val = new Blob([JSON.stringify(jsonVal)], { type: valContentType || 'application/json' });\n    } else {\n        val = new Blob([val], { type: valContentType || 'text/plain' });\n    }\n    return val;\n};\n/**\n * sets the value against passed key on the \"inputFields\" object in the variable\n * @param targetObj: the object in which the key, value is to be set\n * @param variable\n * @param key: can be:\n *  - a string e.g. \"username\"\n *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n * @param val\n * - if key is string, the value against it (for that data type)\n * - if key is object, not required\n * @param options\n * @returns {any}\n */\nexport const setInput = (targetObj: any, key: any, val: any, options: any) => {\n    targetObj = targetObj || {};\n    let keys,\n        lastKey,\n        paramObj = {};\n\n    // content type check\n    if (_.isObject(options)) {\n        switch (options.type) {\n            case 'file':\n                val = getBlob(val, options.contentType);\n                break;\n            case 'number':\n                val = _.isNumber(val) ? val : parseInt(val, 10);\n                break;\n        }\n    }\n\n    if (_.isObject(key)) {\n        // check if the passed parameter is an object itself\n        paramObj = key;\n    } else if (key.indexOf('.') > -1) {\n        // check for '.' in key e.g. 'employee.department'\n        keys = key.split('.');\n        lastKey = keys.pop();\n        // Finding the object based on the key\n        targetObj = findValueOf(targetObj, keys.join('.'), true);\n        key = lastKey;\n        paramObj[key] = val;\n    } else {\n        paramObj[key] = val;\n    }\n\n    _.forEach(paramObj, function (paramVal: any, paramKey: any) {\n        targetObj[paramKey] = paramVal;\n    });\n    return targetObj;\n};\n\n/**\n * This method decodes the variable data which is encoded from backend before showing in the widgets.\n * It takes variable response content as input and iterates recursively,\n * if the value is string type then it will decode the data.\n * @param responseContent (Array of objects)\n */\nexport const decodeData = (responseContent: any) => {\n    if (!responseContent) {\n        return responseContent;\n    }\n    if (_.isArray(responseContent)) {\n        _.forEach(responseContent, (data: any) => {\n            if (_.isString(data)) {\n                data = htmlDecode(data);\n            } else if (_.isObject(data)) {\n                _.forEach(data, (value: any, key: any) => {\n                    if (value && _.isString(value)) {\n                        data[key] = htmlDecode(value);\n                    } else if (_.isObject(value)) {\n                        decodeData(value);\n                    }\n                });\n            }\n        });\n    } else if (_.isObject(responseContent)) {\n        _.forEach(responseContent, (value: any, key: any) => {\n            if (value && _.isString(value)) {\n                responseContent[key] = htmlDecode(value);\n            } else if (_.isObject(value)) {\n                decodeData(value);\n            }\n        });\n    } else if (_.isString(responseContent)) {\n        responseContent = htmlDecode(responseContent);\n        return responseContent;\n    }\n};\n\nfunction htmlDecode(input: any) {\n    return he.unescape(input);\n}\n\n/**\n *\n * @param varOrder\n * @param optionsOrder\n * @returns {any}\n */\nexport const getEvaluatedOrderBy = (varOrder: any, optionsOrder: any) => {\n    let optionFields: any,\n        varOrderBy;\n    // If options order by is not defined, return variable order\n    if (!optionsOrder || _.isEmpty(optionsOrder)) {\n        return varOrder;\n    }\n    // If variable order by is not defined, return options order\n    if (!varOrder) {\n        return optionsOrder;\n    }\n    // If both are present, combine the options order and variable order, with options order as precedence\n    varOrder     = _.split(varOrder, ',');\n    optionsOrder = _.split(optionsOrder, ',');\n    optionFields = _.map(optionsOrder, function (order: any) {\n        return _.split(_.trim(order), ' ')[0];\n    });\n    // If a field is present in both options and variable, remove the variable orderby\n    _.remove(varOrder, function (orderBy: any) {\n        return _.includes(optionFields, _.split(_.trim(orderBy), ' ')[0]);\n    });\n    varOrderBy = varOrder.length ? ',' + _.join(varOrder, ',') : '';\n    return _.join(optionsOrder, ',') + varOrderBy;\n};\n\nconst processVariablePostBindUpdate = (nodeName, nodeVal, nodeType, variable, noUpdate?) => {\n    switch (variable.category) {\n        case VARIABLE_CONSTANTS.CATEGORY.LIVE:\n            if (variable.operation === 'read') {\n                if (nodeName === 'dataBinding') {\n                    _.forEach(nodeVal, function (val, key) {\n                        variable.filterFields[key] = {\n                            'value': val\n                        };\n                    });\n                } else {\n                    variable.filterFields[nodeName] = {\n                        'value': nodeVal,\n                        'type' : nodeType\n                    };\n                }\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.listRecords) && !noUpdate) {\n                    _invoke(variable, 'listRecords');\n                }\n            } else {\n                if (nodeName === 'dataBinding') {\n                    variable.inputFields = nodeVal;\n                } else {\n                    variable.inputFields[nodeName] = nodeVal;\n                }\n                /* if auto-update set for the variable with read operation only, get its data */\n                if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable[variable.operation + 'Record']) && !noUpdate) {\n                    _invoke(variable, variable.operation + 'Record');\n                }\n            }\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.CRUD:\n            if (variable.operationType === 'list' && variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.invoke) && !noUpdate) {\n                _invoke(variable, 'invoke');\n            }\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.SERVICE:\n        case VARIABLE_CONSTANTS.CATEGORY.LOGIN:\n            if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.invoke) && !noUpdate) {\n                _invoke(variable, 'invoke');\n            }\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.DEVICE:\n            variable[nodeName] = nodeVal;\n            if (variable.autoUpdate && !_.isUndefined(nodeVal) && _.isFunction(variable.invoke) && !noUpdate) {\n                _invoke(variable, 'invoke');\n            }\n            break;\n    }\n};\n\n/**\n* Returns the object node for a bind object, where the value has to be updated\n* obj.target = \"a\"\n    * @param obj\n* @param root\n* @param variable\n* @returns {*}\n*/\nexport const getTargetObj = (obj, root, variable) => {\n    /*\n     * if the target key is in the form as \"['my.param']\"\n     * keep the target key as \"my.param\" and do not split further\n     * this is done, so that, the computed value against this binding is assigned as\n     *      {\"my.param\": \"value\"}\n     * and not as\n     *      {\n     *          \"my\": {\n     *              \"param\": \"value\"\n     *          }\n     *      }\n     */\n    let target = obj.target,\n        targetObj;\n    const rootNode = variable[root];\n    if (DOT_EXPR_REX.test(target)) {\n        targetObj = rootNode;\n    } else {\n        target = target.substr(0, target.lastIndexOf('.'));\n        if (obj.target === root) {\n            targetObj = variable;\n        } else if (target) {\n            targetObj = findValueOf(rootNode, target, true);\n        } else {\n            targetObj = rootNode;\n        }\n    }\n    return targetObj;\n};\n\n/**\n * Gets the key for the target object\n * the computed value will be updated against this key in the targetObject(computed by getTargetObj())\n * @param target\n * @param regex\n * @returns {*}\n */\nexport const getTargetNodeKey = (target) => {\n    /*\n     * if the target key is in the form as \"['my.param']\"\n     * keep the target key as \"my.param\" and do not split further\n     * this is done, so that, the computed value against this binding is assigned as\n     *      {\"my.param\": \"value\"}\n     * and not as\n     *      {\n     *          \"my\": {\n     *              \"param\": \"value\"\n     *          }\n     *      }\n     */\n    let targetNodeKey;\n    if (DOT_EXPR_REX.test(target)) {\n        targetNodeKey = target.replace(/^(\\[[\"'])|([\"']\\])$/g, '');\n    } else {\n        targetNodeKey = target.split('.').pop();\n    }\n    return targetNodeKey;\n};\n\nexport const setValueToNode = (target, obj, root, variable, value, noUpdate?) => {\n    const targetNodeKey = getTargetNodeKey(target),\n        targetObj = getTargetObj(obj, root, variable);\n    value = !_.isUndefined(value) ? value : obj.value;\n    /* sanity check, user can bind parent nodes to non-object values, so child node bindings may fail */\n    if (targetObj) {\n        targetObj[targetNodeKey] = value;\n    }\n    processVariablePostBindUpdate(targetNodeKey, value, obj.type, variable, noUpdate);\n};\n\nexport const getTarget = (variable) => {\n    let target;\n    switch(variable.category) {\n        case VARIABLE_CONSTANTS.CATEGORY.MODEL:\n            target = 'dataSet';\n            break;\n        case VARIABLE_CONSTANTS.CATEGORY.LIVE:\n            target = variable.operation === 'read' ? 'filterFields' : 'inputFields';\n            break;\n        default:\n            target = 'dataBinding';\n            break;\n\n    }\n    return target;\n}\n\n/**\n * The model internalBoundNodeMap stores the reference to latest computed values against internal(nested) bound nodes\n * This is done so that the internal node's computed value is not lost, once its parent node's value is computed at a later point\n * E.g.\n * Variable.employeeVar has following bindings\n * \"dataBinding\": [\n {\n         \"target\": \"department.budget\",\n         \"value\": \"bind:Variables.budgetVar.dataSet\"\n     },\n {\n         \"target\": \"department\",\n         \"value\": \"bind:Variables.departmentVar.dataSet\"\n     }\n ]\n * When department.budget is computed, employeeVar.dataSet = {\n *  \"department\": {\n *      \"budget\": {\"q1\": 1111}\n *  }\n * }\n *\n * When department is computed\n *  \"department\": {\n *      \"name\": \"HR\",\n *      \"location\": \"Hyderabad\"\n *  }\n * The budget field (computed earlier) is LOST.\n *\n * To avoid this, the latest values against internal nodes (in this case department.budget) are stored in a map\n * These values are assigned back to internal fields if the parent is computed (in this case department)\n * @param target\n * @param root\n * @param variable\n */\nexport const updateInternalNodes = (target, root, variable) => {\n    const boundInternalNodes = _.keys(_.get(internalBoundNodeMap.get(variable), [variable.name, root])),\n        targetNodeKey = getTargetNodeKey(target);\n    let internalNodes;\n    function findInternalNodeBound() {\n        return _.filter(boundInternalNodes, function (node) {\n            // the later condition in check (targetNodeKey === root || targetNodeKey === 'dataBinding') is specifically for live variable of insert/update types\n            return (node !== targetNodeKey && _.includes(node, targetNodeKey)) || ((targetNodeKey === root || targetNodeKey === 'dataBinding') && node !== targetNodeKey);\n        });\n    }\n    internalNodes = findInternalNodeBound();\n    if ((internalNodes.length)) {\n        _.forEach(internalNodes, function (node) {\n            setValueToNode(node, {target: node}, root, variable, _.get(internalBoundNodeMap.get(variable), [variable.name, root, node]));\n        });\n    }\n};\n\nexport const initiateCallback = (type: string, variable: any, data: any, options?: any, skipDefaultNotification?: boolean) => {\n\n    /*checking if event is available and variable has event property and variable event property bound to function*/\n    const eventValues = variable[type],\n        callBackScope = variable._context;\n    let errorVariable;\n    /**\n     * For error event:\n     * trigger app level error handler.\n     * if no event is assigned, trigger default appNotification variable.\n     */\n    if (type === VARIABLE_CONSTANTS.EVENT.ERROR && !skipDefaultNotification) {\n        if (!eventValues) {\n            /* in case of error, if no event assigned, handle through default notification variable */\n            errorVariable = callBackScope.Actions[VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION];\n            if (errorVariable) {\n                data = errorVariable.getMessage() || data;\n                data = _.isString(data) ? data : 'An error has occured. Please check the app logs.';\n                errorVariable.invoke({ 'message' : data}, undefined, undefined);\n                // $rootScope.$evalAsync(function () {\n                // $rootScope.$emit(\"invoke-service\", VARIABLE_CONSTANTS.DEFAULT_VAR.NOTIFICATION, {scope: callBackScope, message: response});\n                // });\n            }\n        }\n    }\n    // TODO: [Vibhu], check whether to support legacy event calling mechanism (ideally, it should have been migrated)\n    // ToDo - variable seperation\n   // const fn = $parseEvent(variable[type]);\n    const fn = variable[type] || noop;\n    if (type === VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE) {\n        if (variable.category === 'wm.LiveVariable' && variable.operation === 'read') {\n            return fn(variable._context, {variable: variable, dataFilter: data, options: options});\n        } else {\n           return fn(variable._context, {variable: variable, inputData: data, options: options});\n        }\n    } else {\n        return fn(variable._context, {variable: variable, data: data, options: options});\n    }\n};\nconst getDateTimeFormatForType = (type) => {\n    return DEFAULT_FORMATS[_.toUpper(type)];\n};\n\n// Format value for datetime types\nconst _formatDate = (dateValue, type) => {\n    let epoch;\n    if (_.isDate(dateValue)) {\n        epoch = dateValue.getTime();\n    } else {\n        if (!isNaN(dateValue)) {\n            dateValue = parseInt(dateValue, 10);\n        }\n        epoch = dateValue && moment(dateValue).valueOf();\n    }\n    if (isNaN(epoch) && type !== DataType.TIME) {\n        return epoch;\n    }\n    if (type === DataType.TIMESTAMP) {\n        return epoch;\n    }\n    if (type === DataType.TIME && !epoch) {\n        epoch = moment(new Date().toDateString() + ' ' + dateValue).valueOf();\n    }\n    return dateValue && appManager.getPipe('date').transform(epoch, getDateTimeFormatForType(type));\n};\n\n// Function to convert values of date time types into default formats\nexport const formatDate = (value, type) => {\n    if (_.includes(type, '.')) {\n        type = _.toLower(extractType(type));\n    }\n    if (_.isArray(value)) {\n        return _.map(value, function (val) {\n            return _formatDate(val, type);\n        });\n    }\n    return _formatDate(value, type);\n};\n\nconst parseErrors = (errors) => {\n    let errMsg = '';\n    if (errors && errors.error && errors.error.length) {\n        errors.error.forEach((errorDetails, i) => {\n            errMsg += parseError(errorDetails) + (i > 0 ? '\\n' : '');\n        });\n    }\n    return errMsg;\n}\n\nconst parseError = (errorObj) => {\n    let errMsg;\n    errMsg = errorObj.message ? replace(errorObj.message, errorObj.parameters, true) : ((errorObj.parameters && errorObj.parameters[0]) || '');\n    return errMsg;\n}\n\n/**\n * This method filters and returns error message from the failed network call response.\n * @param err, error form network call failure\n */\nexport const getErrMessage = (err: any, localeObject: any) =>  {\n    const HTTP_STATUS_MSG = {\n        404: localeObject['MESSAGE_404_ERROR'] || 'Requested resource not found',\n        401: localeObject['MESSAGE_401_ERROR'] || 'Requested resource requires authentication',\n        403: localeObject['LABEL_FORBIDDEN_MESSAGE'] || 'The requested resource access/action is forbidden.'\n    };\n\n    // check if error message present for responded http status\n    let errMsg = HTTP_STATUS_MSG[err.status];\n    let errorDetails = err.error;\n    errorDetails = getValidJSON(errorDetails) || errorDetails;\n\n    // WM services have the format of error response as errorDetails.error\n    if (errorDetails && errorDetails.errors) {\n        errMsg = parseErrors(errorDetails.errors) || errMsg || 'Service Call Failed';\n    } else {\n        errMsg = errMsg || 'Service Call Failed';\n    }\n    return errMsg;\n}"]}