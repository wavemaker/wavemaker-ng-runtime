{"version":3,"file":"inflight-queue.js","sourceRoot":"./","sources":["src/util/inflight-queue.ts"],"names":[],"mappings":"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","sourcesContent":["class InflightQueue {\n    requestsQueue = new Map();\n\n    /**\n     * pushes the process against a variable in its queue\n     * @param variable\n     * @param {{resolve: (value?: any) => void; reject: (reason?: any) => void}} param2\n     * the resolve callback will be called on\n     */\n    private addToQueue(variable: any, param2: {resolve: (value?: (any)) => void; reject: (reason?: any) => void}) {\n        if (this.requestsQueue.has(variable)) {\n            this.requestsQueue.get(variable).push(param2);\n        } else {\n            const processes = [];\n            processes.push({resolve: param2.resolve, reject: param2.reject, active: false});\n            this.requestsQueue.set(variable, processes);\n        }\n    }\n\n    /**\n     * Calls the reject method against the passed process\n     * @param process\n     */\n    private rejectProcess(process: any) {\n        process.reject('PROCESS_REJECTED_IN_QUEUE');\n    }\n\n    /**\n     * clears the queue against a variable\n     * @param variable\n     */\n    public clear(variable: any) {\n        this.requestsQueue.delete(variable);\n    }\n\n    /**\n     * executes the n/w calls for a specified variable pushed in its respective queue (pushed while it was inFlight)\n     * @param variable\n     */\n    process(variable: any) {\n        const processes: [any] = this.requestsQueue.get(variable);\n        let nextProcess;\n\n        // process request queue for the variable only if it is not empty\n        if (!processes || !processes.length) {\n            this.clear(variable);\n            return;\n        }\n\n        // If only one item in queue\n        if (processes.length === 1) {\n            nextProcess = processes[0];\n            if (nextProcess.active) {\n                this.clear(variable);\n            } else {\n                nextProcess.active = true;\n                nextProcess.resolve();\n            }\n            return;\n        }\n\n        switch (variable.inFlightBehavior) {\n            case 'executeLast':\n                for (let i = 0; i < processes.length - 2; i++) {\n                    this.rejectProcess(processes[i]);\n                }\n                processes.splice(0, processes.length - 1);\n                this.process(variable);\n                break;\n            case 'executeAll':\n                nextProcess = processes.splice(0, 1)[0];\n                if (nextProcess.active) {\n                    nextProcess = processes.splice(0, 1)[0];\n                }\n                nextProcess.active = true;\n                nextProcess.resolve();\n                break;\n            default:\n                for (let i = 0; i < processes.length - 1; i++) {\n                    this.rejectProcess(processes[i]);\n                }\n                this.clear(variable);\n                break;\n        }\n    }\n\n    /**\n     * initializes the queue against a variable and makes the first process call\n     * If already initialized and a process in queue is in progress, the queue is not processed.\n     * To process the next item in the queue, the process method has to be called from the caller.\n     * @param variable\n     * @returns {Promise<any>}\n     */\n    submit(variable: any) {\n        return new Promise((resolve, reject) => {\n            this.addToQueue(variable, {resolve: resolve, reject: reject});\n\n            if (this.requestsQueue.get(variable).length === 1) {\n                this.process(variable);\n            }\n        });\n    }\n}\n\nexport const $queue = new InflightQueue();\n"]}