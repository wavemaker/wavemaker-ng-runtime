{"version":3,"file":"notify-promise.js","sourceRoot":"./","sources":["src/util/notify-promise.ts"],"names":[],"mappings":"AAAA;IAEI,uBAAY,EAAO;QACf,IAAM,WAAW,GAAQ,EAAE,EACvB,MAAM,GAAG,UAAC,MAAW;YACrB,WAAW,CAAC,OAAO,CAAC,UAAC,GAAQ;gBACzB,GAAG,CAAC,MAAM,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QAEF,IAAM,OAAO,GAAG;YACZ,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAC;QAEF,IAAM,EAAE,GAAI,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YAC7B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEF,EAAU,CAAC,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxC,EAAU,CAAC,IAAI,GAAG,UAAC,SAAc,EAAE,QAAa,EAAE,QAAa;YAC3D,EAAU,CAAC,SAAS,CACjB,UAAC,QAAa;gBACV,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACpB,OAAO,EAAE,CAAC;YACd,CAAC,EACD,UAAC,MAAW;gBACR,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACjB,OAAO,EAAE,CAAC;YACd,CAAC,CACJ,CAAC;YACF,IAAI,QAAQ,EAAE;gBACV,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B;QACL,CAAC,CAAC;QACF,OAAO,EAAE,CAAC;IACd,CAAC;IACL,oBAAC;AAAD,CAAC,AApCD,IAoCC;;AAED,wEAAwE;AACxE,iCAAiC;AACjC,KAAK;AACL,0BAA0B;AAC1B,+DAA+D","sourcesContent":["export class NotifyPromise {\n\n    constructor(fn: any) {\n        const notifyQueue: any = [],\n            notify = (status: any) => {\n            notifyQueue.forEach((fn1: any) => {\n                fn1(status);\n            });\n        };\n\n        const cleanUp = function() {\n            notifyQueue.length = 0;\n        };\n\n        const p1 =  new Promise((res, rej) => {\n            fn(res, rej, notify);\n        });\n\n        (p1 as any).superThen = p1.then.bind(p1);\n        (p1 as any).then = (onResolve: any, onReject: any, onNotify: any) => {\n            (p1 as any).superThen(\n                (response: any) => {\n                    onResolve(response);\n                    cleanUp();\n                },\n                (reason: any) => {\n                    onReject(reason);\n                    cleanUp();\n                }\n            );\n            if (onNotify) {\n                notifyQueue.push(onNotify);\n            }\n        };\n        return p1;\n    }\n}\n\n// let newPromise = new PromiseWithNotify((resolve, reject, notify) => {\n//     setInterval(notify, 1000);\n// })\n// console.log(newPromise)\n// newPromise.then(undefined, undefined, () => console.log(3));\n"]}