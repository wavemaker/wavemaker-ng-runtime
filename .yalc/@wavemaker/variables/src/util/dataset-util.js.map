{"version":3,"file":"dataset-util.js","sourceRoot":"./","sources":["src/util/dataset-util.ts"],"names":[],"mappings":"AAEA;IAAA;IA4JA,CAAC;IA1JU,0BAAc,GAArB,UAAsB,OAAY,EAAE,MAAgB;QAChD,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,KAAK,CAAC;SAChB;QAED,kDAAkD;QAClD,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;SAChB;QAED,qBAAqB;QACrB,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,oBAAQ,GAAf,UAAgB,OAAY,EAAE,GAAQ,EAAE,KAAU,EAAE,MAAgB;QAChE,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;QAEnB,6CAA6C;QAC7C,OAAO,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACvD,CAAC;IAEM,oBAAQ,GAAf,UAAgB,OAAY,EAAE,GAAQ,EAAE,KAAU,EAAE,MAAgB;QAChE,qBAAqB;QACrB,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACxB;QAED,yBAAyB;QACzB,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,mBAAO,GAAd,UAAe,OAAY,EAAE,KAAU,EAAE,MAAgB;QACrD,gDAAgD;QAChD,OAAO,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACY,yBAAa,GAA5B,UAA6B,OAAY,EAAE,OAAY;QACnD,OAAO,GAAG,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QACtF,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAEM,mBAAO,GAAd,UAAe,OAAY,EAAE,CAAM,EAAE,KAAU,EAAE,OAAa;QAC1D,IAAI,KAAK,CAAC;QAEV,qBAAqB;QACrB,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACrC,OAAO,OAAO,CAAC;SAClB;QAED,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YACf,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACnC;aAAM;YACH,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YACd,IAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC/D,IAAM,cAAc,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAClD,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE;gBACvB,UAAU,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;aACpC;SACJ;aAAM;YACH,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACZ,4CAA4C;gBAC5C,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;aAC1B;SACJ;QAED,yBAAyB;QACzB,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,mBAAO,GAAd,UAAe,OAAY,EAAE,KAAU,EAAE,KAAU,EAAE,OAAa;QAC9D,qBAAqB;QACrB,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACzC,OAAO,OAAO,CAAC;SAClB;QAED,4CAA4C;QAC5C,IAAI,OAAO,CAAC,IAAI,EAAE;YACd,IAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC/D,IAAI,UAAU,EAAE;gBACZ,yBAAyB;gBACzB,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;gBACxD,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;aACtC;iBAAM;gBACJ,OAAO,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;aACzI;SAEJ;aAAM;YACH,yBAAyB;YACzB,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;YACrD,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SACnC;QAED,yBAAyB;QACzB,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;;;;;;OAQG;IACI,sBAAU,GAAjB,UAAkB,OAAY,EAAE,CAAM,EAAE,OAAY;QAChD,IAAI,KAAK,EAAE,UAAU,CAAC;QACtB,yBAAyB;QACzB,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAE7C,IAAI,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YACtB,UAAU,GAAG,OAAO,CAAC;SACxB;QACD,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACrB,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;SACnC;QAED,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,OAAO,CAAC,IAAI,EAAE;gBACd,IAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC/D,IAAM,cAAc,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBAClD,IAAI,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;oBAClG,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;iBACxC;aACJ;iBAAM;gBACH,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAChC,4FAA4F;gBAC5F,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC7E,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC5B;aACJ;SACJ;aAAM;YACH,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACxB;QACD,yBAAyB;QACzB,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,2BAAe,GAAtB,UAAuB,MAAgB;QACnC,OAAO,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5B,CAAC;IAEM,oBAAQ,GAAf,UAAgB,OAAY,EAAE,MAAgB;QAC1C,OAAO,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;IACjE,CAAC;IACL,kBAAC;AAAD,CAAC,AA5JD,IA4JC","sourcesContent":["declare const _: any;\n\nexport default class DatasetUtil {\n\n    static isValidDataset(dataSet: any, isList?: boolean) {\n        if (!dataSet) {\n            return false;\n        }\n\n        // check array type dataset for list type variable\n        if (isList && !_.isArray(dataSet)) {\n            return false;\n        }\n\n        // change the dataSet\n        return dataSet;\n    }\n\n    static getValue(dataSet: any, key: any, index: any, isList?: boolean) {\n        index = index || 0;\n\n        // return the value against the specified key\n        return isList ? dataSet[index][key] : dataSet[key];\n    }\n\n    static setValue(dataSet: any, key: any, value: any, isList?: boolean) {\n        // check param sanity\n        if (key && !isList) {\n            dataSet[key] = value;\n        }\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static getItem(dataSet: any, index: any, isList?: boolean) {\n        // return the object against the specified index\n        return isList ? dataSet[index] : dataSet;\n    }\n\n    /**\n     * This method is used to find target node\n     * @param dataSet: provided dataSet\n     * @param options: provided options\n     * @returns {any} targetnode\n     */\n    private static getTargetNode(dataSet: any, options: any) {\n        dataSet = options.parentIndex !== undefined ?  dataSet[options.parentIndex] : dataSet;\n        return _.get(dataSet, options.path);\n    }\n\n    static setItem(dataSet: any, i: any, value: any, options?: any) {\n        let index;\n\n        // check param sanity\n        if (_.isUndefined(i) || !options.isList) {\n            return dataSet;\n        }\n\n        if (_.isObject(i)) {\n            index = _.findIndex(dataSet, i);\n        } else {\n            index = i;\n        }\n\n        if (options.path) {\n            const innerArray = DatasetUtil.getTargetNode(dataSet, options);\n            const innerElemindex = _.findIndex(innerArray, i);\n            if (innerElemindex > -1) {\n              innerArray[innerElemindex] = value;\n            }\n        } else {\n            if (index > -1) {\n                // set the value against the specified index\n                dataSet[index] = value;\n            }\n        }\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static addItem(dataSet: any, value: any, index: any, options?: any) {\n        // check param sanity\n        if (_.isUndefined(value) || !options.isList) {\n            return dataSet;\n        }\n\n        // set the value against the specified index\n        if (options.path) {\n            const innerArray = DatasetUtil.getTargetNode(dataSet, options);\n            if (innerArray) {\n                // check for index sanity\n                index = index !== undefined ? index : innerArray.length;\n                innerArray.splice(index, 0, value);\n            } else {\n               options.parentIndex !== undefined ? _.set(dataSet[options.parentIndex], options.path, [value]) : _.set(dataSet, options.path, [value]);\n            }\n\n        } else {\n            // check for index sanity\n            index = index !== undefined ? index : dataSet.length;\n            dataSet.splice(index, 0, value);\n        }\n\n        // return the new dataSet\n        return dataSet;\n    }\n\n    /**\n     *\n     * @param dataSet\n     * @param i, can be index value of the object/element in array\n     *      or\n     * the whole object which needs to be removed\n     * @param exactMatch\n     * @returns {any}\n     */\n    static removeItem(dataSet: any, i: any, options: any) {\n        let index, exactMatch;\n        // check for index sanity\n        i = i !== undefined ? i : dataSet.length - 1;\n\n        if (_.isBoolean(options)) {\n            exactMatch = options;\n        }\n        if (_.isObject(options)) {\n            exactMatch = options.exactMatch;\n        }\n\n        if (_.isObject(i)) {\n            if (options.path) {\n                const innerArray = DatasetUtil.getTargetNode(dataSet, options);\n                const innerElemindex = _.findIndex(innerArray, i);\n                if (innerElemindex > -1 && (!exactMatch || (exactMatch && _.isEqual(innerArray[innerElemindex], i)))) {\n                    innerArray.splice(innerElemindex, 1);\n                }\n            } else {\n                index = _.findIndex(dataSet, i);\n                // When exactMatch property is set to true delete only when every property values are same*/\n                if (index > -1 && (!exactMatch || (exactMatch && _.isEqual(dataSet[index], i)))) {\n                    dataSet.splice(index, 1);\n                }\n            }\n        } else {\n            dataSet.splice(i, 1);\n        }\n        // return the new dataSet\n        return dataSet;\n    }\n\n    static getValidDataset(isList?: boolean) {\n        return isList ? [] : {};\n    }\n\n    static getCount(dataSet: any, isList?: boolean) {\n        return isList ? dataSet.length : Object.keys(dataSet).length;\n    }\n}\n"]}