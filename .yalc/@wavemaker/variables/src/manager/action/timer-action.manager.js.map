{"version":3,"file":"timer-action.manager.js","sourceRoot":"./","sources":["src/manager/action/timer-action.manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,qCAAqC,CAAC;AAEhE;IAAA;IAmCA,CAAC;IAlCG,oCAAO,GAAP,UAAQ,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK;QACrC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC,YAAY,EAAE;YACxD,OAAO;SACV;QACD,IAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,EAClC,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,SAAS,CAAC,mBAAmB,EACvD,KAAK,GAAG,aAAa,EACrB,IAAI,GAAG;YACH,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC;QAEN,QAAQ,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YACpE,IAAI,EAAE,CAAC;YACP,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC;QAClC,CAAC,EAAE,KAAK,CAAC,CAAC;QAEV;;;aAGK;QAEL,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAED,mCAAM,GAAN,UAAO,QAAQ;QACX,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC9B,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACpB,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACpC;iBAAM;gBACH,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACnC;YACD,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC;SACjC;IACL,CAAC;IACL,yBAAC;AAAD,CAAC,AAnCD,IAmCC","sourcesContent":["import { isDefined } from '../../util/utils';\n\nimport { initiateCallback } from '../../util/variable/variables.utils';\nimport { CONSTANTS } from '../../constants/variables.constants';\n\nexport class TimerActionManager {\n    trigger(variable, options, success, error) {\n        if (isDefined(variable._promise) || CONSTANTS.isStudioMode) {\n            return;\n        }\n        const repeatTimer = variable.repeating,\n            delay = variable.delay || CONSTANTS.DEFAULT_TIMER_DELAY,\n            event = 'onTimerFire',\n            exec = function () {\n                initiateCallback(event, variable, {});\n            };\n\n        variable._promise = repeatTimer ? setInterval(exec, delay) : setTimeout(function () {\n            exec();\n            variable._promise = undefined;\n        }, delay);\n\n        /*// destroy the timer on scope destruction\n        callBackScope.$on('$destroy', function () {\n            variable.cancel(variable._promise);\n        });*/\n\n        return variable._promise;\n    }\n\n    cancel(variable) {\n        if (isDefined(variable._promise)) {\n            if (variable.repeating) {\n                clearInterval(variable._promise);\n            } else {\n                clearTimeout(variable._promise);\n            }\n            variable._promise = undefined;\n        }\n    }\n}\n"]}