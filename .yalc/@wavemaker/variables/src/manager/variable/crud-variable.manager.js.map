{"version":3,"file":"crud-variable.manager.js","sourceRoot":"./","sources":["src/manager/variable/crud-variable.manager.ts"],"names":[],"mappings":"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","sourcesContent":["// import { $invokeWatchers, getClonedObject, getValidJSON, isDefined, isPageable, isValidWebURL, noop, triggerFn, xmlToJson } from '@wm/core';\nimport { getClonedObject, triggerFn } from \"../../util/utils\";\nimport { CrudVariable } from '../../model/variable/crud-variable';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\nimport { $queue } from '../../util/inflight-queue';\nimport { VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\nimport {appManager, setInput} from './../../util/variable/variables.utils';\nimport { getEvaluatedOrderBy, httpService, initiateCallback, metadataService, getErrMessage } from '../../util/variable/variables.utils';\nimport { getAccessToken } from '../../util/oAuth.utils';\nimport {ServiceVariableManager} from './service-variable.manager';\n\ndeclare const _;\n\nexport class CrudVariableManager extends ServiceVariableManager {\n\n    fileUploadResponse: any = [];\n    fileUploadCount = 0;\n    totalFilesCount = 0;\n    successFileUploadCount = 0;\n    failedFileUploadCount = 0;\n\n    private getPaginationInfo(variable, inputFields, options?) {\n        if (!options || !options.operation) {\n            options.operation = 'list';\n        }\n        const serviceDef = getClonedObject(metadataService.getByCrudId(variable.crudOperationId, variable.getPrefabName()));\n        let methodInfo = serviceDef === null ? null : _.get(serviceDef, 'wmServiceOperationInfo');\n        methodInfo = serviceDef.filter(function(item) {\n            return options.operation === item.operationType;\n        })[0];\n        if (!methodInfo) {\n            return methodInfo;\n        }\n        // methodInfo.paginationInfo = {\n        //                                 \"contentMapping\": \"content\",\n        //                                 \"ascSortExpression\": \"{{fieldName}} a\",\n        //                                 \"descSortExpression\": \"{{fieldName}} d\",\n        //                                 //\"defaultSortExpression\": \"id\",\n        //                                 \"totalMapping\": \"totalElements\",\n        //                                 \"pageMapping\": {\n        //                                     \"in\": \"query\",\n        //                                     \"name\": \"pageNum\",\n        //                                     \"description\": \"the existing id\",\n        //                                     \"type\": \"integer\",\n        //                                     \"required\": true\n        //                                 },\n        //                                 \"sizeMapping\": {\n        //                                     \"in\": \"query\",\n        //                                     \"name\": \"limit\",\n        //                                     \"description\": \"the existing id\",\n        //                                     \"type\": \"integer\",\n        //                                     \"required\": true\n        //                                 },\n        //                                 \"sortMapping\": {\n        //                                     \"name\": \"sortInfo\",\n        //                                     \"in\": \"query\",\n        //                                     \"description\": \"the sorting criteria\",\n        //                                     \"required\": true,\n        //                                     \"type\": \"integer\"\n        //                                 }\n        //                             };\n        methodInfo.paginationInfo = null;\n        return methodInfo.paginationInfo;\n    }\n\n    private getOperationInfo(variable, options) {\n        let serviceDef = getClonedObject(metadataService.getByCrudId(variable.crudOperationId, variable.getPrefabName()));\n        let methodInfo;\n        // fallback if there is no operation\n        if (options && !options.operation) {\n            options.operation = 'list';\n        }\n        if (!serviceDef.length) {\n            return;\n        }\n        methodInfo = serviceDef.filter(function(item) {\n            return options.operation === item.operationType;\n        })[0];\n        return methodInfo ? methodInfo.wmServiceOperationInfo : {invalid: true};\n    }\n    /**\n     * gets the service operation info against a service variable\n     * this is extracted from the metadataservice\n     * @param variable\n     * @param inputFields: sample values, if provided, will be set against params in the definition\n     * @param options\n     * @returns {any}\n     */\n    private getMethodInfoForCrud(variable, inputFields, options?) {\n        const methodInfo = this.getOperationInfo(variable, options);\n        if (!methodInfo || methodInfo.invalid) {\n            return methodInfo;\n        }\n        const securityDefnObj = _.get(methodInfo.securityDefinitions, '0'),\n            isOAuthTypeService = securityDefnObj && (securityDefnObj.type === VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2);\n        if (methodInfo.parameters) {\n            methodInfo.parameters.forEach(function (param) {\n                // Ignore readOnly params in case of formData file params will be duplicated\n                if (param.readOnly) {\n                    return;\n                }\n                param.sampleValue = inputFields[param.name];\n                /* supporting pagination for query service variable */\n                if (VARIABLE_CONSTANTS.PAGINATION_PARAMS.indexOf(param.name) !== -1) {\n                    if (param.name === 'size') {\n                        param.sampleValue = options.size || param.sampleValue || parseInt(variable.maxResults, 10);\n                    } else if (param.name === 'page') {\n                        param.sampleValue = options.page || param.sampleValue || 1;\n                    } else if (param.name === 'sort') {\n                        param.sampleValue = getEvaluatedOrderBy(variable.orderBy, options.orderBy) || param.sampleValue || '';\n                    }\n                } else if (param.name === 'access_token' && isOAuthTypeService) {\n                    param.sampleValue = getAccessToken(securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);\n                }\n            });\n        }\n        return methodInfo;\n    }\n\n    /**\n     * proxy for the invoke call\n     * Request Info is constructed\n     * if error found, error is thrown\n     * else, call is made\n     * @param {CrudVariable} variable\n     * @param options\n     * @param {Function} success\n     * @param {Function} error\n     * @returns {any}\n     * @private\n     */\n    protected _invoke (variable: CrudVariable, options: any, success: Function, error: Function) {\n        let inputFields = getClonedObject(options.inputFields || {});\n        if (options.operation === 'delete') {\n            inputFields = getClonedObject(options.row || inputFields.row || options.inputFields || variable.dataBinding);\n        } else if (options.operation === 'create' && options.row) {\n            inputFields = getClonedObject(options.row);\n        } else if (options.operation === 'update' && options.row) {\n            inputFields = getClonedObject(options.row);\n        }\n        // EVENT: ON_BEFORE_UPDATE\n        const output: any = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, inputFields, options);\n        let successHandler;\n        let errorHandler;\n\n        if (output === false) {\n            $queue.process(variable);\n            triggerFn(error);\n            return;\n        }\n        if (_.isObject(output)) {\n            inputFields = output;\n        }\n        const opInfo = this.getOperationInfo(variable, options);\n        let bodyParam;\n        if (opInfo && opInfo.parameters) {\n            bodyParam = opInfo.parameters.filter(function(op) {\n                return op.parameterType === 'body' || op.parameterType === 'formData';\n            })[0];\n        }\n        // merge fields with bindings\n        const bindingFields = _.get(variable.dataBinding, options.operation) || {};\n        // bindings from setInput can come along with the body param, so employee.age will have to be converted to age\n        if (bodyParam && bindingFields[bodyParam.name]) {\n            _.forEach(bindingFields, function(bindingFieldVal, bindingFieldKey) {\n                if (bindingFieldKey === bodyParam.name) {\n                    _.merge(inputFields, bindingFieldVal);\n                } else {\n                    inputFields[bindingFieldKey] = bindingFieldVal;\n                }\n            });\n        } else {\n            _.merge(inputFields, bindingFields);\n        }\n        if ((options.operation === 'create' || options.operation === 'update') && (!bodyParam || !inputFields[bodyParam.name])) {\n            let bodyTypeKeys = [], nonBodyParam;\n            // only merge body/formData type params to the requestBody.\n            for (const fieldName in inputFields) {\n                nonBodyParam = opInfo.parameters.filter(function(param) {\n                    return param.name === fieldName && param.parameterType !== 'body' && param.parameterType !== 'formData';\n                });\n                if (nonBodyParam.length) {\n                    bodyTypeKeys.push(fieldName);\n                }\n            }\n            const reqBodyFields = _.omit(inputFields, bodyTypeKeys);\n            if (bodyParam) {\n                inputFields[bodyParam.name] = getClonedObject(reqBodyFields);\n            } else {\n                inputFields.RequestBody = getClonedObject(reqBodyFields);\n            }\n        }\n        let paginationInfo;\n        const operationInfo = this.getMethodInfoForCrud(variable, inputFields, options);\n        let pathParam, bodyTypeParam;\n        if (!variable.paginationTransformationRequired && operationInfo && !operationInfo.invalid) {\n            if (operationInfo.parameters) {\n                operationInfo.parameters.forEach(function (parameter) {\n                    if (parameter.parameterType === 'path') {\n                        pathParam = parameter.name;\n                    } else if (parameter.parameterType === 'body') {\n                        bodyTypeParam = parameter.name;\n                        inputFields[bodyTypeParam] = getClonedObject(inputFields);\n                    }\n                });\n            }\n            for (const key in inputFields) {\n                if (key !== bodyTypeParam) {\n                    delete inputFields[key];\n                }\n            }\n            if (pathParam && inputFields[bodyTypeParam]) {\n                inputFields[pathParam] = getClonedObject(inputFields[bodyTypeParam][pathParam]);\n            }\n        }\n        // else {\n        //     inputFields.totalMapping = paginationInfo && paginationInfo.totalMapping;\n        // }\n        const requestParams = ServiceVariableUtils.constructRequestParams(variable, operationInfo, inputFields);\n        inputFields.sortInfo = options.orderBy;\n        // check errors\n        if (requestParams.error) {\n            if (requestParams.error.type === VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING) {\n                requestParams.error.message = requestParams.error.message.replace('$operation', options.operation);\n            }\n            if (options.preventMissingOpMsg) {\n                $queue.process(variable);\n                return Promise.resolve('');\n            }\n            const info = this.handleRequestMetaError(requestParams, variable, success, error, options);\n            const reason = (_.get(info, 'error.message') || 'An error occurred while triggering the variable');\n            triggerFn(error);\n            return Promise.reject(reason);\n        }\n\n        // file upload\n        if (ServiceVariableUtils.isFileUploadRequest(variable)) {\n            const uploadPromise = this.uploadFile(variable, options, success, error, inputFields, requestParams);\n            if (uploadPromise) {\n                return uploadPromise;\n            }\n        }\n\n        // file download\n        if (operationInfo && _.isArray(operationInfo.produces) && _.includes(operationInfo.produces, WS_CONSTANTS.CONTENT_TYPES.OCTET_STREAM)) {\n            // ToDo - variable seperation\n            return variable.simulateFileDownload(requestParams, variable.dataBinding.file || variable.name, variable.dataBinding.exportType, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, null, null, null);\n                $queue.process(variable);\n                triggerFn(success);\n            }, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null, null, null);\n                $queue.process(variable);\n                triggerFn(error);\n            });\n        }\n\n        // notify variable progress\n        this.notifyInflight(variable, !options.skipToggleState);\n\n        successHandler = (response, resolve, inputObj?) => {\n            if (response && response.type) {\n                if (variable.paginationTransformationRequired) {\n                    let json = JSON.parse(response.body);\n                    const pageable = {\n                        'content'         : json[paginationInfo.contentMapping],\n                        'first'           : inputObj[paginationInfo.pageMapping.name] === 1 ? true : false,\n                        'last'            : inputObj[paginationInfo.pageMapping.name] === json[inputFields.totalMapping] ? true : false,\n                        'number'          : inputObj[paginationInfo.pageMapping.name] - 1,\n                        'numberOfElements': inputObj[paginationInfo.sizeMapping.name],\n                        'size'            : inputObj[paginationInfo.sizeMapping.name],\n                        'sort'            : null,\n                        'totalElements'   : json[inputFields.totalMapping],\n                        'totalPages'      : Math.ceil(json[inputFields.totalMapping] / inputObj[paginationInfo.sizeMapping.name])\n                    };\n                    if (inputObj.sortInfo) {\n                        pageable.sort = [{direction: inputObj.sortInfo.split(' ')[1].toUpperCase(), property: inputObj.sortInfo.split(' ')[0], ignoreCase: false, nullHandling: \"NATIVE\", ascending: inputObj.sortInfo.split(' ')[1] === 'asc' ? true : false}];\n                    }\n                    json = getClonedObject(pageable);\n                    response.body = JSON.stringify(json);\n                }\n                const data = this.processSuccessResponse(response.body, variable, _.extend(options, {'xhrObj': response}), success, response.headers, operationInfo);\n                // notify variable success\n                this.notifyInflight(variable, false, data);\n                resolve(response);\n            }\n        };\n\n        errorHandler = (err, reject) => {\n            const errMsg = getErrMessage(err, variable.httpService.getLocale());\n            // notify variable error\n            this.notifyInflight(variable, false);\n            this.processErrorResponse(variable, errMsg, error, err, options.skipNotification);\n            reject({\n                error: errMsg,\n                details: err\n            });\n        };\n\n        // make the call and return a promise to the user to support script calls made by users\n        return new Promise((resolve, reject) => {\n            requestParams.responseType = 'text'; // this is to return text response. JSON & XML-to-JSON parsing is handled in success handler.\n            this.httpCall(requestParams, variable).then((response) => {\n                successHandler(response, resolve, inputFields);\n            }, err => {\n                errorHandler(err, reject);\n            });\n            // the _observable property on variable is used store the observable using which the network call is made\n            // this can be used to cancel the variable calls.\n        });\n    }\n\n    // *********************************************************** PUBLIC ***********************************************************//\n\n    public invoke(variable, options, success, error) {\n        options = options || {};\n        appManager.notify('check-state-persistence-options', {\n            options: options,\n            variable: variable\n        });\n        options.operation = options.operation || 'list';\n        options.inputFields = options.inputFields || getClonedObject(variable.dataBinding[options.operation]);\n        return $queue.submit(variable).then(this._invoke.bind(this, variable, options, success, error), error);\n    }\n\n    public getInputParms(variable) {\n        const wmServiceOperationInfo = _.get(metadataService.getByOperationId(variable.operationId, variable.getPrefabName()), 'wmServiceOperationInfo');\n        return _.get(wmServiceOperationInfo, 'parameters');\n    }\n\n    public setInput(variable, key, val, options, type?) {\n        type = type || 'list';\n        if (_.isEmpty(variable.dataBinding[type])) {\n            variable.dataBinding[type] = {};\n        }\n        return setInput(variable.dataBinding[type], key, val, options);\n    }\n\n    /**\n     * Initializes the bindings for the CRUD variable\n     * flatten the bindings (categorised by operation name) to a list of bindings\n     * each binding object's target is changed appended with the operation type\n     * E.g. Input binding will be like:\n     {\n       \"list\": [\n         {\n           \"target\": \"q\",\n           \"type\": \"string\",\n           \"value\": \"X\"\n         }\n       ],\n       \"update\": [\n         {\n           \"target\": \"id\",\n           \"value\": \"bind:Widgets.UserControllerTable2.selecteditem.userId\",\n           \"type\": \"integer\"\n         }\n       ]\n     }\n\n     * This function will convert it to\n     [\n         {\n           \"target\": \"list.q\",\n           \"type\": \"string\",\n           \"value\": \"X\"\n         },\n         {\n           \"target\": \"update.id\",\n           \"value\": \"bind:Widgets.UserControllerTable2.selecteditem.userId\",\n           \"type\": \"integer\"\n         }\n     ]\n\n     * The bindings will be evaluated through the base-manager initBinding method and will\n     * be stored in variable.dataBinding as follows:\n     {\n        list: {\n            q: \"X\"\n        },\n        update: {\n            id: \"evaluated value\"\n        }\n     }\n     * @param variable\n     */\n    public initBinding(variable) {\n        let crudBindInfo = variable.dataBinding || {},\n            flattenedBindInfo = [];\n\n        _.forEach(crudBindInfo, (bindNodes, operationType) => {\n            bindNodes = bindNodes || [];\n            bindNodes.forEach((bindNode)=>{\n                bindNode.target = operationType + '.' + bindNode.target;\n                flattenedBindInfo.push(bindNode);\n            });\n        });\n        variable.dataBinding = flattenedBindInfo;\n\n        super.initBinding(variable);\n    }\n}\n"]}