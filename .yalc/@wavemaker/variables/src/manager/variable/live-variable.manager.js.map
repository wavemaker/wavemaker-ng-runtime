{"version":3,"file":"live-variable.manager.js","sourceRoot":"./","sources":["src/manager/variable/live-variable.manager.ts"],"names":[],"mappings":"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","sourcesContent":["// import { $invokeWatchers, processFilterExpBindNode } from '@wm/core';\nimport { getClonedObject, isDateTimeType, isDefined, triggerFn } from \"../../util/utils\";\n\nimport { BaseVariableManager } from './base-variable.manager';\nimport { debounceVariableCall, formatExportExpression, initiateCallback, setInput, appManager, httpService, formatDate } from '../../util/variable/variables.utils';\nimport { LiveVariableUtils } from '../../util/variable/live-variable.utils';\nimport { decodeData } from './../../util/variable/variables.utils';\nimport { $queue } from '../../util/inflight-queue';\nimport { $rootScope, CONSTANTS, VARIABLE_CONSTANTS, DB_CONSTANTS } from '../../constants/variables.constants';\nimport { AdvancedOptions } from '../../advanced-options';\nimport { generateConnectionParams } from '../../util/variable/live-variable.http.utils';\nimport { VariableEvents } from \"../../model/base-variable\";\n\ndeclare const _, window;\nconst emptyArr = [];\n\nexport class LiveVariableManager extends BaseVariableManager {\n\n    public initFilterExpressionBinding(variable) {\n        const context = variable._context;\n        const destroyFn = context.registerDestroyListener ? context.registerDestroyListener.bind(context) : _.noop;\n        // ToDo - variable seperation\n        // const filterSubscription = processFilterExpBindNode(context, variable.filterExpressions).subscribe((response: any) => {\n        //     if (variable.operation === 'read') {\n        //         /* if auto-update set for the variable with read operation only, get its data */\n        //         if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable.update)) {\n        //             debounceVariableCall(variable, 'update');\n        //         }\n        //     } else {\n        //         /* if auto-update set for the variable with read operation only, get its data */\n        //         if (variable.autoUpdate && !_.isUndefined(response.newVal) && _.isFunction(variable[variable.operation + 'Record'])) {\n        //             debounceVariableCall(variable, variable.operation + 'Record');\n        //         }\n        //     }\n        // });\n\n      //  destroyFn(() => filterSubscription.unsubscribe());\n    }\n\n    private updateDataset(variable, data, propertiesMap, pagination) {\n        variable.pagination = pagination;\n        variable.dataSet = data;\n\n        // legacy properties in dataSet, [data, pagination]\n        Object.defineProperty(variable.dataSet, 'data', {\n            get: () => {\n                return variable.dataSet;\n            }\n        });\n        Object.defineProperty(variable.dataSet, 'pagination', {\n            get: () => {\n                return variable.pagination;\n            }\n        });\n    }\n\n    // Set the _options on variable which can be used by the widgets\n    private setVariableOptions(variable, options) {\n        variable._options = variable._options || {};\n        variable._options.orderBy = options && options.orderBy;\n        variable._options.filterFields = options && options.filterFields;\n        variable._options.logicalOp = options && options.logicalOp;\n    }\n\n    private handleError(variable, errorCB, response, options, advancedOptions?) {\n        let opt: AdvancedOptions;\n        /* If callback function is provided, send the data to the callback.\n         * The same callback if triggered in case of error also. The error-handling is done in grid.js*/\n        triggerFn(errorCB, response);\n\n        //  EVENT: ON_RESULT\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n\n        /* update the dataSet against the variable */\n        if (!options.skipDataSetUpdate) {\n            this.updateDataset(variable, emptyArr, variable.propertiesMap, null);\n        }\n\n        //  EVENT: ON_ERROR\n        opt = this.prepareCallbackOptions(options.errorDetails);\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, opt);\n        //  EVENT: ON_CAN_UPDATE\n        variable.canUpdate = true;\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);\n    }\n\n    /**\n     * Traverses recursively the filterExpressions object and if there is any required field present with no value,\n     * then we will return without proceeding further. Its upto the developer to provide the mandatory value,\n     * if he wants to assign it in teh onbefore<delete/insert/update>function then make that field in\n     * the filter query section as optional\n     * @param filterExpressions - recursive rule Object\n     * @returns {Object} object or boolean. Object if everything gets validated or else just boolean indicating failure in the validations\n     */\n    private getFilterExprFields = function (filterExpressions) {\n        let isRequiredFieldAbsent = false;\n        const traverseCallbackFn = function (parentFilExpObj, filExpObj) {\n            if (filExpObj\n                && filExpObj.required\n                && ((_.indexOf(['null', 'isnotnull', 'empty', 'isnotempty', 'nullorempty'], filExpObj.matchMode) === -1) && filExpObj.value === '')) {\n                isRequiredFieldAbsent = true;\n                return false;\n            }\n        };\n        LiveVariableUtils.traverseFilterExpressions(filterExpressions, traverseCallbackFn);\n        return isRequiredFieldAbsent ? !isRequiredFieldAbsent : filterExpressions;\n    };\n\n    /**\n     * Allows the user to get the criteria of filtering and the filter fields, based on the method called\n     */\n    private getDataFilterObj = function (clonedFilterFields) {\n        return (function (clonedFields) {\n            function getCriteria(filterField) {\n                const criterian = [];\n                LiveVariableUtils.traverseFilterExpressions(clonedFields, function (filterExpressions, criteria) {\n                    if (filterField === criteria.target) {\n                        criterian.push(criteria);\n                    }\n                });\n                return criterian;\n            }\n\n            function getFilterFields() {\n                return clonedFields;\n            }\n\n            return {\n                getFilterFields: getFilterFields,\n                getCriteria: getCriteria\n            };\n        }(clonedFilterFields));\n    };\n\n    private makeCall(variable, dbOperation, params) {\n        const successHandler = (response, resolve) => {\n            if (response && response.type) {\n                resolve(response);\n            }\n        };\n        const errorHandler = (error, reject) => {\n            const errMsg = variable.httpService.getErrMessage(error);\n            // notify variable error\n            this.notifyInflight(variable, false);\n            reject({\n                error: errMsg,\n                details: error\n            });\n        };\n        return new Promise((resolve, reject) => {\n            let reqParams = generateConnectionParams(params, dbOperation);\n            reqParams = {\n                url: reqParams.url,\n                method: reqParams.method,\n                data: reqParams.data,\n                headers: reqParams.headers\n            };\n            params.operation = dbOperation;\n            this.httpCall(reqParams, variable, params).then((response) => {\n                successHandler(response, resolve);\n            }, (e) => {\n                errorHandler(e, reject);\n            });\n        });\n    }\n\n    private getEntityData(variable, options, success, error) {\n        const dataObj: any = {};\n        let tableOptions,\n            dbOperation,\n            output,\n            newDataSet,\n            clonedFields,\n            requestData,\n            dbOperationOptions,\n            getEntitySuccess,\n            getEntityError;\n\n        // empty array kept (if variable is not of read type filterExpressions will be undefined)\n        clonedFields = this.getFilterExprFields(getClonedObject(variable.filterExpressions || {}));\n        // clonedFields = getClonedObject(variable.filterFields);\n        //  EVENT: ON_BEFORE_UPDATE\n        output = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, this.getDataFilterObj(clonedFields), options);\n        // if filterFields are updated or modified inside the onBeforeUpdate event then in device use these fields to filter.\n        const updateFilterFields = _.isObject(output) ? getClonedObject(output) : undefined;\n        if (output === false) {\n            $queue.process(variable);\n            // $rootScope.$emit('toggle-variable-state', variable, false);\n            triggerFn(error, 'Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n            return Promise.reject('Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n        }\n\n        variable.canUpdate = false;\n\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options, _.isObject(output) ? output : clonedFields);\n\n        //  if tableOptions object has query then set the dbOperation to 'searchTableDataWithQuery'\n        if (options.searchWithQuery) {\n            dbOperation = 'searchTableDataWithQuery';\n            requestData = tableOptions.query ? ('q=' + tableOptions.query) : '';\n        } else {\n            dbOperation = (tableOptions.filter && tableOptions.filter.length) ? 'searchTableData' : 'readTableData';\n            requestData = tableOptions.filter;\n        }\n        dbOperationOptions = {\n            'projectID': $rootScope.project.id,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'page': options.page || 1,\n            'size': options.pagesize || (CONSTANTS.isRunMode ? (variable.maxResults || 20) : (variable.designMaxResults || 20)),\n            'sort': tableOptions.sort,\n            'data': requestData,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options, updateFilterFields),\n            // 'filterMeta': tableOptions.filter,\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl\n        };\n        getEntitySuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                response = response.body;\n                dataObj.data = response.content;\n                dataObj.pagination = _.omit(response, 'content');\n                const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(response, {pagination: dataObj.pagination});\n\n                if ((response && response.error) || !response || !_.isArray(response.content)) {\n                    this.handleError(variable, error, response.error, options, advancedOptions);\n                    return Promise.reject(response.error);\n                }\n                decodeData(response.content);\n                LiveVariableUtils.processBlobColumns(response.content, variable);\n\n                if (!options.skipDataSetUpdate) {\n                    //  EVENT: ON_RESULT\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, dataObj.data, advancedOptions);\n                    //  EVENT: ON_PREPARESETDATA\n                    newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataObj.data, advancedOptions);\n                    if (newDataSet) {\n                        // setting newDataSet as the response to service variable onPrepareSetData\n                        dataObj.data = newDataSet;\n                    }\n                    /* update the dataSet against the variable */\n                    this.updateDataset(variable, dataObj.data, variable.propertiesMap, dataObj.pagination);\n                    this.setVariableOptions(variable, options);\n\n                    // watchers should get triggered before calling onSuccess event.\n                    // so that any variable/widget depending on this variable's data is updated\n                    variable.notify(VariableEvents.AFTER_INVOKE, [this, dataObj.data]);\n                    setTimeout(() => {\n                        // if callback function is provided, send the data to the callback\n                        triggerFn(success, dataObj.data, variable.propertiesMap, dataObj.pagination);\n\n                        //  EVENT: ON_SUCCESS\n                        initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataObj.data, advancedOptions);\n                        //  EVENT: ON_CAN_UPDATE\n                        variable.canUpdate = true;\n                        initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataObj.data, advancedOptions);\n                    });\n                }\n                return resolve({data: dataObj.data, pagination: dataObj.pagination});\n            }\n        };\n        getEntityError = (e: any, reject: any) => {\n            this.setVariableOptions(variable, options);\n            this.handleError(variable, error, e.error, _.extend(options, {errorDetails: e.details}));\n\n            return reject(e.error);\n        };\n        /* if it is a prefab variable (used in a normal project), modify the url */\n        /*Fetch the table data*/\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                getEntitySuccess(response, resolve);\n            }, err => {\n                getEntityError(err, reject);\n            });\n        });\n    }\n\n    private performCUD(operation, variable, options, success, error) {\n        options = options || {};\n        options.inputFields = options.inputFields || getClonedObject(variable.inputFields);\n        return $queue.submit(variable).then(() => {\n            this.notifyInflight(variable, !options.skipToggleState);\n            return this.doCUD(operation, variable, options, success, error)\n                .then((response) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, response);\n                    return Promise.resolve(response);\n                }, (err) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, err);\n                    return Promise.reject(err);\n                });\n        }, error);\n    }\n\n    private doCUD(action, variable, options, success, error) {\n        const projectID = $rootScope.project.id || $rootScope.projectName,\n            primaryKey = LiveVariableUtils.getPrimaryKey(variable),\n            isFormDataSupported = (window.File && window.FileReader && window.FileList && window.Blob);\n\n        let dbName,\n            compositeId = '',\n            rowObject = {},\n            prevData,\n            compositeKeysData = {},\n            prevCompositeKeysData = {},\n            id,\n            columnName,\n            clonedFields,\n            output,\n            onCUDerror,\n            onCUDsuccess,\n            inputFields = options.inputFields || variable.inputFields;\n\n        // EVENT: ON_BEFORE_UPDATE\n        clonedFields = getClonedObject(inputFields);\n        output = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, clonedFields, options);\n        if (output === false) {\n            // $rootScope.$emit('toggle-variable-state', variable, false);\n            triggerFn(error);\n            return Promise.reject('Call stopped from the event: ' + VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE);\n        }\n        inputFields = _.isObject(output) ? output : clonedFields;\n        variable.canUpdate = false;\n\n        if (options.row) {\n            rowObject = options.row;\n            // For datetime types, convert the value to the format accepted by backend\n            _.forEach(rowObject, (value, key) => {\n                const fieldType = LiveVariableUtils.getFieldType(key, variable);\n                let fieldValue;\n                if (isDateTimeType(fieldType)) {\n                    // ToDo - variable seperation\n                    fieldValue = formatDate(value, fieldType);\n                    rowObject[key] = fieldValue;\n                } else if (_.isArray(value) && LiveVariableUtils.isStringType(fieldType)) {\n                    // Construct ',' separated string if param is not array type but value is an array\n                    fieldValue = _.join(value, ',');\n                    rowObject[key] = fieldValue;\n                }\n            });\n            // Merge inputFields along with dataObj while making Insert/Update/Delete\n            _.forEach(inputFields, (attrValue, attrName) => {\n                if ((isDefined(attrValue) && attrValue !== '') && (!isDefined(rowObject[attrName]) || rowObject[attrName] === '')) {\n                    rowObject[attrName] = attrValue;\n                }\n            });\n        } else {\n            _.forEach(inputFields, (fieldValue, fieldName) => {\n                let fieldType;\n                const primaryKeys = variable.propertiesMap.primaryFields || variable.propertiesMap.primaryKeys;\n                if (!_.isUndefined(fieldValue) && fieldValue !== '') {\n                    /*For delete action, the inputFields need to be set in the request URL. Hence compositeId is set.\n                     * For insert action inputFields need to be set in the request data. Hence rowObject is set.\n                     * For update action, both need to be set.*/\n                    if (action === 'deleteTableData') {\n                        compositeId = fieldValue;\n                    }\n                    if (action === 'updateTableData') {\n                        primaryKeys.forEach(key => {\n                            if (fieldName === key) {\n                                compositeId = fieldValue;\n                            }\n                        });\n                    }\n                    if (action !== 'deleteTableData' || LiveVariableUtils.isCompositeKey(primaryKey)) {\n                        fieldType = LiveVariableUtils.getFieldType(fieldName, variable);\n                        if (isDateTimeType(fieldType)) {\n                            // ToDo - variable seperation\n                            fieldValue = formatDate(fieldValue, fieldType);\n                        } else if (_.isArray(fieldValue) && LiveVariableUtils.isStringType(fieldType)) {\n                            // Construct ',' separated string if param is not array type but value is an array\n                            fieldValue = _.join(fieldValue, ',');\n                        }\n                        rowObject[fieldName] = fieldValue;\n                    }\n                    // for related entities, clear the blob type fields\n                    if (_.isObject(fieldValue) && !_.isArray(fieldValue)) {\n                        _.forEach(fieldValue, (val, key) => {\n                            if (LiveVariableUtils.getFieldType(fieldName, variable, key) === 'blob') {\n                                fieldValue[key] = val === null ? val : '';\n                            }\n                        });\n                    }\n                }\n            });\n        }\n\n        switch (action) {\n            case 'updateTableData':\n                prevData = options.prevData || {};\n                /*Construct the \"requestData\" based on whether the table associated with the live-variable has a composite key or not.*/\n                if (LiveVariableUtils.isCompositeKey(primaryKey)) {\n                    if (LiveVariableUtils.isNoPrimaryKey(primaryKey)) {\n                        prevCompositeKeysData = prevData || options.rowData || rowObject;\n                        compositeKeysData = rowObject;\n                    } else {\n                        primaryKey.forEach(key => {\n                            compositeKeysData[key] = rowObject[key];\n                            // In case of periodic update for Business temporal fields, passing updated field data.\n                            if (options.period) {\n                                prevCompositeKeysData[key] = rowObject[key];\n                            } else {\n                                prevCompositeKeysData[key] = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];\n                            }\n                        });\n                    }\n                    options.row = compositeKeysData;\n                    options.compositeKeysData = prevCompositeKeysData;\n                } else {\n                    primaryKey.forEach((key) => {\n                        if (key.indexOf('.') === -1) {\n                            id = prevData[key] || (options.rowData && options.rowData[key]) || rowObject[key];\n                        } else {\n                            columnName = key.split('.');\n                            id = prevData[columnName[0]][columnName[1]];\n                        }\n                    });\n                    options.id = id;\n                    options.row = rowObject;\n                }\n\n                break;\n            case 'deleteTableData':\n                /*Construct the \"requestData\" based on whether the table associated with the live-variable has a composite key or not.*/\n                if (LiveVariableUtils.isCompositeKey(primaryKey)) {\n                    if (LiveVariableUtils.isNoPrimaryKey(primaryKey)) {\n                        compositeKeysData = rowObject;\n                    } else {\n                        primaryKey.forEach(key => {\n                            compositeKeysData[key] = rowObject[key];\n                        });\n                    }\n                    options.compositeKeysData = compositeKeysData;\n                } else if (!_.isEmpty(rowObject)) {\n                    primaryKey.forEach(key => {\n                        if (key.indexOf('.') === -1) {\n                            id = rowObject[key];\n                        } else {\n                            columnName = key.split('.');\n                            id = rowObject[columnName[0]][columnName[1]];\n                        }\n                    });\n                    options.id = id;\n                }\n                break;\n            default:\n                break;\n        }\n        // If table has blob column then send multipart data\n        if ((action === 'updateTableData' || action === 'insertTableData') && LiveVariableUtils.hasBlob(variable) && isFormDataSupported) {\n            if (action === 'updateTableData') {\n                action = 'updateMultiPartTableData';\n            } else {\n                action = 'insertMultiPartTableData';\n            }\n            rowObject = LiveVariableUtils.prepareFormData(variable, rowObject);\n        }\n        /*Check if \"options\" have the \"compositeKeysData\" property.*/\n        if (options.compositeKeysData) {\n            switch (action) {\n                case 'updateTableData':\n                    action = 'updateCompositeTableData';\n                    break;\n                case 'deleteTableData':\n                    action = 'deleteCompositeTableData';\n                    break;\n                case 'updateMultiPartTableData':\n                    action = 'updateMultiPartCompositeTableData';\n                    break;\n                default:\n                    break;\n            }\n            compositeId = LiveVariableUtils.getCompositeIDURL(options.compositeKeysData);\n        }\n        dbName = variable.liveSource;\n\n        /*Set the \"data\" in the request to \"undefined\" if there is no data.\n        * This handles cases such as \"Delete\" requests where data should not be passed.*/\n        if (_.isEmpty(rowObject) && action === 'deleteTableData') {\n            rowObject = undefined;\n        }\n\n        if ((action === 'updateCompositeTableData' || action === 'deleteCompositeTableData') && options.period) {\n            // capitalize first character\n            action = 'period' + action.charAt(0).toUpperCase() + action.substr(1);\n        }\n\n        const dbOperations = {\n            'projectID': projectID,\n            'service': variable._prefabName ? '' : 'services',\n            'dataModelName': dbName,\n            'entityName': variable.type,\n            'id': !_.isUndefined(options.id) ? encodeURIComponent(options.id) : compositeId,\n            'data': rowObject,\n            'url': variable._prefabName ? ($rootScope.project.deployedUrl + '/prefabs/' + variable._prefabName) : $rootScope.project.deployedUrl\n        };\n\n        onCUDerror = (response: any, reject: any) => {\n            const errMsg = response.error;\n            const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(response);\n            // EVENT: ON_RESULT\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, errMsg, advancedOptions);\n            // EVENT: ON_ERROR\n            if (!options.skipNotification) {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions);\n            }\n            // EVENT: ON_CAN_UPDATE\n            variable.canUpdate = true;\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);\n            triggerFn(error, errMsg);\n            reject(errMsg);\n        };\n\n        onCUDsuccess = (data: any, resolve: any) => {\n            let response = data.body;\n            const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(data);\n\n            $queue.process(variable);\n            /* if error received on making call, call error callback */\n            if (response && response.error) {\n                // EVENT: ON_RESULT\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n                // EVENT: ON_ERROR\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response.error, advancedOptions);\n                // EVENT: ON_CAN_UPDATE\n                variable.canUpdate = true;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response.error, advancedOptions);\n                triggerFn(error, response.error);\n                return Promise.reject(response.error);\n            }\n\n            // EVENT: ON_RESULT\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n            if (variable.operation !== 'read') {\n                // EVENT: ON_PREPARESETDATA\n                const newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, response, advancedOptions);\n                if (newDataSet) {\n                    // setting newDataSet as the response to service variable onPrepareSetData\n                    response = newDataSet;\n                }\n                variable.dataSet = response;\n            }\n\n            // watchers should get triggered before calling onSuccess event.\n            // so that any variable/widget depending on this variable's data is updated\n            variable.notify(VariableEvents.AFTER_INVOKE, [this, response])\n            setTimeout(() => {\n                // EVENT: ON_SUCCESS\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, response, advancedOptions);\n                // EVENT: ON_CAN_UPDATE\n                variable.canUpdate = true;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, response, advancedOptions);\n            });\n            triggerFn(success, response);\n            resolve(response);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, action, dbOperations).then(data => {\n                onCUDsuccess(data, resolve);\n            }, response => {\n                onCUDerror(response, reject);\n            });\n        });\n    }\n\n\n\n    private aggregateData(deployedUrl, variable, options, success, error) {\n        let tableOptions,\n            dbOperationOptions,\n            aggregateDataSuccess,\n            aggregateDataError;\n        const dbOperation = 'executeAggregateQuery';\n        options = options || {};\n        options.skipEncode = true;\n        if (variable.filterFields) {\n            tableOptions = LiveVariableUtils.prepareTableOptions(variable, options);\n            options.aggregations.filter = tableOptions.query;\n        }\n        dbOperationOptions = {\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'page': options.page || 1,\n            'size': options.size || variable.maxResults,\n            'sort': options.sort || '',\n            'url': deployedUrl,\n            'data': options.aggregations\n        };\n        aggregateDataSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                if ((response && response.error) || !response) {\n                    triggerFn(error, response.error);\n                    return;\n                }\n                triggerFn(success, response);\n                resolve(response);\n            }\n        };\n        aggregateDataError = (errorMsg: any, reject: any) => {\n            triggerFn(error, errorMsg);\n            reject(errorMsg);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                aggregateDataSuccess(response, resolve);\n            }, err => {\n                aggregateDataError(err, reject);\n            });\n        });\n    }\n\n\n    // *********************************************************** PUBLIC ***********************************************************//\n\n    /**\n     * Makes http call for a Live Variable against the configured DB Entity.\n     * Gets the paginated records against the entity\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public listRecords(variable, options, success, error) {\n        options = options || {};\n        options.filterFields = options.filterFields || getClonedObject(variable.filterFields);\n        return $queue.submit(variable).then(() => {\n            this.notifyInflight(variable, !options.skipToggleState, undefined, options);\n            return this.getEntityData(variable, options, success, error)\n                .then((response) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, response);\n                    return Promise.resolve(response);\n                }, (err) => {\n                    $queue.process(variable);\n                    this.notifyInflight(variable, false, err);\n                    return Promise.reject(err);\n                });\n        }, error);\n    }\n\n    /**\n     * Makes a POST http call for a Live Variable against the configured DB Entity.\n     * Sends a Table record object with the request body\n     * the record is inserted into the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public insertRecord(variable, options, success, error) {\n        return this.performCUD('insertTableData', variable, options, success, error);\n    }\n\n    /**\n     * Makes a PUT http call for a Live Variable against the configured DB Entity.\n     * Sends a Table record object with the request body against the primary key of an existing record\n     * the record is updated into the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public updateRecord(variable, options, success, error) {\n        return this.performCUD('updateTableData', variable, options, success, error);\n    }\n\n    /**\n     * Makes a DELETE http call for a Live Variable against the configured DB Entity.\n     * Sends the primary key of an existing record\n     * the record is deleted from the entity at the backend\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}: will be resolved on successful data fetch\n     */\n    public deleteRecord(variable, options, success, error) {\n        return this.performCUD('deleteTableData', variable, options, success, error);\n    }\n\n    /**\n     * sets the value against passed key on the \"inputFields\" object in the variable\n     * @param variable\n     * @param key: can be:\n     *  - a string e.g. \"username\"\n     *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n     * @param val\n     * - if key is string, the value against it (for that data type)\n     * - if key is object, not required\n     * @param options\n     * @returns {any}\n     */\n    public setInput(variable, key, val, options) {\n        variable.inputFields = variable.inputFields || {};\n        return setInput(variable.inputFields, key, val, options);\n    }\n\n    /**\n     * sets the value against passed key on the \"filterFields\" object in the variable\n     * @param variable\n     * @param key: can be:\n     *  - a string e.g. \"username\"\n     *  - an object, e.g. {\"username\": \"john\", \"ssn\": \"11111\"}\n     * @param val\n     * - if key is string, the value against it (for that data type)\n     * - if key is object, not required\n     * @param options\n     * @returns {any}\n     */\n    public setFilter(variable, key, val) {\n        let paramObj: any = {},\n            targetObj: any = {};\n        if (_.isObject(key)) {\n            paramObj = key;\n        } else {\n            paramObj[key] = val;\n        }\n\n        if (!variable.filterExpressions || _.isEmpty(variable.filterExpressions)) {\n            variable.filterExpressions = {'condition': 'AND', 'rules': []};\n        }\n        targetObj = variable.filterExpressions;\n\n        // find the existing criteria if present or else return null. Find the first one and return.\n        // If the user wants to set a different object, then he has to use the getCriteria API defined\n        // on the dataFilter object passed to the onBeforeListRecords\n        function getExistingCriteria(filterField) {\n            let existingCriteria = null;\n            LiveVariableUtils.traverseFilterExpressions(targetObj, function (filterExpressions, criteria) {\n                if (filterField === criteria.target) {\n                    return existingCriteria = criteria;\n                }\n            });\n            return existingCriteria;\n        }\n\n        _.forEach(paramObj, function (paramVal, paramKey) {\n            const existingCriteria = getExistingCriteria(paramKey);\n            if (existingCriteria !== null) {\n                existingCriteria.value = paramVal;\n            } else {\n                targetObj.rules.push({\n                    target: paramKey,\n                    type: '',\n                    matchMode: '',\n                    value: paramVal,\n                    required: false\n                });\n            }\n        });\n\n        return targetObj;\n    }\n\n    /**\n     * Makes a file download call for a table\n     * @param variable\n     * @param options\n     */\n    public download(variable, options, successHandler, errorHandler) {\n        options = options || {};\n        let tableOptions,\n            dbOperationOptions,\n            downloadSuccess,\n            downloadError;\n        const data: any = {};\n        const dbOperation = 'exportTableData';\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        options.data.searchWithQuery = true; // For export, query api is used. So set this flag to true\n        options.data.skipEncode = true;\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options.data, undefined);\n        data.query = tableOptions.query ? tableOptions.query : '';\n        data.exportSize = options.data.exportSize;\n        data.exportType = options.data.exportType;\n        data.fields = formatExportExpression(options.data.fields);\n        if (options.data.fileName) {\n            data.fileName = options.data.fileName;\n        }\n        dbOperationOptions = {\n            'projectID': projectID,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': variable.type,\n            'sort': tableOptions.sort,\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl,\n            'data': data,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options)\n            // 'filterMeta'    : tableOptions.filter\n        };\n        downloadSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                window.location.href = response.body.result;\n                triggerFn(successHandler, response);\n                resolve(response);\n            }\n        };\n        downloadError = (err: any, reject: any) => {\n            const opt: AdvancedOptions = this.prepareCallbackOptions(err.details);\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, err.error, opt);\n            triggerFn(errorHandler, err.error);\n            reject(err);\n        };\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                downloadSuccess(response, resolve);\n            }, (error) => {\n                downloadError(error, reject);\n            });\n        });\n    }\n\n    /**\n     * gets primary keys against the passed related Table\n     * @param variable\n     * @param relatedField\n     * @returns {any}\n     */\n    public getRelatedTablePrimaryKeys(variable, relatedField) {\n        let primaryKeys,\n            result,\n            relatedCols;\n        if (!variable.propertiesMap) {\n            return;\n        }\n        result = _.find(variable.propertiesMap.columns || [], {'fieldName': relatedField});\n        // if related field name passed, get its type from columns inside the current field\n        if (result) {\n            relatedCols = result.columns;\n            primaryKeys = _.map(_.filter(relatedCols, 'isPrimaryKey'), 'fieldName');\n            if (primaryKeys.length) {\n                return primaryKeys;\n            }\n            if (relatedCols && relatedCols.length) {\n                relatedCols = _.find(relatedCols, {'isRelated': false});\n                return relatedCols && relatedCols.fieldName;\n            }\n        }\n    }\n\n    /**\n     * Makes HTTP call to get the data for related entity of a field in an entity\n     * @param variable\n     * @param columnName\n     * @param options\n     * @param success\n     * @param error\n     */\n    public getRelatedTableData(variable, columnName, options, success, error) {\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        const relatedTable = _.find(variable.relatedTables, table => table.relationName === columnName || table.columnName === columnName); // Comparing column name to support the old projects\n        const selfRelatedCols = _.map(_.filter(variable.relatedTables, o => o.type === variable.type), 'relationName');\n        const filterFields = [];\n        let orderBy,\n            filterOptions,\n            query,\n            action,\n            dbOperationOptions,\n            getRelatedTableDataSuccess,\n            getRelatedTableDataError;\n        _.forEach(options.filterFields, (value, key) => {\n            value.fieldName = key;\n            value.type = LiveVariableUtils.getFieldType(columnName, variable, key);\n            /**\n             * for 'in' mode we are taking the input as comma separated values and for between in ui there are two different fields\n             * but these are processed and merged into a single value with comma as separator. For these conditions like 'in' and 'between',\n             * for building the query, the function expects the values to be an array\n             */\n            if (value.filterCondition === DB_CONSTANTS.DATABASE_MATCH_MODES.in.toLowerCase() || value.filterCondition === DB_CONSTANTS.DATABASE_MATCH_MODES.between.toLowerCase()) {\n                value.value = value.value.split(',');\n            }\n            filterFields.push(value);\n        });\n        filterOptions = LiveVariableUtils.getFilterOptions(variable, filterFields, options);\n        query = LiveVariableUtils.getSearchQuery(filterOptions, ' ' + (options.logicalOp || 'AND') + ' ', variable.ignoreCase);\n        if (options.filterExpr) {\n            const _clonedFields = getClonedObject(_.isObject(options.filterExpr) ? options.filterExpr : JSON.parse(options.filterExpr));\n            LiveVariableUtils.processFilterFields(_clonedFields.rules, variable, options);\n            const filterExpQuery = LiveVariableUtils.generateSearchQuery(_clonedFields.rules, _clonedFields.condition, variable.ignoreCase, options.skipEncode);\n            if (query !== '') {\n                if (filterExpQuery !== '') {\n                    query = '(' + query + ') AND (' + filterExpQuery + ')';\n                }\n            } else if (filterExpQuery !== '') {\n                query = filterExpQuery;\n            }\n        }\n        query = query ? ('q=' + query) : '';\n        action = 'searchTableDataWithQuery';\n        orderBy = _.isEmpty(options.orderBy) ? '' : 'sort=' + options.orderBy;\n        dbOperationOptions = {\n            projectID: projectID,\n            service: variable.getPrefabName() ? '' : 'services',\n            dataModelName: variable.liveSource,\n            entityName: relatedTable ? relatedTable.type : '',\n            page: options.page || 1,\n            size: options.pagesize || undefined,\n            url: variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl,\n            data: query || '',\n            filter: LiveVariableUtils.getWhereClauseGenerator(variable, options),\n            sort: orderBy\n        };\n        getRelatedTableDataSuccess = (res: any, resolve: any) => {\n            if (res && res.type) {\n                const response = res.body;\n                /*Remove the self related columns from the data. As backend is restricting the self related column to one level, In liveform select, dataset and datavalue object\n                 * equality does not work. So, removing the self related columns to acheive the quality*/\n                const data = _.map(response.content, o => _.omit(o, selfRelatedCols));\n\n                const pagination = Object.assign({}, response);\n                delete pagination.content;\n                decodeData(data);\n                const result = {data: data, pagination};\n                triggerFn(success, result);\n\n                resolve(result);\n            }\n        };\n        getRelatedTableDataError = (errMsg: any, reject: any) => {\n            triggerFn(error, errMsg);\n            reject(errMsg);\n        };\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, action, dbOperationOptions).then((response) => {\n                getRelatedTableDataSuccess(response, resolve);\n            }, err => {\n                getRelatedTableDataError(err, reject);\n            });\n        });\n    }\n\n    /**\n     * Gets the distinct records for an entity\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     */\n    public getDistinctDataByFields(variable, options, success, error) {\n        const dbOperation = 'getDistinctDataByFields';\n        const projectID = $rootScope.project.id || $rootScope.projectName;\n        const requestData: any = {};\n        let sort;\n        let tableOptions,\n            dbOperationOptions,\n            getDistinctDataByFieldsSuccess,\n            getDistinctDataByFieldsError;\n        options.skipEncode = true;\n        options.operation = 'read';\n        options = options || {};\n        tableOptions = LiveVariableUtils.prepareTableOptions(variable, options);\n        if (tableOptions.query) {\n            requestData.filter = tableOptions.query;\n        }\n        requestData.groupByFields = _.isArray(options.fields) ? options.fields : [options.fields];\n        sort = options.sort || requestData.groupByFields[0] + ' asc';\n        sort = sort ? 'sort=' + sort : '';\n        dbOperationOptions = {\n            'projectID': projectID,\n            'service': variable.getPrefabName() ? '' : 'services',\n            'dataModelName': variable.liveSource,\n            'entityName': options.entityName || variable.type,\n            'page': options.page || 1,\n            'size': options.pagesize,\n            'sort': sort,\n            'data': requestData,\n            'filter': LiveVariableUtils.getWhereClauseGenerator(variable, options),\n            'url': variable.getPrefabName() ? ($rootScope.project.deployedUrl + '/prefabs/' + variable.getPrefabName()) : $rootScope.project.deployedUrl\n        };\n        getDistinctDataByFieldsSuccess = (response: any, resolve: any) => {\n            if (response && response.type) {\n                if ((response && response.error) || !response) {\n                    triggerFn(error, response.error);\n                    return Promise.reject(response.error);\n                }\n                let result = response.body;\n                const pagination = Object.assign({}, response.body);\n                delete pagination.content;\n\n                result = {data: result.content, pagination};\n                triggerFn(success, result);\n                resolve(result);\n            }\n        };\n        getDistinctDataByFieldsError = (errorMsg: any, reject: any) => {\n            triggerFn(error, errorMsg);\n            reject(errorMsg);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.makeCall(variable, dbOperation, dbOperationOptions).then((response) => {\n                getDistinctDataByFieldsSuccess(response, resolve);\n            }, () => {\n                getDistinctDataByFieldsError(error, reject);\n            });\n        });\n    }\n\n    /*Function to get the aggregated data based on the fields chosen*/\n    public getAggregatedData(variable, options, success, error) {\n        const deployedURL = appManager.getDeployedURL();\n        if (deployedURL) {\n            return this.aggregateData(deployedURL, variable, options, success, error);\n        }\n    }\n\n    public defineFirstLastRecord(variable) {\n        if (variable.operation === 'read') {\n            Object.defineProperty(variable, 'firstRecord', {\n                'configurable': true,\n                'get': () => {\n                    return _.get(variable.dataSet, 'data[0]', {});\n                }\n            });\n            Object.defineProperty(variable, 'lastRecord', {\n                'configurable': true,\n                'get': () => {\n                    const data = _.get(variable.dataSet, 'data', []);\n                    return data[data.length - 1];\n                }\n            });\n        }\n    }\n\n    public getPrimaryKey(variable) {\n        return LiveVariableUtils.getPrimaryKey(variable);\n    }\n\n    // Returns the search query params.\n    public prepareRequestParams(options) {\n        let requestParams;\n\n        const searchKeys = _.split(options.searchKey, ','),\n            matchModes = _.split(options.matchMode, ','),\n            formFields = {};\n\n        _.forEach(searchKeys, (colName, index) => {\n            formFields[colName] = {\n                value: options.query,\n                logicalOp: 'AND',\n                matchMode: matchModes[index] || matchModes[0] || 'startignorecase'\n            };\n        });\n\n        requestParams = {\n            filterFields: formFields,\n            page: options.page,\n            pagesize: options.limit || options.pagesize,\n            skipDataSetUpdate: true, // dont update the actual variable dataset,\n            skipToggleState: true, // Dont change the variable toggle state as this is a independent call\n            inFlightBehavior: 'executeAll',\n            logicalOp: 'OR',\n            orderBy: options.orderby ? _.replace(options.orderby, /:/g, ' ') : ''\n        };\n\n        if (options.onBeforeservicecall) {\n            options.onBeforeservicecall(formFields);\n        }\n\n        return requestParams;\n    }\n\n    /**\n     * Gets the filtered records based on searchKey\n     * @param variable\n     * @param options contains the searchKey and queryText\n     * @param success\n     * @param error\n     * @returns {Promise<any>}\n     */\n    public searchRecords(variable, options, success, error) {\n        const requestParams = this.prepareRequestParams(options);\n\n        return this.listRecords(variable, requestParams, success, error);\n    }\n\n    /**\n     * used in onBeforeUpdate call - called last in the function - used in old Variables using dataBinding.\n     * This function migrates the old data dataBinding to filterExpressions equivalent format\n     * @param variable\n     * @param inputData\n     * @private\n     */\n    public upgradeInputDataToFilterExpressions(variable, response, inputData) {\n        if (_.isObject(response)) {\n            inputData = response;\n            inputData.condition = 'AND';\n            inputData.rules = [];\n        }\n        /**\n         * if the user deletes a particular criteria, we need to remove this form our data aswell.\n         * so we are keeping a copy of it and the emptying the existing object and now fill it with the\n         * user set criteria. If its just modified, change the data and push it tohe rules or else just add a new criteria\n         */\n        const clonedRules = _.cloneDeep(inputData.rules);\n        inputData.rules = [];\n        _.forEach(inputData, function (valueObj, key) {\n            if (key !== 'condition' && key !== 'rules') {\n                const filteredObj = _.find(clonedRules, o => o.target === key);\n                // if the key is found update the value, else create a new rule obj and add it to the existing rules\n                if (filteredObj) {\n                    filteredObj.value = valueObj.value;\n                    filteredObj.matchMode = valueObj.matchMode || valueObj.filterCondition || filteredObj.matchMode || '';\n                    inputData.rules.push(filteredObj);\n                } else {\n                    inputData.rules.push({\n                        'target': key,\n                        'type': '',\n                        'matchMode': valueObj.matchMode || valueObj.filterCondition || '',\n                        'value': valueObj.value,\n                        'required': false\n                    });\n                }\n                delete inputData[key];\n            }\n        });\n        return inputData;\n    }\n\n    /**\n     * used in onBeforeUpdate call - called first in the function - used in old Variables using dataBinding.\n     * This function migrates the filterExpressions object to flat map structure\n     * @param variable\n     * @param inputData\n     * @private\n     */\n    public downgradeFilterExpressionsToInputData(variable, inputData) {\n        if (inputData.hasOwnProperty('getFilterFields')) {\n            inputData = inputData.getFilterFields();\n        }\n        _.forEach(inputData.rules, function (ruleObj) {\n            if (!_.isNil(ruleObj.target) && ruleObj.target !== '') {\n                inputData[ruleObj.target] = {\n                    'value': ruleObj.value,\n                    'matchMode': ruleObj.matchMode\n                };\n            }\n        });\n        return inputData;\n    }\n\n    public cancel(variable, options) {\n        if ($queue.requestsQueue.has(variable) && variable._observable) {\n            variable._observable.unsubscribe();\n            $queue.process(variable);\n            // notify inflight variable\n            this.notifyInflight(variable, false);\n        }\n    }\n}\n"]}