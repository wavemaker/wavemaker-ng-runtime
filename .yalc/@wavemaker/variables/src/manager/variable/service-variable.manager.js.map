{"version":3,"file":"service-variable.manager.js","sourceRoot":"./","sources":["src/manager/variable/service-variable.manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { getClonedObject, getValidJSON, isDefined, isPageable, isValidWebURL, triggerFn, noop, xmlToJson } from \"../../util/utils\";\n\nimport { upload } from '../../util/file-upload.util';\nimport { ServiceVariable } from '../../model/variable/service-variable';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\nimport { $queue } from '../../util/inflight-queue';\nimport { BaseVariableManager } from './base-variable.manager';\nimport { CONSTANTS, VARIABLE_CONSTANTS, WS_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager, formatExportExpression, setInput, decodeData, metadataService, getErrMessage } from './../../util/variable/variables.utils';\nimport { getEvaluatedOrderBy, initiateCallback, securityService } from '../../util/variable/variables.utils';\nimport { getAccessToken, performAuthorization, removeAccessToken } from '../../util/oAuth.utils';\nimport { AdvancedOptions } from '../../advanced-options';\nimport { PaginationUtils } from '../../util/variable/pagination.utils';\nimport { VariableEvents } from \"../../model/base-variable\";\n\nimport _ from \"lodash\";\n\nexport class ServiceVariableManager extends BaseVariableManager {\n\n    fileUploadResponse: any = [];\n    fileUploadCount = 0;\n    totalFilesCount = 0;\n    successFileUploadCount = 0;\n    failedFileUploadCount = 0;\n\n    /**\n     * function to process error response from a service\n     * @param {ServiceVariable} variable\n     * @param {string} errMsg\n     * @param {Function} errorCB\n     * @param xhrObj\n     * @param {boolean} skipNotification\n     * @param {boolean} skipDefaultNotification\n     */\n    protected processErrorResponse(variable: ServiceVariable, errMsg: string, errorCB: Function, xhrObj?: any, skipNotification?: boolean, skipDefaultNotification?: boolean, ) {\n        const methodInfo = this.getMethodInfo(variable, {}, {});\n        const securityDefnObj = _.get(methodInfo, 'securityDefinitions.0');\n        const advancedOptions: AdvancedOptions = this.prepareCallbackOptions(xhrObj);\n        // EVENT: ON_ERROR\n        if (!skipNotification) {\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, errMsg, advancedOptions, skipDefaultNotification);\n        }\n        if (_.get(securityDefnObj, 'type') === VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2\n            && _.includes([VARIABLE_CONSTANTS.HTTP_STATUS_CODE.UNAUTHORIZED, VARIABLE_CONSTANTS.HTTP_STATUS_CODE.FORBIDDEN], _.get(xhrObj, 'status'))) {\n            removeAccessToken(securityDefnObj['x-WM-PROVIDER_ID']);\n        }\n        /* trigger error callback */\n        triggerFn(errorCB, errMsg);\n\n       if (!CONSTANTS.isStudioMode) {\n            /* process next requests in the queue */\n            variable.canUpdate = true;\n            $queue.process(variable);\n\n            // EVENT: ON_CAN_UPDATE\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, errMsg, advancedOptions);\n       }\n    }\n\n    /**\n     * function to process success response from a service\n     * @param response\n     * @param variable\n     * @param options\n     * @param success\n     */\n    protected processSuccessResponse(response, variable, options, success, resHeaders?, operationInf?) {\n        let dataSet;\n        let newDataSet;\n        let pagination = {};\n        let advancedOptions: AdvancedOptions;\n        let jsonParsedResponse: any = getValidJSON(response);\n\n        response = isDefined(jsonParsedResponse) ? jsonParsedResponse : (xmlToJson(response) || response);\n\n        const isResponsePageable = isPageable(response);\n        if (variable.serviceType === 'DataService' || variable.serviceType === 'JavaService') {\n            const decodedData = decodeData(response);\n            if (_.isString(response)) {\n                response = decodedData;\n            }\n        }\n        if (isResponsePageable) {\n            dataSet = response.content;\n            pagination = _.omit(response, 'content');\n        } else {\n            dataSet = response;\n        }\n        /**\n         * send pagination object with advancedOptions all the time.\n         * With this, user can provide pagination option, even if it is not there.\n         * applicable to 3rd party services that do not support pagination out of the box.\n         */\n        advancedOptions = this.prepareCallbackOptions(options.xhrObj, {pagination: pagination, rawData: dataSet});\n\n        // EVENT: ON_RESULT\n        initiateCallback(VARIABLE_CONSTANTS.EVENT.RESULT, variable, response, advancedOptions);\n\n        // trigger success callback, pass data received from server as it is.\n        triggerFn(success, response, pagination);\n\n        /* if dataTransformation enabled, transform the data */\n        if (variable.transformationColumns) {\n            this.transformData(response, variable);\n        }\n\n        // if a primitive type response is returned, wrap it in an object\n        dataSet = (!_.isObject(dataSet)) ? {'value': dataSet} : dataSet;\n\n        // EVENT: ON_PREPARE_SETDATA\n        newDataSet = initiateCallback(VARIABLE_CONSTANTS.EVENT.PREPARE_SETDATA, variable, dataSet, advancedOptions);\n        if (isDefined(newDataSet)) {\n            // setting newDataSet as the response to service variable onPrepareSetData\n            dataSet = newDataSet;\n        }\n\n        const inputFields = getClonedObject(options.inputFields || variable.dataBinding);\n\n        // WMS-22361 : For crud variable, apply operation info recived else deduce for service variables\n        const operationInfo = operationInf ? operationInf : this.getMethodInfo(variable, inputFields, options);\n        const paginationInfo = PaginationUtils.getPaginationInfo(operationInfo, variable);\n        if (paginationInfo) {\n            const res = PaginationUtils.generatePaginationRes(operationInfo, paginationInfo, response, resHeaders, options, variable);\n            if (!_.isEmpty(res)) {\n                PaginationUtils.setVariablePagination(variable, res, options);\n            }\n        }\n\n        /* update the dataset against the variable, if response is non-object, insert the response in 'value' field of dataSet */\n        if (!options.forceRunMode && !options.skipDataSetUpdate) {\n            if (!variable._paginationConfig) {\n                variable.pagination = pagination;\n            }\n            variable.dataSet = dataSet;\n\n            // legacy properties in dataSet, [content]\n            if (isResponsePageable) {\n                Object.defineProperty(variable.dataSet, 'content', {\n                    get: () => {\n                        return variable.dataSet;\n                    }\n                });\n            }\n        }\n        variable.notify(VariableEvents.AFTER_INVOKE, [this, dataSet]);\n        setTimeout(() => {\n            // EVENT: ON_SUCCESS\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, dataSet, advancedOptions);\n           if (!CONSTANTS.isStudioMode) {\n                /* process next requests in the queue */\n                variable.canUpdate = true;\n                $queue.process(variable);\n            }\n\n            // EVENT: ON_CAN_UPDATE\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.CAN_UPDATE, variable, dataSet, advancedOptions);\n        });\n\n        return {\n            data: variable.dataSet,\n            pagination: variable.pagination\n        };\n    }\n\n    protected uploadFileInFormData(variable: ServiceVariable, options: any, success: Function, error: Function, file, requestParams) {\n        const promise = upload(file, variable, requestParams.data, {\n            fileParamName: 'files',\n            url: requestParams.url\n        });\n        (promise as any).then((data) => {\n            this.fileUploadCount++;\n            this.successFileUploadCount++;\n            this.fileUploadResponse.push(data[0]);\n            if (this.totalFilesCount === this.fileUploadCount) {\n                if (this.failedFileUploadCount === 0) {\n                    this.processSuccessResponse(this.fileUploadResponse, variable, options, success);\n                    this.fileUploadResponse = [];\n                    if (!variable.onSuccess) {\n                        appManager && appManager.notifyApp(appManager.getAppLocale().MESSAGE_FILE_UPLOAD_SUCCESS, 'success');\n                    }\n                } else {\n                    initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, this.fileUploadResponse);\n                    this.fileUploadResponse = [];\n                    appManager && appManager.notifyApp(appManager.getAppLocale().MESSAGE_FILE_UPLOAD_ERROR, 'error');\n                }\n                this.fileUploadCount = 0;\n                this.successFileUploadCount = 0;\n                this.totalFilesCount = 0;\n            }\n            return data;\n        }, (e) => {\n            this.fileUploadCount++;\n            this.failedFileUploadCount++;\n            this.fileUploadResponse.push(e);\n            const errMsg = getErrMessage(e, variable.httpService.getLocale());\n            // if a file upload failed, notify the progress listener to take action\n            if (variable._progressObservable) {\n                variable._progressObservable.next({\n                    'status': \"error\",\n                    'fileName': file.name,\n                    'errMsg': errMsg\n                });\n            }\n            if (this.totalFilesCount === this.fileUploadCount) {\n                this.processErrorResponse(variable, errMsg, error, e, options.skipNotification);\n                this.fileUploadResponse = [];\n                this.fileUploadCount = 0;\n                this.failedFileUploadCount = 0;\n                this.totalFilesCount = 0;\n            }\n            return e;\n        }, (data) => {\n            if (variable._progressObservable) {\n                variable._progressObservable.next({\n                    'progress': data,\n                    'status': VARIABLE_CONSTANTS.EVENT.PROGRESS,\n                    'fileName': file.name});\n            }\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.PROGRESS, variable, data);\n            return data;\n        });\n        return promise;\n    }\n\n    /**\n     * Checks if the user is logged in or not and returns appropriate error\n     * If user is not logged in, Session timeout logic is run, for user to login\n     * @param variable\n     * @returns {any}\n     */\n    private handleAuthError(variable, success, errorCB, options) {\n        const isUserAuthenticated = _.get(securityService.get(), 'authenticated');\n        let info;\n\n        if (isUserAuthenticated) {\n            info = {\n                error: {\n                    message: 'You\\'re not authorised to access the resource \"' + variable.service + '\".'\n                }\n            };\n        } else {\n            info = {\n                error: {\n                    message: 'You\\'re not authenticated to access the resource \"' + variable.service + '\".',\n                    skipDefaultNotification: true\n                }\n            };\n            appManager.pushToSessionFailureRequests(variable.invoke.bind(variable, options, success, errorCB));\n            appManager.handle401();\n        }\n        console.warn(variable.name + ': ' + info.error.message);\n        return info;\n    }\n\n    /**\n     * Handles error, when variable's metadata is not found. The reason for this can be:\n     *  - API is secure and user is not logged in\n     *  - API is secure and user is logged in but not authorized\n     *  - The servicedefs are not generated properly at the back end (need to edit the variable and re-run the project)\n     * @param info\n     * @param variable\n     * @param errorCB\n     * @param options\n     */\n    protected handleRequestMetaError(info, variable, success, errorCB, options) {\n        const err_type = _.get(info, 'error.type');\n\n        switch (err_type) {\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.NO_ACCESSTOKEN:\n                performAuthorization(undefined, info.securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], this.invoke.bind(this, variable, options, success, errorCB), null, this.getProviderInfo(variable, info.securityDefnObj['x-WM-PROVIDER_ID']));\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, true, true);\n                break;\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.USER_UNAUTHORISED:\n                info = this.handleAuthError(variable, success, errorCB, options);\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                break;\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING:\n            case VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.CRUD_OPERATION_MISSING:\n                if (info.error.message) {\n                    info.error.message = info.error.message.replace('$variable', variable.name);\n                    let reasons;\n                    if (err_type === VARIABLE_CONSTANTS.REST_SERVICE.ERR_TYPE.METADATA_MISSING) {\n                        reasons = ['1. You did not Preview the app after creating a Variable for the imported service.', '2. You deleted the imported service this Variable is linked to.'];\n                    } else {\n                        reasons = ['1. You haven\\'t chosen an endpoint for ' +  options.operation + ' operation for this Entity.'];\n                    }\n                    console.warn(info.error.message + '\\n Possible reasons for this:\\n ' + reasons.join('\\n '));\n                }\n                this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                break;\n            default:\n                if (info.error.message) {\n                    console.warn(info.error.message, variable.name);\n                    this.processErrorResponse(variable, info.error.message, errorCB, options.xhrObj, options.skipNotification, info.error.skipDefaultNotification);\n                }\n        }\n        return info;\n    }\n\n    /**\n     * function to transform the service data as according to the variable configuration\n     * this is used when 'transformationColumns' property is set on the variable\n     * @param data: data returned from the service\n     * @variable: variable object triggering the service\n     */\n    private transformData(data, variable) {\n        data.wmTransformedData = [];\n\n        const columnsArray = variable.transformationColumns,\n            dataArray = _.get(data, variable.dataField) || [],\n            transformedData = data.wmTransformedData;\n\n        _.forEach(dataArray, function (datum, index) {\n            transformedData[index] = {};\n            _.forEach(columnsArray, function (column, columnIndex) {\n                transformedData[index][column] = datum[columnIndex];\n            });\n        });\n    }\n\n\n    /**\n     * gets the service operation info against a service variable\n     * this is extracted from the metadataservice\n     * @param variable\n     * @param inputFields: sample values, if provided, will be set against params in the definition\n     * @param options\n     * @returns {any}\n     */\n    private getMethodInfo(variable, inputFields, options) {\n        let methodInfo;\n        if (!_.isEmpty(metadataService)) {\n            const serviceDef = getClonedObject(metadataService.getByOperationId(variable.operationId, variable.getPrefabName()));\n            methodInfo = serviceDef === null ? null : _.get(serviceDef, 'wmServiceOperationInfo');\n        } else  {\n            methodInfo = variable.serviceInfo;\n        }\n\n        if (!methodInfo) {\n            return methodInfo;\n        }\n        const securityDefnObj = _.get(methodInfo.securityDefinitions, '0'),\n            isOAuthTypeService = securityDefnObj && (securityDefnObj.type === VARIABLE_CONSTANTS.REST_SERVICE.SECURITY_DEFN.OAUTH2);\n        if (methodInfo.parameters) {\n            methodInfo.parameters.forEach(function (param) {\n                // Ignore readOnly params in case of formData file params will be duplicated\n                if (param.readOnly) {\n                    return;\n                }\n                param.sampleValue = inputFields[param.name];\n                /* supporting pagination for query service variable */\n                if (VARIABLE_CONSTANTS.PAGINATION_PARAMS.indexOf(param.name) !== -1) {\n                    if (param.name === 'size') {\n                        param.sampleValue = options.size || param.sampleValue || parseInt(variable.maxResults, 10);\n                    } else if (param.name === 'page') {\n                        param.sampleValue = options.page || param.sampleValue || 1;\n                    } else if (param.name === 'sort') {\n                        param.sampleValue = getEvaluatedOrderBy(variable.orderBy, options.orderBy) || param.sampleValue || '';\n                    }\n                } else if (param.name === 'access_token' && isOAuthTypeService) {\n                    param.sampleValue = getAccessToken(securityDefnObj[VARIABLE_CONSTANTS.REST_SERVICE.OAUTH_PROVIDER_KEY], null);\n                }\n            });\n        }\n        return methodInfo;\n    }\n\n\n    /**\n     * gets the provider info against a service variable's provider\n     * this is extracted from the metadataservice\n     * @param variable\n     * @param providerId\n     * @returns {any}\n     */\n    private getProviderInfo(variable, providerId) {\n        return getClonedObject(metadataService?.getByProviderId(providerId, variable.getPrefabName()));\n    }\n\n    /**\n     * Returns true if any of the files are in onProgress state\n     */\n    private isFileUploadInProgress(dataBindings) {\n        let filesStatus = false;\n        _.forEach(dataBindings, (dataBinding) => {\n            if (_.isArray(dataBinding) && dataBinding[0] instanceof File) {\n                _.forEach(dataBinding, (file) => {\n                    if (file.status === 'onProgress') {\n                        filesStatus = true;\n                        return;\n                    }\n                });\n            }\n        });\n        return filesStatus;\n    }\n\n    // Makes the call for Uploading file/ files\n    protected uploadFile(variable, options, success, error, inputFields, requestParams ) {\n        let fileParamCount = 0;\n        const fileArr: any = [], promArr: any = [];\n        _.forEach(inputFields, (inputField) => {\n            if (_.isArray(inputField)) {\n                if (inputField[0] instanceof File) {\n                    fileParamCount++;\n                }\n                _.forEach(inputField, (input) => {\n                    if (input instanceof File || _.find(_.values(input), o => o instanceof Blob)) {\n                        fileArr.push(input);\n                        this.totalFilesCount++;\n                        fileParamCount = fileParamCount || 1;\n                    }\n                });\n            } else {\n                if (inputField instanceof File) {\n                    fileParamCount++;\n                    this.totalFilesCount++;\n                    fileArr.push(inputField);\n                }\n            }\n        });\n        if (fileParamCount === 1) {\n            if (inputFields.files.length > 1) {\n                _.forEach(fileArr, (file) => {\n                    promArr.push(this.uploadFileInFormData(variable, options, success, error, file, requestParams));\n                });\n                return Promise.all(promArr);\n            } else {\n                return this.uploadFileInFormData(variable, options, success, error, fileArr[0], requestParams);\n            }\n        }\n    }\n\n    /**\n     * proxy for the invoke call\n     * Request Info is constructed\n     * if error found, error is thrown\n     * else, call is made\n     * @param {ServiceVariable} variable\n     * @param options\n     * @param {Function} success\n     * @param {Function} error\n     * @returns {any}\n     * @private\n     */\n    protected _invoke (variable: ServiceVariable, options: any, success: Function, error: Function) {\n        let inputFields = getClonedObject(options.inputFields || variable.dataBinding);\n        // EVENT: ON_BEFORE_UPDATE\n        const output: any = initiateCallback(VARIABLE_CONSTANTS.EVENT.BEFORE_UPDATE, variable, inputFields, options);\n        let successHandler;\n        let errorHandler;\n\n        if (output === false) {\n            $queue.process(variable);\n            triggerFn(error);\n            return;\n        }\n        if (_.isObject(output)) {\n            inputFields = output;\n        }\n\n        const operationInfo = this.getMethodInfo(variable, inputFields, options);\n        const requestParams = ServiceVariableUtils.constructRequestParams(variable, operationInfo, inputFields, options);\n        // check errors\n        if (requestParams.error) {\n            const info = this.handleRequestMetaError(requestParams, variable, success, error, options);\n            const reason = (_.get(info, 'error.message') || 'An error occurred while triggering the variable: ') + ': ' +  variable.name;\n            triggerFn(error);\n            return Promise.reject(reason);\n        }\n\n        // file upload\n        if (ServiceVariableUtils.isFileUploadRequest(variable)) {\n            const uploadPromise = this.uploadFile(variable, options, success, error, inputFields, requestParams);\n            if (uploadPromise) {\n                return uploadPromise;\n            }\n        }\n\n        // file download\n        if (operationInfo && _.isArray(operationInfo.produces) && _.includes(operationInfo.produces, WS_CONSTANTS.CONTENT_TYPES.OCTET_STREAM)) {\n            // ToDo - variable seperation\n            return variable.simulateFileDownload(requestParams, variable.dataBinding.file || variable.name, variable.dataBinding.exportType, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.SUCCESS, variable, null, null, null);\n                $queue.process(variable);\n                triggerFn(success);\n            }, function () {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, null, null, null);\n                $queue.process(variable);\n                triggerFn(error);\n            });\n        }\n\n        // notify variable progress\n        this.notifyInflight(variable, !options.skipToggleState);\n\n        successHandler = (response, resolve) => {\n            if (response && response.type || response && response.status) {\n                const res = response.body || response.data;\n                const data = this.processSuccessResponse(res, variable, _.extend(options, {'xhrObj': response}), success, response.headers);\n                // notify variable success\n                this.notifyInflight(variable, false, data);\n                resolve(response);\n            }\n        };\n\n        errorHandler = (err, reject) => {\n            const errMsg = getErrMessage(err, variable.httpService.getLocale());\n            // notify variable error\n            this.notifyInflight(variable, false);\n            this.processErrorResponse(variable, errMsg, error, err, options.skipNotification);\n            reject({\n                error: errMsg,\n                details: err\n            });\n        };\n\n        // make the call and return a promise to the user to support script calls made by users\n        return new Promise((resolve, reject) => {\n            requestParams.responseType = 'text'; // this is to return text response. JSON & XML-to-JSON parsing is handled in success handler.\n            // ToDo - variable seperation\n            // this.httpCall(requestParams, variable).then((response) => {\n            //     successHandler(response, resolve);\n            // }, err => {\n            //     const validJSON = getValidJSON(err.error);\n            //     err.error = isDefined(validJSON) ? validJSON : err.error;\n            //     errorHandler(err, reject);\n            // });\n            // the _observable property on variable is used store the observable using which the network call is made\n            // this can be used to cancel the variable calls.\n            variable.httpService.sendCall(requestParams, variable).then((response) => {\n                successHandler(response, resolve);\n            }, err => {\n                const validJSON = getValidJSON(err.error);\n                err.error = isDefined(validJSON) ? validJSON : err.error;\n                errorHandler(err, reject);\n            });\n        });\n    }\n\n    // *********************************************************** PUBLIC ***********************************************************//\n\n    public invoke(variable, options, success, error) {\n        options = options || {};\n        // appManager.notify('check-state-persistence-options', {\n        //     options: options,\n        //     variable: variable\n        // });\n        options.inputFields = options.inputFields || getClonedObject(variable.dataBinding);\n        return $queue.submit(variable).then(this._invoke.bind(this, variable, options, success, error), error);\n    }\n\n    public setPagination(variable, data) {\n        variable._paginationConfig = data;\n    }\n\n    public download(variable, options, successHandler, errorHandler) {\n        options = options || {};\n        const inputParams  = getClonedObject(variable.dataBinding);\n        const inputData = options.data || {};\n        const methodInfo   = this.getMethodInfo(variable, inputParams, options);\n        let requestParams;\n\n        methodInfo.relativePath += '/export';\n        requestParams = ServiceVariableUtils.constructRequestParams(variable, methodInfo, inputParams);\n\n        requestParams.data = inputData;\n        requestParams.data.fields = formatExportExpression(inputData.fields || []);\n\n        // extra options provided, these may be used in future for integrating export feature with ext. services\n        requestParams.method = options.httpMethod || 'POST';\n        requestParams.url = options.url || requestParams.url;\n\n        // If request params returns error then show an error toaster\n        if (_.hasIn(requestParams, 'error.message')) {\n            triggerFn(errorHandler, requestParams.error.message);\n            return Promise.reject(requestParams.error.message);\n        }\n        return variable.httpService.send(requestParams).then(response => {\n            if (response && isValidWebURL(response.body.result)) {\n                window.location.href = response.body.result;\n                triggerFn(successHandler, response);\n            } else {\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response);\n                triggerFn(errorHandler, response);\n            }\n        }, (response, xhrObj) => {\n            initiateCallback(VARIABLE_CONSTANTS.EVENT.ERROR, variable, response, xhrObj);\n            triggerFn(errorHandler, response);\n        });\n    }\n\n    public getInputParms(variable) {\n        let wmServiceOperationInfo;\n        if (!_.isEmpty(metadataService)) {\n            wmServiceOperationInfo = _.get(metadataService.getByOperationId(variable.operationId, variable.getPrefabName()), 'wmServiceOperationInfo');\n        } else {\n            wmServiceOperationInfo = variable.serviceInfo;\n        }\n        return _.get(wmServiceOperationInfo, 'parameters');\n    }\n\n    public setInput(variable, key, val, options) {\n        return setInput(variable.dataBinding, key, val, options);\n    }\n\n    /**\n     * Cancels an on going service request\n     * @param variable\n     * @param $file\n     */\n    public cancel(variable, $file?) {\n        // CHecks if there is any pending requests in the queue\n        if ($queue.requestsQueue.has(variable)) {\n            // If the request is a File upload request then modify the elements associated with file upload\n            // else unsubscribe from the observable on the variable.\n            if (ServiceVariableUtils.isFileUploadRequest(variable)) {\n                variable.httpService.cancel(variable, $file);\n                $file.status = 'abort';\n                this.totalFilesCount--;\n                initiateCallback(VARIABLE_CONSTANTS.EVENT.ABORT, variable, $file);\n                if (!this.isFileUploadInProgress(variable.dataBinding) && this.totalFilesCount === 0) {\n                    $queue.process(variable);\n                    // notify inflight variable\n                    this.notifyInflight(variable, false);\n                }\n            } else {\n                if (variable.httpService.cancel) {\n                    variable.httpService.cancel(variable);\n                    $queue.process(variable);\n                    // notify inflight variable\n                    this.notifyInflight(variable, false);\n                }\n            }\n        }\n    }\n\n    public defineFirstLastRecord(variable) {\n        if (variable.isList) {\n            Object.defineProperty(variable, 'firstRecord', {\n                'configurable': true,\n                'get': function () {\n                    const dataSet = variable.dataSet;\n                    // For procedure(v1) data doesn't come under content\n                    return _.head(dataSet && dataSet.content) || _.head(dataSet) || {};\n                }\n            });\n            Object.defineProperty(variable, 'lastRecord', {\n                'configurable': true,\n                'get': function () {\n                    const dataSet = variable.dataSet;\n                    // For procedure(v1) data doesn't come under content\n                    return _.last(dataSet && dataSet.content) || _.last(dataSet) || {};\n                }\n            });\n        }\n    }\n\n    // Gets the input params of the service variable and also add params from the searchKeys (filterfields)\n    private getQueryParams(filterFields, searchValue, variable) {\n        const inputParams = this.getInputParms(variable);\n        const queryParams = ServiceVariableUtils.excludePaginationParams(inputParams);\n        const inputFields = {};\n\n        // check if some param value is already available in databinding and update the inputFields accordingly\n        _.map(variable.dataBinding, function (value, key) {\n            inputFields[key] = value;\n        });\n\n        // add the query params mentioned in the searchkey to inputFields\n        _.forEach(filterFields, function (value) {\n            if (_.includes(queryParams, value)) {\n                inputFields[value] = searchValue;\n            }\n        });\n\n        return inputFields;\n    }\n\n    /**\n     * This method returns filtered records based on searchKey and queryText.\n     * @param variable\n     * @param options\n     * @param success\n     * @param error\n     * @returns {Promise<any>}\n     */\n    public searchRecords(variable, options, success, error) {\n        const inputFields = this.getQueryParams(_.split(options.searchKey, ','), options.query, variable);\n\n        const requestParams = {\n            page: options.page,\n            pagesize: options.pagesize,\n            skipDataSetUpdate: true, // dont update the actual variable dataset,\n            skipToggleState: true, // Dont change the varibale toggle state as this is a independent call\n            inFlightBehavior: 'executeAll',\n            inputFields: inputFields\n        };\n\n        if (options.onBeforeservicecall) {\n            options.onBeforeservicecall(inputFields);\n        }\n\n        return this.invoke(variable, requestParams, success, error).catch(noop);\n    }\n}\n\n"]}