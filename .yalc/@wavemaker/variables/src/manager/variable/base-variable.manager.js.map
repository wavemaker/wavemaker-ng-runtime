{"version":3,"file":"base-variable.manager.js","sourceRoot":"./","sources":["src/manager/variable/base-variable.manager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAC,MAAM,uCAAuC,CAAC;AAGlE,wBAAwB;AACxB,OAAO,CAAC,MAAM,QAAQ,CAAC;AAEvB;IAAA;IAwEA,CAAC;IAtEG,yCAAW,GAAX,UAAY,QAAa,EAAE,UAAgB,EAAE,UAAgB;QAC1D,uEAAuE;QACtE,6BAA6B;IACjC,CAAC;IAED,4CAAc,GAAd,UAAe,QAAa,EAAE,MAAe,EAAE,IAAU,EAAE,OAAa;QACpE,6BAA6B;QAC7B,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC,uBAAuB,EAAE;YACrD,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,+CAAiB,GAAjB,UAAkB,QAAa,EAAE,QAAa;;QAC1C,IAAM,cAAc,GAAG,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,0CAAE,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACvE,IAAI,cAAc,EAAE;YAChB,QAAQ,CAAC,eAAe,GAAG,cAAc,CAAC;SAC7C;IACL,CAAC;IAED;;;;;;OAMG;IACH,6BAA6B;IAC7B,sCAAQ,GAAR,UAAS,aAAa,EAAE,QAAQ,EAAE,MAAY;QAA9C,iBAqBC;QApBG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,oBAAoB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;gBAC5G,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE;oBAC3B,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC3C,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACrB;YACL,CAAC,EAAE,UAAC,GAAQ;gBACR,KAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBACtC,IAAI,QAAQ,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE;oBACpD,uEAAuE;oBACvE,qHAAqH;oBACrH,KAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;oBAC1C,GAAG,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,SAAS,CACvC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,QAAQ,CAAC,EAAjB,CAAiB,EAC7B,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;iBACvB;qBAAM;oBACH,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,oDAAsB,GAAtB,UAAuB,MAAW,EAAE,WAAkB;QAClD,IAAI,OAAO,GAAoB,EAAE,CAAC;QAClC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;QAC3B,IAAI,WAAW,EAAE;YACb,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;SAClC;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IACL,0BAAC;AAAD,CAAC,AAxED,IAwEC","sourcesContent":["import { httpService } from '../../util/variable/variables.utils';\nimport { appManager} from './../../util/variable/variables.utils';\nimport { AdvancedOptions } from '../../advanced-options';\n\n// declare const _: any;\nimport _ from 'lodash';\n\nexport abstract class BaseVariableManager {\n\n    initBinding(variable: any, bindSource?: any, bindTarget?: any) {\n       // processBinding(variable, variable._context, bindSource, bindTarget);\n        // ToDo - variable seperation\n    }\n\n    notifyInflight(variable: any, status: boolean, data?: any, options?: any) {\n        // ToDo - variable seperation\n        appManager && appManager.notify('toggle-variable-state', {\n            variable: variable,\n            active: status,\n            data: data,\n            options: options\n        });\n    }\n\n    /**\n     * This method sets the variable parameter requestTrackId to X-WM-Request-Track-Id which is received in the response headers.\n     * @param response\n     */\n    setRequestTrackId(response: any, variable: any) {\n        const requestTrackId = response?.headers?.get('x-wm-request-track-id');\n        if (requestTrackId) {\n            variable._requestTrackId = requestTrackId;\n        }\n    }\n\n    /**\n     * This method makes the final angular http call that returns an observable.\n     * We attach this observable to variable to cancel a network call\n     * @param requestParams\n     * @param variable\n     * @param dbOperation\n     */\n    // ToDo - variable seperation\n    httpCall(requestParams, variable, params?: any) {\n        return new Promise((resolve, reject) => {\n            variable._observable = variable.httpService.sendCallAsObservable(requestParams, params).subscribe((response: any) => {\n                if (response && response.type) {\n                    this.setRequestTrackId(response, variable);\n                    resolve(response);\n                }\n            }, (err: any) => {\n                this.setRequestTrackId(err, variable);\n                if (variable.httpService.isPlatformSessionTimeout(err)) {\n                    // send the notification manually to hide any context spinners on page.\n                    // [TODO]: any spinners on widget listening on this variable will also go off. Need to see an approach to sovle that.\n                    this.notifyInflight(variable, false, err);\n                    err._401Subscriber.asObservable().subscribe(\n                        response => resolve(response),\n                        e => reject(e));\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n\n    /**\n     * This method prepares the options parameter for variable callbacks.\n     * @param xhrObj, The xhrObj to be passed\n     * @param moreOptions, any other info to be passed in the options param\n     */\n    prepareCallbackOptions(xhrObj: any, moreOptions? : any): AdvancedOptions {\n        let options: AdvancedOptions = {};\n        options['xhrObj'] = xhrObj;\n        if (moreOptions) {\n            _.extend(options, moreOptions);\n        }\n        return options;\n    }\n}\n"]}