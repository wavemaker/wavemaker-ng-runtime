{"version":3,"file":"base-variable.js","sourceRoot":"./","sources":["src/model/base-variable.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataSource } from '../types/types';\n\nimport DatasetUtil from '../util/dataset-util';\nimport {\n    getTargetNodeKey,\n    getTargetObj,\n    getTarget,\n    setValueToNode,\n    internalBoundNodeMap,\n    updateInternalNodes\n} from \"../util/variable/variables.utils\";\nimport {getClonedObject} from \"../util/utils\";\nimport { EventNotifier, DefaultEventNotifier } from \"../types/event-notifier\";\ndeclare const _: any;\nexport enum VariableEvents {\n    BEFORE_INVOKE = 'beforeInvoke',\n    AFTER_INVOKE = 'afterInvoke'\n};\nexport abstract class BaseVariable implements EventNotifier {\n\n    protected _id: string;\n\n    name: string;\n    owner: string;\n    category: string;\n    isList: boolean;\n    dataSet: any;\n    dataBinding: any;\n    _context: any;\n    isMuted = false;\n    params;\n    paramProvider;\n    private eventNotifier = new DefaultEventNotifier();\n\n    notify (event: string, args: any[]) {\n        this.eventNotifier.notify(event, args);\n    }\n\n    subscribe (event: string, fn: Function) {\n        return this.eventNotifier.subscribe(event, fn);\n    }\n\n    execute(operation: any, options: any) {\n        let returnVal;\n        switch (operation) {\n            case DataSource.Operation.GET_NAME:\n                returnVal = this.name;\n                break;\n            case DataSource.Operation.GET_UNIQUE_IDENTIFIER:\n                returnVal = this._id;\n                break;\n            case DataSource.Operation.GET_CONTEXT_IDENTIFIER:\n                returnVal = this._context;\n                break;\n            case DataSource.Operation.ADD_ITEM:\n                returnVal = this.addItem(options.item, _.omit(options, 'item'));\n                break;\n            case DataSource.Operation.SET_ITEM:\n                returnVal = this.setItem(options.prevItem, options.item,  _.omit(options, 'prevItem', 'item'));\n                break;\n            case DataSource.Operation.REMOVE_ITEM:\n                returnVal = this.removeItem(options.item, _.omit(options, 'item'));\n                break;\n        }\n        return returnVal;\n    }\n\n    invokeOnParamChange(obj?, newVal?, oldVal?) {\n        const runMode = true;\n        if(!obj) {\n            return;\n        }\n        const target = obj?.target,\n                root = getTarget(this),\n            targetObj = getTargetObj(obj, root, this),\n            targetNodeKey = getTargetNodeKey(target);\n        if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && (!_.isUndefined(oldVal) || !_.isUndefined(targetObj[targetNodeKey])))) {\n            return;\n        }\n        // Skip cloning for blob column\n        if (!_.includes(['blob', 'file'], obj.type)) {\n            newVal = getClonedObject(newVal);\n        }\n        setValueToNode(target, obj, root, this, newVal); // cloning newVal to keep the source clean\n        if (runMode) {\n            /*set the internal bound node map with the latest updated value*/\n            if (!internalBoundNodeMap.has(this)) {\n                internalBoundNodeMap.set(this, {});\n            }\n            _.set(internalBoundNodeMap.get(this), [this.name, root, target], newVal);\n            /*update the internal nodes after internal node map is set*/\n            if (_.isObject(newVal)) {\n                updateInternalNodes(target, root, this);\n            }\n        }\n        return Promise.resolve(this);\n    }\n\n    getData() {\n        return this.dataSet;\n    }\n\n    setData(dataSet: any) {\n        if (DatasetUtil.isValidDataset(dataSet, this.isList)) {\n            this.dataSet = dataSet;\n        }\n        return this.dataSet;\n    }\n\n    getValue(key: string, index: number) {\n        return DatasetUtil.getValue(this.dataSet, key, index, this.isList);\n    }\n\n    setValue(key: string, value: any) {\n        return DatasetUtil.setValue(this.dataSet, key, value, this.isList);\n    }\n\n    getItem(index: number) {\n        return DatasetUtil.getItem(this.dataSet, index, this.isList);\n    }\n\n    /**\n     *\n     * @param index, a number in ideal case\n     *        it can be the object to be replaced by the passed value\n     * @param value\n     * @returns {any}\n     */\n    setItem(index: any, value: any, options?: any) {\n        options = this.getChildDetails(options);\n        return DatasetUtil.setItem(this.dataSet, index, value, options);\n    }\n\n    /**\n     * This method is to get target node options like path, parentIndex and isList\n     * @param options: provided options\n     * @returns {object}\n     * Example: if we have parent dataset as object and we are performing operations on inner list then we have to set isList as true.\n     * So finding the target node type and updating the isList option.\n     */\n    private getChildDetails (options: any) {\n        let parentIndex, isList = this.isList, path;\n        if (options && options.path) {\n            path = options.path;\n            let targetNode;\n            if (isList) {\n                parentIndex = options.parentIndex || 0;\n                targetNode =  _.get(this.dataSet[parentIndex], options.path);\n            } else {\n                targetNode = _.get(this.dataSet, options.path);\n            }\n            isList = targetNode ? _.isArray(targetNode) ? true : false : true;\n        }\n        return {path, isList, parentIndex};\n    }\n\n    addItem(value: any, options?: any) {\n        let index;\n        if (_.isNumber(options)) {\n            index = options;\n        }\n        if (_.isObject(options)) {\n            index = options.index;\n        }\n\n        options = this.getChildDetails(options);\n        return DatasetUtil.addItem(this.dataSet, value, index, options);\n    }\n\n    removeItem(index: any, options?: any) {\n        let exactMatch, parentIndex;\n        if (options) {\n            if (_.isBoolean(options)) {\n                exactMatch = options;\n            }\n            if (_.isObject(options)) {\n                exactMatch = options.exactMatch;\n                if (this.isList) {\n                    parentIndex = options.parentIndex || 0;\n                }\n            }\n        }\n        return DatasetUtil.removeItem(this.dataSet, index, { exactMatch, path: _.get(options, 'path'), parentIndex });\n    }\n\n    clearData() {\n        this.dataSet = DatasetUtil.getValidDataset(this.isList);\n        return this.dataSet;\n    }\n\n    getCount() {\n        return DatasetUtil.getCount(this.dataSet, this.isList);\n    }\n\n    /**\n     * Return the prefab name if the variable is form a prefab\n     * @returns {string}\n     */\n    getPrefabName() {\n        const prefabname = this._context && (this._context.prefabname || this._context.prefabName);\n        // __self__ is a prefab name given to a prefab which is run in preview mode\n        return prefabname !== '__self__' && prefabname;\n    }\n\n    mute() {\n        this.isMuted = true;\n    }\n\n    unmute() {\n        this.isMuted = false;\n    }\n\n    destroy() {\n        \n    }\n}\n"]}