{"version":3,"file":"model-variable.js","sourceRoot":"./","sources":["src/model/variable/model-variable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAe,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,OAAO,EAAE,sBAAsB,EAAE,MAAM,wCAAwC,CAAC;AAChF,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,qCAAqC,CAAC;AAEjE,IAAM,UAAU,GAAG;IACf,OAAO,sBAAsB,CAAC,GAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF;IAAmC,iCAAY;IAK3C,uBAAY,QAAa;QAAzB,YACI,iBAAO,SAEV;QADG,MAAM,CAAC,MAAM,CAAC,KAAW,EAAE,QAAQ,CAAC,CAAC;;IACzC,CAAC;IAED,4BAAI,GAAJ;QACI,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,UAAU,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;SAC7C;QAED,UAAU,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAED,+BAAO,GAAP,UAAQ,SAAc,EAAE,OAAY;QAChC,IAAI,SAAS,GAAG,iBAAM,OAAO,YAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAClD,IAAI,SAAS,CAAC,SAAS,CAAC,EAAE;YACtB,OAAO,SAAS,CAAC;SACpB;QAED,QAAQ,SAAS,EAAE;YACf,KAAK,UAAU,CAAC,SAAS,CAAC,YAAY;gBAClC,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,aAAa;gBACnC,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,qBAAqB;gBAC3C,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,WAAW;gBACjC,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,WAAW;gBACjC,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,sBAAsB;gBAC5C,SAAS,GAAG,KAAK,CAAC;gBAClB,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,kBAAkB;gBACxC,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;gBACnC,MAAM;YACV,KAAK,UAAU,CAAC,SAAS,CAAC,kBAAkB;gBACxC,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACpC,MAAM;YACV;gBACI,SAAS,GAAG,EAAE,CAAC;gBACf,MAAM;SACb;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,uCAAe,GAAf;QACI,OAAO,IAAI,CAAC,IAAI,KAAK,iBAAiB,CAAC;IAC3C,CAAC;IAED,wCAAgB,GAAhB;QACI,OAAO,UAAU,CAAC,iBAAiB,EAAE,CAAC;IAC1C,CAAC;IAEL,oBAAC;AAAD,CAAC,AAhED,CAAmC,YAAY,GAgE9C","sourcesContent":["import { DataSource, IDataSource } from '../../types/types';\nimport { isDefined } from \"../../util/utils\";\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { BaseVariable } from '../base-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { appManager } from '../../util/variable/variables.utils';\n\nconst getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.MODEL);\n};\n\nexport class ModelVariable extends BaseVariable implements IDataSource {\n\n    type: any;\n    saveInPhonegap: any;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    init() {\n        if (this.isList) {\n            getManager().removeFirstEmptyObject(this);\n        }\n\n        getManager().initBinding(this, 'dataBinding', 'dataSet');\n    }\n\n    execute(operation: any, options: any) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_SORTABLE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = this.isBoundToLocale();\n                break;\n            case DataSource.Operation.GET_DEFAULT_LOCALE:\n                returnVal = this.getDefaultLocale();\n                break;\n            default:\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    isBoundToLocale() {\n        return this.name === 'supportedLocale';\n    }\n\n    getDefaultLocale() {\n        return appManager.getSelectedLocale();\n    }\n\n}\n"]}