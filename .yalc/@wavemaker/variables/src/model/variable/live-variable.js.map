{"version":3,"file":"live-variable.js","sourceRoot":"./","sources":["src/model/variable/live-variable.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDefined, getClonedObject } from \"../../util/utils\";\nimport { DataSource, IDataSource } from \"../../types/types\";\n\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { ApiAwareVariable } from './api-aware-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { LiveVariableManager } from '../../manager/variable/live-variable.manager';\nimport {debounceVariableCall} from \"../../util/variable/variables.utils\";\ndeclare const _;\nconst getManager = (): LiveVariableManager => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.LIVE);\n};\n\nexport class LiveVariable extends ApiAwareVariable implements IDataSource {\n\n    matchMode;\n    liveSource;\n    propertiesMap;\n    pagination;\n    type;\n    orderBy;\n    _options;\n    // Used to track a variable http call, so that it can be cancelled at any point of time during its execution\n    _observable;\n    filterExpressions;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n    }\n\n    execute(operation, options) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = true;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.IS_SORTABLE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = true;\n                break;\n            case DataSource.Operation.GET_OPERATION_TYPE:\n                returnVal = this.operation;\n                break;\n            case DataSource.Operation.GET_RELATED_PRIMARY_KEYS:\n                returnVal = this.getRelatedTablePrimaryKeys(options);\n                break;\n            case DataSource.Operation.GET_ENTITY_NAME:\n                returnVal = this.propertiesMap.entityName;\n                break;\n            case DataSource.Operation.LIST_RECORDS:\n                returnVal = this.listRecords(options);\n                break;\n            case DataSource.Operation.UPDATE_RECORD :\n                returnVal = this.updateRecord(options);\n                break;\n            case DataSource.Operation.INSERT_RECORD :\n                returnVal = this.insertRecord(options);\n                break;\n            case DataSource.Operation.DELETE_RECORD :\n                returnVal = this.deleteRecord(options);\n                break;\n            case DataSource.Operation.INVOKE :\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.UPDATE :\n                returnVal = this.update(options);\n                break;\n            case DataSource.Operation.GET_RELATED_TABLE_DATA:\n                returnVal = this.getRelatedTableData(options.relatedField, options);\n                break;\n            case DataSource.Operation.GET_DISTINCT_DATA_BY_FIELDS:\n                returnVal = this.getDistinctDataByFields(options);\n                break;\n            case DataSource.Operation.GET_AGGREGATED_DATA:\n                returnVal = this.getAggregatedData(options);\n                break;\n            case DataSource.Operation.GET_MATCH_MODE:\n                returnVal = this.matchMode;\n                break;\n            case DataSource.Operation.DOWNLOAD:\n                returnVal = this.download(options);\n                break;\n            case DataSource.Operation.GET_PROPERTIES_MAP:\n                returnVal = this.propertiesMap;\n                break;\n            case DataSource.Operation.GET_PRIMARY_KEY:\n                returnVal = this.getPrimaryKey();\n                break;\n            case DataSource.Operation.GET_BLOB_URL:\n                returnVal = `services/${this.liveSource}/${this.type}/${options.primaryValue}/content/${options.columnName}`;\n                break;\n            case DataSource.Operation.GET_OPTIONS:\n                returnVal = this._options || {};\n                break;\n            case DataSource.Operation.SEARCH_RECORDS:\n                returnVal = this.searchRecords(options);\n                break;\n            case DataSource.Operation.GET_REQUEST_PARAMS:\n                returnVal = this.getRequestParams(options);\n                break;\n            case DataSource.Operation.GET_PAGING_OPTIONS:\n                returnVal = this.pagination;\n                break;\n            case DataSource.Operation.IS_UPDATE_REQUIRED:\n                returnVal = true;\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.CANCEL:\n                returnVal = false;\n                break;\n            default:\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    listRecords(options?, success?, error?) {\n        return getManager().listRecords(this, options, success, error);\n    }\n\n    updateRecord(options?, success?, error?) {\n        return getManager().updateRecord(this, options, success, error);\n    }\n\n    insertRecord(options?, success?, error?) {\n        return getManager().insertRecord(this, options, success, error);\n    }\n\n    deleteRecord(options?, success?, error?) {\n        return getManager().deleteRecord(this, options, success, error);\n    }\n\n    setInput(key, val, options) {\n        return getManager().setInput(this, key, val, options);\n    }\n\n    setFilter(key, val) {\n        return getManager().setFilter(this, key, val);\n    }\n\n    download(options, success?, error?) {\n        return getManager().download(this, options, success, error);\n    }\n\n    invoke(options?, success?, error?) {\n        switch (this.operation) {\n            case 'insert':\n                return this.insertRecord(options, success, error);\n            case 'update':\n                return this.updateRecord(options, success, error);\n            case 'delete':\n                return this.deleteRecord(options, success, error);\n            default:\n                return this.listRecords(options, success, error);\n        }\n    }\n\n    getRelatedTablePrimaryKeys(columnName) {\n        return getManager().getRelatedTablePrimaryKeys(this, columnName);\n    }\n\n    getRelatedTableData(columnName, options, success?, error?) {\n        return getManager().getRelatedTableData(this, columnName, options, success, error);\n    }\n\n    getDistinctDataByFields(options, success?, error?) {\n        return getManager().getDistinctDataByFields(this, options, success, error);\n    }\n\n    getAggregatedData(options, success?, error?) {\n        return getManager().getAggregatedData(this, options, success, error);\n    }\n\n    getPrimaryKey() {\n        return getManager().getPrimaryKey(this);\n    }\n\n    searchRecords(options, success?, error?) {\n        return getManager().searchRecords(this, options, success, error);\n    }\n\n    getRequestParams(options) {\n        return getManager().prepareRequestParams(options);\n    }\n\n    _downgradeInputData(data) {\n        return getManager().downgradeFilterExpressionsToInputData(this, data);\n    }\n\n    _upgradeInputData(response, data) {\n        return getManager().upgradeInputDataToFilterExpressions(this, response, data);\n    }\n\n    setOrderBy(expression) {\n        this.orderBy = expression;\n        return this.orderBy;\n    }\n\n    // legacy method\n    update(options?, success?, error?) {\n        return this.invoke(options, success, error);\n    }\n\n    createRecord(options?, success?, error?) {\n        return this.insertRecord(options, success, error);\n    }\n\n    init() {\n        getManager().initBinding(this, 'dataBinding', this.operation === 'read' ? 'filterFields' : 'inputFields');\n        if (this.operation === 'read') {\n            getManager().initFilterExpressionBinding(this);\n        }\n        getManager().defineFirstLastRecord(this);\n    }\n\n    invokeOnFiltertExpressionChange(obj, targetNodeKey, newVal, oldVal) {\n        console.log('filter expr changed', newVal, oldVal);\n            if ((newVal === oldVal && _.isUndefined(newVal)) || (_.isUndefined(newVal) && !_.isUndefined(oldVal))) {\n                return;\n            }\n            // Skip cloning for blob column\n            if (!_.includes(['blob', 'file'], obj.type)) {\n                newVal = getClonedObject(newVal);\n            }\n            // backward compatibility: where we are allowing the user to bind complete object\n            if (obj.target === 'dataBinding') {\n                // remove the existing databinding element\n                this.filterExpressions.rules = [];\n                // now add all the returned values\n                _.forEach(newVal, function (value, target) {\n                    this.filterExpressions.rules.push({\n                        'target': target,\n                        'value': value,\n                        'matchMode': obj.matchMode || 'startignorecase',\n                        'required': false,\n                        'type': ''\n                    });\n                });\n            } else {\n                // setting value to the root node\n                obj[targetNodeKey] = newVal;\n            }\n        if (this.operation === 'read') {\n            /* if auto-update set for the variable with read operation only, get its data */\n            if (this.autoUpdate && !_.isUndefined(newVal) && _.isFunction(this.update)) {\n                debounceVariableCall(this, 'update');\n            }\n        } else {\n            /* if auto-update set for the variable with read operation only, get its data */\n            if (this.autoUpdate && !_.isUndefined(newVal) && _.isFunction(this[this.operation + 'Record'])) {\n                debounceVariableCall(this, this.operation + 'Record');\n            }\n        }\n            // this.invoke();\n    }\n\n    cancel(options?) {\n        return getManager().cancel(this, options);\n    }\n}\n"]}