{"version":3,"file":"crud-variable.js","sourceRoot":"./","sources":["src/model/variable/crud-variable.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDefined } from \"../../util/utils\";\nimport { DataSource, IDataSource } from \"../../types/types\";\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\nimport { ApiAwareVariable } from './api-aware-variable';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { CrudVariableManager } from '../../manager/variable/crud-variable.manager';\nimport { ServiceVariableUtils } from '../../util/variable/service-variable.utils';\nimport {CRUDList} from '../crud-list';\nimport {CRUDCreate} from '../crud-create';\nimport {CRUDUpdate} from '../crud-update';\nimport {CRUDDelete} from '../crud-delete';\n\ndeclare const _;\n\nconst getManager = (): CrudVariableManager => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.CRUD);\n};\n\nexport class CrudVariable extends ApiAwareVariable implements IDataSource {\n\n    // Used to track progress of file upload\n    _progressObservable;\n    // Used to track a variable http call, so that it can be cancelled at any point of time during its execution\n    _observable;\n    pagination;\n    list;\n    create;\n    update;\n    delete;\n    simulateFileDownload;\n    serviceInfo;\n    httpService;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this as any, variable);\n        // for having separate setInput methods for each type\n        this.list   = new CRUDList(this, getManager());\n        this.create = new CRUDCreate(this, getManager());\n        this.update = new CRUDUpdate(this, getManager());\n        this.delete = new CRUDDelete(this, getManager());\n    }\n\n\n    execute(operation, options) {\n        let returnVal = super.execute(operation, options);\n        if (isDefined(returnVal)) {\n            return returnVal;\n        }\n\n        switch (operation) {\n            case DataSource.Operation.IS_API_AWARE:\n                returnVal = true;\n                break;\n            case DataSource.Operation.SUPPORTS_CRUD:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SUPPORTS_DISTINCT_API:\n                returnVal = false;\n                break;\n            case DataSource.Operation.IS_PAGEABLE:\n                returnVal = this.hasPagination();\n                break;\n            case DataSource.Operation.IS_SORTABLE:\n                returnVal = this.hasPagination() && !(this as any)._paginationConfig;\n                break;\n            case DataSource.Operation.SUPPORTS_SERVER_FILTER:\n                returnVal = false;\n                break;\n            case DataSource.Operation.SET_INPUT:\n                returnVal = this.setInput(options);\n                break;\n            case DataSource.Operation.LIST_RECORDS:\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.INVOKE :\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.UPDATE :\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.SEARCH_RECORDS:\n                returnVal = this.searchRecords(options);\n                break;\n            case DataSource.Operation.DOWNLOAD:\n                returnVal = this.download(options);\n                break;\n            case DataSource.Operation.GET_PAGING_OPTIONS:\n                returnVal = this.pagination;\n                break;\n            case DataSource.Operation.IS_UPDATE_REQUIRED:\n                returnVal = this.isUpdateRequired(options);\n                break;\n            case DataSource.Operation.IS_BOUND_TO_LOCALE:\n                returnVal = false;\n                break;\n            case DataSource.Operation.CANCEL:\n                returnVal = this.cancel(options);\n                break;\n            case DataSource.Operation.INSERT_RECORD :\n                options.operation = 'create';\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.UPDATE_RECORD :\n                options.operation = 'update';\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.DELETE_RECORD :\n                options.operation = 'delete';\n                returnVal = this.invoke(options);\n                break;\n            case DataSource.Operation.SET_PAGINATION:\n                returnVal = this.setPagination(options);\n                break;\n            default :\n                returnVal = {};\n                break;\n        }\n        return returnVal;\n    }\n\n    hasPagination() {\n        return this.controller === VARIABLE_CONSTANTS.CONTROLLER_TYPE.QUERY || !_.isEmpty(this.pagination);\n    }\n\n    invoke(options?, success?, error?) {\n        return getManager().invoke(this, options, success, error);\n    }\n\n    createRecord(options?, success?, error?) {\n        options = options || {};\n        options.operation = 'create';\n        return getManager().invoke(this, options, success, error);\n    }\n\n    listRecords(options?, success?, error?) {\n        options = options || {};\n        options.operation = 'list';\n        return getManager().invoke(this, options, success, error);\n    }\n\n    updateRecord(options?, success?, error?) {\n        options = options || {};\n        options.operation = 'update';\n        return getManager().invoke(this, options, success, error);\n    }\n\n    deleteRecord(options?, success?, error?) {\n        options = options || {};\n        options.operation = 'delete';\n        return getManager().invoke(this, options, success, error);\n    }\n\n    download(options, success?, error?) {\n        return getManager().download(this, options, success, error);\n    }\n\n    setInput(key, val?, options?) {\n        return getManager().setInput(this, key, val, options);\n    }\n\n    searchRecords(options, success?, error?) {\n        return new Promise((resolve, reject) => {\n            getManager().searchRecords(this, options, (response, pagination) => {\n                resolve({data: response.content || response, pagination});\n            }, reject);\n        });\n    }\n\n    isUpdateRequired(hasData) {\n        const inputFields = getManager().getInputParms(this);\n        const queryParams = ServiceVariableUtils.excludePaginationParams(inputFields);\n\n        if (!queryParams.length) {\n            // if we don't have any query params and variable data is available then we don't need variable update, so return false\n            if (hasData) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    cancel(options?) {\n        return getManager().cancel(this, options);\n    }\n\n    setPagination(data) {\n        return getManager().setPagination(this, data);\n    }\n\n    init() {\n        getManager().initBinding(this);\n        getManager().defineFirstLastRecord(this);\n    }\n}\n"]}