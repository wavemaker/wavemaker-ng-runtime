{"version":3,"file":"timer-action.js","sourceRoot":"./","sources":["src/model/action/timer-action.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;AACzE,OAAO,EAAE,sBAAsB,EAAE,MAAM,wCAAwC,CAAC;AAEhF,IAAO,UAAU,GAAG;IAChB,OAAO,sBAAsB,CAAC,GAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF;IAAiC,+BAAU;IAKvC,qBAAY,QAAa;QAAzB,YACI,iBAAO,SAEV;QANO,eAAS,GAAG,KAAK,CAAC;QAClB,cAAQ,GAAG,KAAK,CAAC;QAIrB,MAAM,CAAC,MAAM,CAAC,KAAI,EAAE,QAAQ,CAAC,CAAC;;IAClC,CAAC;IAED,6BAA6B;IAC7B,0BAAI,GAAJ,UAAK,OAAO,EAAE,OAAO,EAAE,KAAK;QACxB,IAAG,IAAI,CAAC,SAAS,EAAE;YACf,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;YAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACxB;QACD,OAAO,UAAU,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,4BAAM,GAAN,UAAO,OAAO,EAAE,OAAO,EAAE,KAAK;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED,4BAAM,GAAN;QACI,OAAO,UAAU,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,0BAAI,GAAJ;QACI,iBAAM,IAAI,WAAE,CAAC;QACb,IAAG,IAAI,CAAC,SAAS,EAAE;YACf,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB;IACL,CAAC;IAED,4BAAM,GAAN;QACI,iBAAM,MAAM,WAAE,CAAC;QACf,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SAC9C;IACL,CAAC;IACL,kBAAC;AAAD,CAAC,AAxCD,CAAiC,UAAU,GAwC1C","sourcesContent":["import { BaseAction } from '../base-action';\nimport { VARIABLE_CONSTANTS } from '../../constants/variables.constants';\nimport { VariableManagerFactory } from '../../factory/variable-manager.factory';\n\nconst  getManager = () => {\n    return VariableManagerFactory.get(VARIABLE_CONSTANTS.CATEGORY.TIMER);\n};\n\nexport class TimerAction extends BaseAction {\n    private currentOptions;\n    private repeating = false;\n    private _isFired = false;\n\n    constructor(variable: any) {\n        super();\n        Object.assign(this, variable);\n    }\n\n    // Backward compatible method\n    fire(options, success, error) {\n        if(this.repeating) {\n            this.currentOptions = options;\n            this._isFired = true;\n        }\n        return getManager().trigger(this, options, success, error);\n    }\n\n    invoke(options, success, error) {\n        return this.fire(options, success, error);\n    }\n\n    cancel() {\n        return getManager().cancel(this);\n    }\n\n    mute() {\n        super.mute();\n        if(this.repeating) {\n            this.cancel();\n        }\n    }\n\n    unmute() {\n        super.unmute();\n        if(this.repeating && this._isFired) {\n            this.fire(this.currentOptions, null, null);\n        }\n    }\n}\n"]}