{"version":3,"file":"build.js","sourceRoot":"./","sources":["scripts/build.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAC/B,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,UAAU,GAAG,GAAG,CAAC;AACvB,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AACvB,IAAA,OAAO,GAAK,OAAO,CAAC,eAAe,CAAC,QAA7B,CAA8B;AAC7C,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B,SAAe,oBAAoB,CAAC,WAAW,EAAE,GAAG,EAAE,OAAO;;;;YACrD,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YACnD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,OAAI,GAAG,0BAAmB,CAAC,EAAE,OAAI,GAAG,cAAO,OAAO,OAAG,CAAC,CAAC;YAC5F,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;;;;CAC1C;AAED,SAAS,mBAAmB,CAAC,IAAI;IAC7B,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;QAClC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,mBAAmB,CAAI,IAAI,SAAI,CAAG,CAAC,EAAnC,CAAmC,CAAC,CAAC;KAC1E;SAAM,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC/B,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;QAC1D,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QACzD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;KACnD;AACL,CAAC;AAED,SAAe,SAAS,CAAC,cAAc;;;;;;oBAErC,oDAAoD;oBAElD,EAAE,CAAC,QAAQ,CAAI,UAAU,kBAAe,EAAK,UAAU,8BAA2B,CAAC,CAAC;oBAE9E,WAAW,GAAG,EAAE,CAAC,YAAY,CAAI,UAAU,kBAAe,EAAE;wBAC9D,QAAQ,EAAE,MAAM;qBACnB,CAAC,CAAC;oBACH,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC;oBAC3B,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC;oBAC7B,WAAW,CAAC,OAAO,GAAG;wBACpB,IAAI,EAAE,IAAI;qBACX,CAAC;oBACF,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;oBAE5B,EAAE,CAAC,aAAa,CAAI,UAAU,8BAA2B,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;oBAChG,qBAAM,oBAAoB,CAAI,UAAU,8BAA2B,EAAE,SAAS,EAAE,cAAc,CAAC,EAAA;;oBAA/F,SAA+F,CAAC;oBAChG,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;;;;;CAC3C;AAED,SAAe,kBAAkB;;;;;oBAC7B,EAAE,CAAC,QAAQ,CAAI,UAAU,iBAAc,EAAK,UAAU,iCAA8B,EAAE;wBAClF,MAAM,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAA/B,CAA+B;qBAC/C,CAAC,CAAC;oBACH,qBAAM,KAAK,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,oCAAoC,EAAE,IAAI,EAAE,mBAAmB,EAAE,WAAW,CAAC,CAAC,EAAA;;oBAA1G,SAA0G,CAAC;;;;;CAC9G;AAED,SAAe,eAAe;;;;;oBAC1B,EAAE,CAAC,aAAa,CAAI,UAAU,oBAAiB,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAChE,qBAAM,KAAK,CAAC,MAAM,EAAE,CAAC,SAAS,EAAG,UAAU,EAAE,QAAQ,CAAC,EAAE;4BACpD,KAAK,EAAK,UAAU,iBAAc;yBACrC,CAAC,EAAA;;oBAFF,SAEE,CAAC;;;;;CACN;AAED,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAC7C,4CAA4C,EAC5C,UAAC,KAAK;IACF,KAAK,CAAC,MAAM,CAAC,gBAAgB,EAAE;QAC3B,QAAQ,EAAE,gBAAgB;QAC1B,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,WAAW;KACvB,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE;QACpB,QAAQ,EAAE,+BAA+B;QACzC,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;KACjB,CAAC,CAAC;AACP,CAAC,EAAE,UAAC,IAAI;IACJ,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;QAChC,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,kBAAkB,EAAE,CAAC;SAC/B;aAAM;YACH,OAAO,eAAe,EAAE,CAAC;SAC5B;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC","sourcesContent":["const fs = require('fs-extra');\nconst path = require('path');\nconst projectDir = '.';\nconst yargs = require('yargs');\nconst { hideBin } = require('yargs/helpers');\nconst tar = require('tar');\nconst execa = require('execa');\n\nasync function updatePackageVersion(packagePath, key, version) {\n    let content = fs.readFileSync(packagePath, 'utf8');\n    content = content.replace(new RegExp(`\"${key}\"\\\\s*:\\\\s*\"[^\"]*\"`), `\"${key}\": \"${version}\"`);\n    fs.writeFileSync(packagePath, content);\n}\n\nfunction updateSourceMapFile(path) {\n    if (fs.lstatSync(path).isDirectory()) {\n        fs.readdirSync(path).forEach(p => updateSourceMapFile(`${path}/${p}`));\n    } else if(path.endsWith('js.map')) {\n        const content = JSON.parse(fs.readFileSync(path, 'utf8'));\n        content.sources[0] = content.sources[0].split('/').pop();\n        fs.writeFileSync(path, JSON.stringify(content));\n    }\n}\n\nasync function postBuild(runtimeVersion) {\n\n  // updateSourceMapFile(`${projectDir}/dist/es2015`);\n\n    fs.copySync(`${projectDir}/package.json`, `${projectDir}/dist/es2015/package.json`);\n\n    const packageData = fs.readJSONSync(`${projectDir}/package.json`, {\n        encoding: \"utf8\"\n    });\n    packageData.main = 'index';\n    packageData.module = 'index';\n    packageData.exports = {\n      \"./\": \"./\"\n    };\n    delete packageData['files'];\n\n    fs.writeFileSync(`${projectDir}/dist/es2015/package.json`, JSON.stringify(packageData, null, 2))\n    await updatePackageVersion(`${projectDir}/dist/es2015/package.json`, 'version', runtimeVersion);\n    console.log('Post Build successful!!!');\n}\n\nasync function prepareNpmPackages() {\n    fs.copySync(`${projectDir}/dist/es2015`, `${projectDir}/dist/npm-packages/variables`, {\n        filter: p => !p.startsWith('/node_modules/')\n    });\n    await execa('tar', ['-czf', 'dist/npm-packages/variables.tar.gz', '-C', 'dist/npm-packages', 'variables']);\n}\n\nasync function pushToLocalRepo() {\n    fs.writeFileSync(`${projectDir}/dist/new-build`, '' + Date.now);\n    await execa('yalc', ['publish' , '--no-sig', '--push'], {\n        'cwd': `${projectDir}/dist/es2015`\n    });\n}\n\nyargs(hideBin(process.argv)).command('post-build',\n    'to run post processing after project build',\n    (yargs) => {\n        yargs.option('runtimeVersion', {\n            describe: 'version number',\n            type: 'string',\n            default: '1.0.0-dev'\n        }).option('production', {\n            describe: 'to perform a production build',\n            type: 'boolean',\n            default: false\n        });\n    }, (argv) => {\n        postBuild(argv.runtimeVersion).then(() => {\n            if (argv.production) {\n                return prepareNpmPackages();\n            } else {\n                return pushToLocalRepo();\n            }\n        });\n    }).showHelpOnFail().argv;\n"]}